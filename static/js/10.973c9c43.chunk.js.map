{"version":3,"sources":["state/info/types.ts","config/constants/info.ts","views/Info/utils/infoDataHelpers.ts","views/Info/utils/infoQueryHelpers.ts","views/Info/hooks/useBlocksFromTimestamps.ts","state/info/queries/protocol/overview.ts","state/info/queries/helpers.ts","state/info/queries/protocol/chart.ts","state/info/queries/protocol/transactions.ts","state/info/queries/pools/topPools.ts","state/info/queries/pools/poolData.ts","views/Info/hooks/useElaPrices.ts","state/info/queries/tokens/tokenData.ts","state/info/queries/tokens/topTokens.ts","state/info/queries/pools/chartData.ts","state/info/queries/pools/transactions.ts","state/info/queries/tokens/chartData.ts","state/info/queries/tokens/transactions.ts","state/info/queries/tokens/priceData.ts","state/info/queries/tokens/poolsForToken.ts","state/info/hooks.ts","state/info/updaters.ts","state/info/queries/search/index.ts","views/Info/components/CurrencyLogo/LogoLoader.tsx","views/Info/components/CurrencyLogo/index.tsx","views/Info/utils/formatInfoNumbers.ts","views/Info/components/SaveIcon/index.tsx","views/Info/components/InfoSearch/index.tsx","views/Info/components/InfoNav/index.tsx","views/Info/components/ChartLoaders/LineChartLoaderSVG.tsx","views/Info/components/ChartLoaders/BarChartLoaderSVG.tsx","views/Info/components/ChartLoaders/CandleChartLoaderSVG.tsx","views/Info/components/ChartLoaders/index.tsx","views/Info/components/InfoCharts/LineChart/index.tsx","views/Info/components/Percent/index.tsx","views/Info/components/InfoTables/shared.tsx","views/Info/components/InfoTables/TokensTable.tsx","views/Info/components/InfoTables/PoolsTable.tsx","views/Info/components/InfoCharts/BarChart/index.tsx","utils/truncateHash.ts","views/Info/components/InfoTables/TransactionsTable.tsx","views/Info/Overview/index.tsx","views/Info/Pools/index.tsx","hooks/useUSDCPrice.ts","views/Info/components/InfoCharts/ChartCard/index.tsx","components/Layout/Page1.tsx","views/Info/components/InfoCharts/CandleChart/index.tsx","components/TabToggle/index.tsx","views/Info/Pools/PoolPage.tsx","views/Info/components/TopTokenMovers/index.tsx","views/Info/Tokens/index.tsx","views/Info/hooks/useCMCLink.ts","views/Info/Tokens/TokenPage.tsx","views/Info/Tokens/redirects.tsx","views/Info/index.tsx","config/constants/endpoints.ts"],"names":["TransactionType","TOTAL_FEE","LP_HOLDERS_FEE","PCS_V2_START","ONE_DAY_UNIX","ITEMS_PER_INFO_TABLE_PAGE","TOKEN_BLACKLIST","getAmountChange","valueNow","valueBefore","getPercentChange","getChangeForPeriod","valueOnePeriodAgo","valueTwoPeriodsAgo","currentPeriodAmount","previousPeriodAmount","getLpFeesAndApr","volumeUSD","volumeUSDWeek","liquidityUSD","lpApr7d","totalFees24h","totalFees7d","lpFees24h","lpFees7d","Infinity","multiQuery","queryConstructor","subqueries","endpoint","a","skipCount","fetchedData","allFound","skip","end","length","subqueriesSlice","slice","request","result","Object","keys","console","error","getDeltaTimestamps","utcCurrentTime","getUnixTime","Date","startOfMinute","subDays","subWeeks","getBlockSubqueries","timestamps","map","timestamp","blocksQueryConstructor","gql","getBlocksFromTimestamps","sortDirection","BLOCKS_CLIENT","sortingFunction","b","number","blocks","key","push","split","parseInt","sort","useBlocksFromTimestamps","useState","setBlocks","setError","timestampsString","JSON","stringify","blocksString","undefined","useEffect","fetchData","timestampsArray","parse","getOverviewData","block","query","INFO_CLIENT","data","formatGlideFactoryResponse","rawGlideFactory","totalTransactions","parseFloat","totalVolumeUSD","totalLiquidityUSD","useFetchProtocolData","fetchState","setFetchState","t24","t48","blockError","block24","block48","fetch","error24","data24","error48","data48","anyError","overviewData","glideFactories","overviewData24","overviewData48","allDataAvailable","volumeUSDChange","liquidityUSDChange","txCount","txCountChange","protocolData","mapMints","mint","type","MINT","hash","id","sender","to","token0Symbol","pair","token0","symbol","token1Symbol","token1","token0Address","token1Address","amountUSD","amountToken0","amount0","amountToken1","amount1","mapBurns","burn","BURN","mapSwaps","swap","SWAP","from","amount0In","amount0Out","amount1In","amount1Out","mapDayData","tokenDayData","date","dailyVolumeUSD","mapPairDayData","pairDayData","reserveUSD","fetchChartData","getEntityDayDatas","address","chartEntries","fetchError","concat","formattedDayDatas","reduce","accum","dayData","dayOrdinal","toFixed","availableDays","firstAvailableDayData","latestLiquidityUSD","endTimestamp","includes","toString","values","GLIDE_DAY_DATAS","getOverviewChartData","startTime","glideDayDatas","useFetchGlobalChartData","overviewChartData","setOverviewChartData","GLOBAL_TRANSACTIONS","fetchTopTransactions","mints","burns","swaps","fetchTopPools","timestamp24hAgo","blacklist","pairDayDatas","p","useTopPoolAddresses","topPoolAddresses","setTopPoolAddresses","addresses","POOL_AT_BLOCK","pools","blockString","addressesString","join","fetchPoolData","block24h","block48h","block7d","block14d","poolAddresses","parsePoolData","pairs","poolData","reserve0","reserve1","token0Price","token1Price","usePoolDatas","t24h","t48h","t7d","t14d","formattedPoolData","now","formattedPoolData24h","oneDayAgo","formattedPoolData48h","twoDaysAgo","formattedPoolData7d","oneWeekAgo","formattedPoolData14d","twoWeeksAgo","formatted","current","oneDay","twoDays","week","twoWeeks","volumeUSDChangeWeek","liquidityToken0","liquidityToken1","name","allBlocksAvailable","ELA_PRICES","fetchElaPrices","blockWeek","elaPrices","elaPrice","twoDay","oneWeek","TOKEN_AT_BLOCK","tokens","fetchTokenData","tokenAddresses","parseTokenData","tokenData","derivedELA","derivedUSD","tradeVolumeUSD","totalLiquidity","useFetchedTokenDatas","prices","setPrices","tWeek","useElaPrices","parsed","parsed24","parsed48","parsed7d","parsed14d","liquidityUSDOneDayAgo","liquidityToken","priceUSD","priceUSDOneDay","priceUSDWeek","priceUSDChange","priceUSDChangeWeek","exists","fetchTopTokens","tokenDayDatas","t","useTopTokenAddresses","topTokenAddresses","setTopTokenAddresses","getPoolChartData","fetchPoolChartData","POOL_TRANSACTIONS","fetchPoolTransactions","getTokenChartData","fetchTokenChartData","TOKEN_TRANSACTIONS","fetchTokenTransactions","mints0","mintsAs0","mints1","mintsAs1","burns0","burnsAs0","burns1","burnsAs1","swaps0","swapsAs0","swaps1","swapsAs1","getPriceSubqueries","tokenAddress","priceQueryConstructor","fetchTokenPriceData","interval","startTimestamp","time","tokenPrices","forEach","priceKey","tokenPriceIndex","findIndex","tokenPrice","formattedHistory","i","open","close","high","low","POOLS_FOR_TOKEN","fetchPoolsForToken","asToken0","asToken1","useProtocolData","useSelector","state","info","protocol","overview","dispatch","useDispatch","useCallback","updateProtocolData","useProtocolChartData","chartData","updateProtocolChartData","useProtocolTransactions","transactions","transactionsData","updateProtocolTransactions","useAllPoolData","byAddress","useAddPoolKeys","addPoolKeys","allPoolData","addNewPoolKeys","untrackedAddresses","filter","pool","useAllTokenData","useAddTokenKeys","addTokenKeys","useTokenDatas","allTokenData","addNewTokenKeys","useMemo","token","ProtocolUpdater","setProtocolData","fetchedProtocolData","updateChartData","fetchedChartData","chartError","updateTransactions","PoolUpdater","updatePoolData","useUpdatePoolData","unfetchedPoolAddresses","poolDataError","poolDatas","TokenUpdater","updateTokenDatas","updateTokenData","useUpdateTokenData","unfetchedTokenAddresses","tokenDataError","tokenDatas","TOKEN_SEARCH","POOL_SEARCH","getIds","entityArrays","ids","entities","currentTokenArray","entity","Array","Set","useFetchSearchResults","searchString","loading","searchResults","setSearchResults","searchStringTooShort","toUpperCase","charAt","toLowerCase","tokenIds","asAddress","asSymbol","asName","as0","as1","search","tokenDatasFull","poolDatasFull","tokensLoading","poolsLoading","BAD_SRCS","LogoLoader","src","alt","rest","refresh","srcFailedLoading","onError","StyledLogo","styled","size","theme","colors","background","text","CurrencyLogo","checksummedAddress","isAddress","BASE_URL","DoubleCurrencyWrapper","div","DoubleCurrencyLogo","address0","address1","formatAmount","amount","options","notation","displayThreshold","tokenPrecision","isInteger","match","precision","format","repeat","amountWithPrecision","numeral","HoverIcon","SaveIcon","fill","useTheme","stroke","warning","color","textDisabled","Container","StyledInput","Input","inputSecondary","Menu","hide","secondary","mediaQueries","sm","md","Blackout","ResponsiveGrid","Break","cardBorder","HoverText","HoverRowLink","OptionButton","enabled","primary","card","tokenIncludesSearchTerm","value","Search","history","useHistory","useMatchBreakpoints","isXs","isSm","useTranslation","inputRef","useRef","menuRef","showMoreRef","showMenu","setShowMenu","setValue","debouncedSearchTerm","useDebounce","tokensShown","setTokensShown","poolsShown","setPoolsShown","handleOutsideClick","e","menuClick","contains","target","inputCLick","showMoreClick","document","addEventListener","querySelector","style","overflow","removeEventListener","useWatchlistTokens","savedTokens","addSavedToken","useWatchlistPools","savedPools","addSavedPool","handleItemClick","watchListTokenData","watchListTokenLoading","watchListPoolData","watchListPoolLoading","showWatchlist","setShowWatchlist","tokensForList","t0","t1","poolForList","poolIncludesSearchTerm","p0","p1","onChange","placeholder","ref","onFocus","mb","onClick","bold","textAlign","fontSize","ml","marginLeft","stopPropagation","isLoading","noTokensFound","noWatchlistTokens","showMessage","noTokensMessage","contentUnderTokenList","whiteSpace","noPoolsFound","noWatchlistPools","noPoolsMessage","contentUnderPoolList","NavWrapper","Flex","gradients","cardHeader","InfoNav","activeIndex","useRouteMatch","scale","variant","as","Link","width","LineChartLoaderSVG","props","height","preserveAspectRatio","viewBox","d","strokeWidth","strokeDasharray","strokeDashoffset","opacity","attributeName","dur","begin","className","stdDeviation","in","BarChartLoaderSVG","keyTimes","repeatCount","x","CandleChartLoaderSVG","LoadingText","Box","LoadingIndicator","BarChartLoader","LineChartLoader","CandleChartLoader","HoverUpdater","payload","setHoverValue","setHoverDate","LineChart","ResponsiveContainer","AreaChart","margin","top","right","left","bottom","onMouseLeave","x1","y1","x2","y2","offset","stopColor","stopOpacity","XAxis","dataKey","axisLine","tickLine","tickFormatter","minTickGap","YAxis","tickCount","val","orientation","tick","dx","textSubtle","Tooltip","cursor","contentStyle","display","formatter","tooltipValue","Area","Percent","Number","isNaN","isNegative","Math","abs","ClickableColumnHeader","Text","TableWrapper","radii","PageButtons","Arrow","LinkWrapper","ResponsiveLogo","TableLoader","loadingRow","DataRow","index","alignItems","fontWeight","SORT_FIELD","TokenTable","maxItems","sortField","setSortField","setSortDirection","page","setPage","maxPage","setMaxPage","extraPages","floor","sortedTokens","handleSort","newField","arrow","field","textTransform","Fragment","LoadingRow","PoolTable","sortedPools","CustomBar","y","rx","Chart","BarChart","backgroundDisabled","Bar","shape","truncateHash","startLength","endLength","substring","Wrapper","RadioGroup","transaction","abs0","abs1","outputTokenSymbol","inputTokenSymbol","href","getBscScanLink","formatDistanceToNowStrict","TransactionTable","txFilter","setTxFilter","sortedTransactions","filteredTransactions","tx","handleFilter","newFilter","flexDirection","checked","justifyContent","ChartCardsContainer","Overview","liquidityHover","setLiquidityHover","liquidityDateHover","setLiquidityDateHover","volumeHover","setVolumeHover","volumeDateHover","setVolumeDateHover","currentDate","formattedLiquidityData","day","fromUnixTime","formattedVolumeData","allTokens","formattedTokens","somePoolsAreLoading","some","Page","mt","PoolsOverview","watchlistPools","px","py","USDC_MAINNET","USDC","ChainId","MAINNET","ChartView","useCakeUsdcPrice","currentChaindId","useActiveWeb3React","chainId","currency","wrapped","wrappedCurrency","tokenPairs","currencyEquals","WETH","equals","usePairs","ethPairState","ethPair","usdcPairState","usdcPair","usdcEthPairState","usdcEthPair","price","priceOf","Price","denominator","numerator","ethPairETHAmount","reserveOf","ethPairETHUSDCValue","quote","raw","JSBI","BigInt","PairState","EXISTS","greaterThan","ethUsdcPrice","currencyEthPrice","usdcPrice","multiply","invert","useUSDCPrice","GLIDE","StyledPage","lg","PageMeta","pathname","useLocation","cakePriceUsd","cakePriceUsdDisplay","pageMeta","getCustomMeta","DEFAULT_META","title","description","image","pageTitle","property","content","Page1","children","CandleChart","setLabel","chartRef","chartCreated","setChart","handleResize","parentElement","resize","clientWidth","timeScale","fitContent","scrollToPosition","isClient","window","chart","createChart","layout","backgroundColor","textColor","fontFamily","rightPriceScale","scaleMargins","borderVisible","secondsVisible","tickMarkFormatter","unixTime","watermark","visible","grid","horzLines","vertLines","crosshair","horzLine","labelVisible","mode","vertLine","labelBackgroundColor","series","addCandlestickSeries","upColor","success","downColor","failure","borderDownColor","borderUpColor","wickDownColor","wickUpColor","setData","subscribeCrosshairMove","param","point","utc","getTime","getTimezoneOffset","seriesPrices","get","Inner","input","TabToggle","button","isActive","TabToggleGroup","ChartCard","tokenPriceData","PRICE","view","setView","hoverValue","hoverDate","formattedTvlData","VOLUME","LIQUIDITY","pt","valueToDisplay","getLatestValueDisplay","small","ContentLayout","TokenButton","LockedTokensContainer","PoolPage","routeAddress","params","showWeeklyData","setShowWeeklyData","useTooltip","tooltip","tooltipVisible","targetRef","scrollTo","updatePoolChartData","poolAddress","usePoolChartData","updatePoolTransactions","usePoolTransactions","addPoolToWatchlist","mr","flex","onItemClick","totalFees","CardWrapper","TopMoverCard","ScrollableRow","DataCard","lineHeight","TopTokenMovers","topPriceIncrease","min","increaseRef","moveLeftRef","scrollInterval","setInterval","scrollLeft","scrollWidth","clearInterval","entry","my","TokensOverview","watchListTokens","useCMCLink","cmcPageUrl","setCMCPageUrl","status","json","then","url","fetchLink","StyledCMCLink","UIKitLink","DEFAULT_TIME_WINDOW","weeks","TokenPage","cmcLink","useTokenData","poolsForToken","addTokenPoolAddresses","usePoolsForToken","updateTokenTransactions","useTokenTransactions","updateTokenChartData","useTokenChartData","priceData","timeWindow","oldestTimestampFetched","oldestFetchedTimestamp","startOfHour","sub","fetchingError","updateTokenPriceData","secondsInterval","useTokenPriceData","adjustedPriceData","watchlistTokens","addWatchlistToken","rel","RedirectInvalidToken","Info","path","exact","Pools","Tokens","component","process","REACT_APP_GRAPH_API_PROFILE","REACT_APP_GRAPH_API_PREDICTION","REACT_APP_GRAPH_API_LOTTERY","REACT_APP_SNAPSHOT_VOTING_API","SNAPSHOT_BASE_URL","REACT_APP_SNAPSHOT_BASE_URL","BRIDGE_FAUCET_API"],"mappings":"yIAsBYA,E,iFClBCC,EAAY,MACZC,EAAiB,KAIjBC,EAAe,WACfC,EAAe,MAGfC,EAA4B,GAI5BC,EAAkB,CAAC,MCVnBC,EAAkB,SAACC,EAAmBC,GACjD,OAAID,GAAYC,EACPD,EAAWC,EAEhBD,GAGG,GAQIE,EAAmB,SAACF,EAAmBC,GAClD,OAAID,GAAYC,GACLD,EAAWC,GAAeA,EAAe,IAE7C,GAWIE,EAAqB,SAChCH,EACAI,EACAC,GAEA,IAAMC,EAAsBP,EAAgBC,EAAUI,GAChDG,EAAuBR,EAAgBK,EAAmBC,GAEhE,MAAO,CAACC,EADiBJ,EAAiBI,EAAqBC,KAIpDC,EAAkB,SAACC,EAAmBC,EAAuBC,GACxE,IAKMC,EAAUD,EAAe,EAAKD,EAAgBhB,EDpDzB,QCoD0D,IAAOiB,EAAe,EAC3G,MAAO,CACLE,aAPmBJ,EAAYhB,EAQ/BqB,YAPkBJ,EAAgBjB,EAQlCsB,UAPgBN,EAAYf,EAQ5BsB,SAPeN,EAAgBhB,EAQ/BkB,QAASA,IAAYK,IAAWL,EAAU,I,6CCjDjCM,EAAU,uCAAG,WACxBC,EACAC,EACAC,GAHwB,uCAAAC,EAAA,sDAIxBC,EAJwB,+BAIZ,IAERC,EAAc,GACdC,GAAW,EACXC,EAAO,EARa,mBAUdD,EAVc,wBAWhBE,EAAMP,EAAWQ,OACjBF,EAAOH,EAAYH,EAAWQ,SAChCD,EAAMD,EAAOH,GAETM,EAAkBT,EAAWU,MAAMJ,EAAMC,GAf3B,UAiBCI,kBAAQV,EAAUF,EAAiBU,IAjBpC,QAiBdG,EAjBc,OAkBpBR,EAAW,2BACNA,GACAQ,GAELP,EAAWQ,OAAOC,KAAKF,GAAQJ,OAASL,GAAaG,EAAOH,EAAYH,EAAWQ,OACnFF,GAAQH,EAvBY,gDAyBfC,GAzBe,yCA2BtBW,QAAQC,MAAM,4BAAd,MA3BsB,kBA4Bf,MA5Be,0DAAH,0DAmCVC,EAAqB,WAChC,IAAMC,EAA2C,IAA1BC,YAAY,IAAIC,MAKvC,MAAO,CAJMD,YAAYE,YAAcC,kBAAQJ,EAAgB,KAClDC,YAAYE,YAAcC,kBAAQJ,EAAgB,KACnDC,YAAYE,YAAcE,kBAASL,EAAgB,KAClDC,YAAYE,YAAcE,kBAASL,EAAgB,OC7C5DM,EAAqB,SAACC,GAAD,OACzBA,EAAWC,KAAI,SAACC,GACd,MAAM,IAAN,OAAWA,EAAX,8FAA0GA,EAA1G,2BACEA,EAAY,IADd,kCAOEC,EAAyB,SAAC5B,GAC9B,OAAO6B,cAAP,qDACI7B,IAQO8B,EAAuB,uCAAG,WACrCL,GADqC,yCAAAvB,EAAA,yDAErC6B,EAFqC,+BAEL,OAChC5B,EAHqC,+BAGzB,IAEe,KAAb,OAAVsB,QAAU,IAAVA,OAAA,EAAAA,EAAYjB,QALqB,yCAM5B,IAN4B,uBASNV,EAC7B8B,EACAJ,EAAmBC,GACnBO,IACA7B,GAbmC,OAoBrC,GAXMC,EAT+B,OAgB/B6B,EACc,SAAlBF,EAA2B,SAAC7B,EAAUgC,GAAX,OAAwBA,EAAEC,OAASjC,EAAEiC,QAAS,SAACjC,EAAUgC,GAAX,OAAwBhC,EAAEiC,OAASD,EAAEC,QAE1GC,EAAkB,GACpBhC,EAAa,CAEf,UAAkBS,OAAOC,KAAKV,GAA9B,eAAWiC,EAAiC,KACtCjC,EAAYiC,GAAK7B,OAAS,GAC5B4B,EAAOE,KAAK,CACVX,UAAWU,EAAIE,MAAM,KAAK,GAC1BJ,OAAQK,SAASpC,EAAYiC,GAAK,GAAGF,OAAQ,MAKnDC,EAAOK,KAAKR,GA/BuB,yBAiC9BG,GAjC8B,4CAAH,sDA0CvBM,EAA0B,SACrCjB,GAMI,IALJM,EAKG,uDAL6B,OAChC5B,EAIG,uDAJS,IAKZ,EAA4BwC,qBAA5B,mBAAOP,EAAP,KAAeQ,EAAf,KACA,EAA0BD,oBAAS,GAAnC,mBAAO3B,EAAP,KAAc6B,EAAd,KAEMC,EAAmBC,KAAKC,UAAUvB,GAClCwB,EAAeb,EAASW,KAAKC,UAAUZ,QAAUc,EAkBvD,OAhBAC,qBAAU,WACR,IAAMC,EAAS,uCAAG,8BAAAlD,EAAA,6DACVmD,EAAkBN,KAAKO,MAAMR,GADnB,SAEKhB,EAAwBuB,EAAiBtB,EAAe5B,GAF7D,OAGM,KADhBS,EAFU,QAGLJ,OACTqC,GAAS,GAETD,EAAUhC,GANI,2CAAH,sDASKqC,EAAeF,KAAKO,MAAML,QAAgBC,IACzClC,GACnBoC,MAED,CAACH,EAAcjC,EAAOb,EAAW4B,EAAee,IAE5C,CACLV,SACApB,UC9EEuC,EAAe,uCAAG,WAAOC,GAAP,iBAAAtD,EAAA,sEAEduD,EAAQ5B,cAFM,iMAId2B,EAAK,2BAAuBA,EAAvB,SAJS,SAWD7C,kBAA0B+C,IAAaD,GAXtC,cAWdE,EAXc,yBAYb,CAAEA,OAAM3C,OAAO,IAZF,uCAcpBD,QAAQC,MAAM,gCAAd,MAdoB,kBAeb,CAAE2C,KAAM,KAAM3C,OAAO,IAfR,yDAAH,sDAmBf4C,EAA6B,SAACC,GAClC,OAAIA,EACK,CACLC,kBAAmBC,WAAWF,EAAgBC,mBAC9CE,eAAgBD,WAAWF,EAAgBG,gBAC3CC,kBAAmBF,WAAWF,EAAgBI,oBAG3C,MAkEMC,EA1Dc,WAC3B,MAAoCvB,mBAA6B,CAC/D3B,OAAO,IADT,mBAAOmD,EAAP,KAAmBC,EAAnB,KAGA,EAAmBnD,IAAnB,mBAAOoD,EAAP,KAAYC,EAAZ,KACA,EAAsC5B,EAAwB,CAAC2B,EAAKC,IAA5DlC,EAAR,EAAQA,OAAemC,EAAvB,EAAgBvD,MAChB,SAA2BoB,QAA3B,IAA2BA,IAAU,GAArC,mBAAOoC,EAAP,KAAgBC,EAAhB,KAiDA,OA/CAtB,qBAAU,WACR,IAAMuB,EAAK,uCAAG,oFAAAxE,EAAA,sEACkBqD,IADlB,uBACJvC,EADI,EACJA,MAAO2C,EADH,EACGA,KADH,SAEmCJ,EAAe,iBAACiB,QAAD,IAACA,OAAD,EAACA,EAASrC,cAAV,aAAoBe,GAFtE,uBAEGyB,EAFH,EAEJ3D,MAAsB4D,EAFlB,EAEYjB,KAFZ,UAGmCJ,EAAe,iBAACkB,QAAD,IAACA,OAAD,EAACA,EAAStC,cAAV,aAAoBe,GAHtE,iBAGG2B,EAHH,EAGJ7D,MAAsB8D,EAHlB,EAGYnB,KAClBoB,EAAW/D,GAAS2D,GAAWE,EAC/BG,EAAepB,EAA0B,OAACD,QAAD,IAACA,GAAD,UAACA,EAAMsB,sBAAP,aAAC,EAAuB,IACjEC,EAAiBtB,EAA0B,OAACgB,QAAD,IAACA,GAAD,UAACA,EAAQK,sBAAT,aAAC,EAAyB,IACrEE,EAAiBvB,EAA0B,OAACkB,QAAD,IAACA,GAAD,UAACA,EAAQG,sBAAT,aAAC,EAAyB,IACrEG,EAAmBJ,GAAgBE,GAAkBC,EACvDJ,IAAaK,EACfhB,EAAc,CACZpD,OAAO,KAEH,EAC+BjC,EACnCiG,EAAahB,eACbkB,EAAelB,eACfmB,EAAenB,gBAJZ,mBACE3E,EADF,KACagG,EADb,KAMCC,EAAqBxG,EAAiBkG,EAAaf,kBAAmBiB,EAAejB,mBANtF,EAQ4BlF,EAC/BiG,EAAalB,kBACboB,EAAepB,kBACfqB,EAAerB,mBAXZ,mBAQEyB,EARF,KAQWC,EARX,KAaCC,EAA6B,CACjCpG,YACAgG,gBAA4C,kBAApBA,EAA+BA,EAAkB,EACzE9F,aAAcyF,EAAaf,kBAC3BqB,qBACAC,UACAC,iBAEFpB,EAAc,CACZpD,OAAO,EACP2C,KAAM8B,KApCE,4CAAH,wDAwCuB,OAAPjB,QAAO,IAAPA,OAAA,EAAAA,EAASrC,UAAT,OAAmBsC,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAStC,UAC5BoC,GAAeJ,EAAWR,MACnDe,MAED,CAACF,EAASC,EAASF,EAAYJ,IAE3BA,G,kBLzFG/F,O,eAAAA,I,eAAAA,I,gBAAAA,M,KMhBL,I,uHAAMsH,GAAW,SAACC,GACvB,MAAO,CACLC,KAAMxH,EAAgByH,KACtBC,KAAMH,EAAKI,GAAGxD,MAAM,KAAK,GACzBZ,UAAWgE,EAAKhE,UAChBqE,OAAQL,EAAKM,GACbC,aAAcP,EAAKQ,KAAKC,OAAOC,OAC/BC,aAAcX,EAAKQ,KAAKI,OAAOF,OAC/BG,cAAeb,EAAKQ,KAAKC,OAAOL,GAChCU,cAAed,EAAKQ,KAAKI,OAAOR,GAChCW,UAAW3C,WAAW4B,EAAKe,WAC3BC,aAAc5C,WAAW4B,EAAKiB,SAC9BC,aAAc9C,WAAW4B,EAAKmB,WAIrBC,GAAW,SAACC,GACvB,MAAO,CACLpB,KAAMxH,EAAgB6I,KACtBnB,KAAMkB,EAAKjB,GAAGxD,MAAM,KAAK,GACzBZ,UAAWqF,EAAKrF,UAChBqE,OAAQgB,EAAKhB,OACbE,aAAcc,EAAKb,KAAKC,OAAOC,OAC/BC,aAAcU,EAAKb,KAAKI,OAAOF,OAC/BG,cAAeQ,EAAKb,KAAKC,OAAOL,GAChCU,cAAeO,EAAKb,KAAKI,OAAOR,GAChCW,UAAW3C,WAAWiD,EAAKN,WAC3BC,aAAc5C,WAAWiD,EAAKJ,SAC9BC,aAAc9C,WAAWiD,EAAKF,WAIrBI,GAAW,SAACC,GACvB,MAAO,CACLvB,KAAMxH,EAAgBgJ,KACtBtB,KAAMqB,EAAKpB,GAAGxD,MAAM,KAAK,GACzBZ,UAAWwF,EAAKxF,UAChBqE,OAAQmB,EAAKE,KACbnB,aAAciB,EAAKhB,KAAKC,OAAOC,OAC/BC,aAAca,EAAKhB,KAAKI,OAAOF,OAC/BG,cAAeW,EAAKhB,KAAKC,OAAOL,GAChCU,cAAeU,EAAKhB,KAAKI,OAAOR,GAChCW,UAAW3C,WAAWoD,EAAKT,WAC3BC,aAAc5C,WAAWoD,EAAKG,WAAavD,WAAWoD,EAAKI,YAC3DV,aAAc9C,WAAWoD,EAAKK,WAAazD,WAAWoD,EAAKM,cAIlDC,GAAa,SAACC,GAAD,MAA4D,CACpFC,KAAMD,EAAaC,KACnBvI,UAAW0E,WAAW4D,EAAaE,gBACnCtI,aAAcwE,WAAW4D,EAAa1D,qBAG3B6D,GAAiB,SAACC,GAAD,MAA2C,CACvEH,KAAMG,EAAYH,KAClBvI,UAAW0E,WAAWgE,EAAYF,gBAClCtI,aAAcwE,WAAWgE,EAAYC,cAQ1BC,GAAc,uCAAG,WAC5BC,EACAC,GAF4B,6CAAAjI,EAAA,sDAIxBkI,EAA6B,GAC7BpH,GAAQ,EACRV,EAAO,EACPD,GAAW,EAPa,UASpBA,EAToB,iCAWgB6H,EAAkB5H,EAAM6H,GAXxC,gBAWlBxE,EAXkB,EAWlBA,KAAa0E,EAXK,EAWZrH,MACdV,GAAQ,IACRD,EAAWsD,EAAKnD,OAAS,IACzBQ,EAAQqH,EACJ1E,IACFyE,EAAeA,EAAaE,OAAO3E,IAhBX,2BAoBxB3C,GAAiC,IAAxBoH,EAAa5H,OApBE,0CAqBnB,CACLQ,OAAO,IAtBiB,QA0C5B,IAhBMuH,EAAoBH,EAAaI,QAAO,SAACC,EAAuCC,GAEpF,IAAMC,EAAanG,UAAUkG,EAAQd,KAAOpJ,GAAcoK,QAAQ,IAClE,OAAO,2BACJD,EAAaD,GACXD,KAEJ,IAEGI,EAAgBhI,OAAOC,KAAKyH,GAAmB7G,KAAI,SAACiH,GAAD,OAAgBnG,SAASmG,EAAY,OAExFG,EAAwBP,EAAkBM,EAAc,IAE1DlH,EAvCwB,iBAuCZmH,QAvCY,IAuCZA,OAvCY,EAuCZA,EAAuBlB,YAvCX,QAuCmBrJ,EAC3CwK,EAxCwB,iBAwCHD,QAxCG,IAwCHA,OAxCG,EAwCHA,EAAuBvJ,oBAxCpB,QAwCoC,EAC1DyJ,EAAe7H,YAAY,IAAIC,MAC9BO,EAAYqH,EAAexK,GAChCmD,GAAanD,EACPmK,EAAanG,UAAUb,EAAYnD,GAAcoK,QAAQ,GAAI,IAC9D/H,OAAOC,KAAKyH,GAAmBU,SAASN,EAAWO,YAOtDH,EAAqBR,EAAkBI,GAAYpJ,aANnDgJ,EAAkBI,GAAc,CAC9Bf,KAAMjG,EACNtC,UAAW,EACXE,aAAcwJ,GAjDQ,yBAwDrB,CACLpF,KAAM9C,OAAOsI,OAAOZ,GACpBvH,OAAO,IA1DmB,4CAAH,wDC3DrBoI,GAAkBvH,cAAH,+QAUfwH,GAAoB,uCAAG,WAAO/I,GAAP,mBAAAJ,EAAA,+EAEOS,kBAA+B+C,IAAa0F,GAAiB,CAC3FE,UAAW/K,EACX+B,SAJuB,uBAEjBiJ,EAFiB,EAEjBA,cAIF5F,EAAO4F,EAAc7H,IAAIgG,IANN,kBAOlB,CAAE/D,OAAM3C,OAAO,IAPG,uCASzBD,QAAQC,MAAM,sCAAd,MATyB,kBAUlB,CAAEA,OAAO,IAVS,yDAAH,sDA4CXwI,GA3BiB,WAI9B,MAAkD7G,qBAAlD,mBAAO8G,EAAP,KAA0BC,EAA1B,KACA,EAA0B/G,oBAAS,GAAnC,mBAAO3B,EAAP,KAAc6B,EAAd,KAgBA,OAdAM,qBAAU,WASHsG,GAAsBzI,GARhB,uCAAG,8BAAAd,EAAA,sEACW+H,GAAeoB,IAD1B,iBACJ1F,EADI,EACJA,MAEN+F,EAAqB/F,GAErBd,GAAS,GALC,2CAAH,oDAST6B,KAED,CAAC+E,EAAmBzI,IAEhB,CACLA,QACA2C,KAAM8F,I,SCrDJE,GAAsB9H,cAAH,8gCAkEnB+H,GAAoB,uCAAG,kCAAA1J,EAAA,+EAENS,kBAA4B+C,IAAaiG,IAFnC,UAEnBhG,EAFmB,qDAKhBT,GALgB,cAQnB2G,EAAQlG,EAAKkG,MAAMnI,IAAIgE,IACvBoE,EAAQnG,EAAKmG,MAAMpI,IAAIqF,IACvBgD,EAAQpG,EAAKoG,MAAMrI,IAAIwF,IAVJ,kBAYlB,uBAAI2C,GAAJ,aAAcC,GAAd,aAAwBC,IAAOtH,MAAK,SAACvC,EAAGgC,GAC7C,OAAOM,SAASN,EAAEP,UAAW,IAAMa,SAAStC,EAAEyB,UAAW,QAblC,gEAgBlBuB,GAhBkB,0DAAH,qDAoBX0G,MChFTI,GAAa,uCAAG,WAAOC,GAAP,iBAAA/J,EAAA,sEAEZuD,EAAQ5B,cAFI,oYAcClB,kBAA0B+C,IAAaD,EAAO,CAAEyG,UAAWxL,EAAiBuL,oBAd7E,cAcZtG,EAdY,yBAgBXA,EAAKwG,aAAazI,KAAI,SAAC0I,GAAD,OAAOA,EAAErE,GAAGxD,MAAM,KAAK,OAhBlC,uCAkBlBxB,QAAQC,MAAM,4BAAd,MAlBkB,kBAmBX,IAnBW,yDAAH,sDA2CJqJ,GAjBa,WAC1B,MAAgD1H,mBAAS,IAAzD,mBAAO2H,EAAP,KAAyBC,EAAzB,KACA,EAA0BtJ,IAAnBgJ,EAAP,oBAYA,OAVA9G,qBAAU,WACR,IAAMuB,EAAK,uCAAG,4BAAAxE,EAAA,sEACY8J,GAAcC,GAD1B,OACNO,EADM,OAEZD,EAAoBC,GAFR,2CAAH,qDAIqB,IAA5BF,EAAiB9J,QACnBkE,MAED,CAAC4F,EAAkBL,IAEfK,GCHHG,GAAgB,SAACjH,EAAsBkH,GAC3C,IAAMC,EAAcnH,EAAK,0BAAsBA,EAAtB,QACnBoH,EAAe,YAAQF,EAAMG,KAAK,OAAnB,MACrB,MAAM,+BAAN,OACoBD,EADpB,mBAEID,EAFJ,kSA0BIG,GAAa,uCAAG,WACpBC,EACAC,EACAC,EACAC,EACAC,GALoB,iBAAAjL,EAAA,sEAQZuD,EAAQ5B,cARI,mLAUP4I,GAAc,KAAMU,GACdV,GAAcM,EAAUI,GACvBV,GAAcO,EAAUG,GACxBV,GAAcQ,EAASE,GACtBV,GAAcS,EAAUC,IAdzB,SAiBCxK,kBAA4B+C,IAAaD,GAjB1C,cAiBZE,EAjBY,yBAkBX,CAAEA,OAAM3C,OAAO,IAlBJ,uCAoBlBD,QAAQC,MAAM,4BAAd,MApBkB,kBAqBX,CAAEA,OAAO,IArBE,yDAAH,8DA0BboK,GAAgB,SAACC,GACrB,OAAKA,EAGEA,EAAM7C,QAAO,SAACC,EAAmD6C,GACtE,IAAQjM,EAAwEiM,EAAxEjM,UAAW2I,EAA6DsD,EAA7DtD,WAAYuD,EAAiDD,EAAjDC,SAAUC,EAAuCF,EAAvCE,SAAUC,EAA6BH,EAA7BG,YAAaC,EAAgBJ,EAAhBI,YAUhE,OATAjD,EAAM6C,EAASvF,IAAf,2BACKuF,GADL,IAEEjM,UAAW0E,WAAW1E,GACtB2I,WAAYjE,WAAWiE,GACvBuD,SAAUxH,WAAWwH,GACrBC,SAAUzH,WAAWyH,GACrBC,YAAa1H,WAAW0H,GACxBC,YAAa3H,WAAW2H,KAEnBjD,IACN,IAdM,IAkIIkD,GAvGM,SAACR,GACpB,MAAoCxI,mBAAoB,CAAE3B,OAAO,IAAjE,mBAAOmD,EAAP,KAAmBC,EAAnB,KACA,EAAgCnD,IAAhC,mBAAO2K,EAAP,KAAaC,EAAb,KAAmBC,EAAnB,KAAwBC,EAAxB,KACA,EAAsCrJ,EAAwB,CAACkJ,EAAMC,EAAMC,EAAKC,IAAxE3J,EAAR,EAAQA,OAAemC,EAAvB,EAAgBvD,MAChB,SAAgDoB,QAAhD,IAAgDA,IAAU,GAA1D,mBAAO2I,EAAP,KAAiBC,EAAjB,KAA2BC,EAA3B,KAAoCC,EAApC,KAgGA,OA9FA/H,qBAAU,WACR,IAAMuB,EAAK,uCAAG,4CAAAxE,EAAA,sEACkB4K,GAC5BC,EAAS5I,OACT6I,EAAS7I,OACT8I,EAAQ9I,OACR+I,EAAS/I,OACTgJ,GANU,gBACJnK,EADI,EACJA,MAAO2C,EADH,EACGA,KAOX3C,EACFoD,EAAc,CAAEpD,OAAO,KAEjBgL,EAAoBZ,GAAa,OAACzH,QAAD,IAACA,OAAD,EAACA,EAAMsI,KACxCC,EAAuBd,GAAa,OAACzH,QAAD,IAACA,OAAD,EAACA,EAAMwI,WAC3CC,EAAuBhB,GAAa,OAACzH,QAAD,IAACA,OAAD,EAACA,EAAM0I,YAC3CC,EAAsBlB,GAAa,OAACzH,QAAD,IAACA,OAAD,EAACA,EAAM4I,YAC1CC,EAAuBpB,GAAa,OAACzH,QAAD,IAACA,OAAD,EAACA,EAAM8I,aAG3CC,EAAYvB,EAAc3C,QAAO,SAACC,EAAwCN,GAE9E,IAAMwE,EAA2CX,EAAkB7D,GAC7DyE,EAA0CV,EAAqB/D,GAC/D0E,EAA2CT,EAAqBjE,GAChE2E,EAAwCR,EAAoBnE,GAC5D4E,EAA4CP,EAAqBrE,GAEvE,EAAqCpJ,EAAkB,OACrD4N,QADqD,IACrDA,OADqD,EACrDA,EAAStN,UAD4C,OAErDuN,QAFqD,IAErDA,OAFqD,EAErDA,EAAQvN,UAF6C,OAGrDwN,QAHqD,IAGrDA,OAHqD,EAGrDA,EAASxN,WAHX,mBAAOA,EAAP,KAAkBgG,EAAlB,KAKA,EAA6CtG,EAAkB,OAC7D4N,QAD6D,IAC7DA,OAD6D,EAC7DA,EAAStN,UADoD,OAE7DyN,QAF6D,IAE7DA,OAF6D,EAE7DA,EAAMzN,UAFuD,OAG7D0N,QAH6D,IAG7DA,OAH6D,EAG7DA,EAAU1N,WAHZ,mBAAOC,EAAP,KAAsB0N,EAAtB,KAMMzN,EAAeoN,EAAUA,EAAQ3E,WAAa,EAE9C1C,EAAqBxG,EAAgB,OAAC6N,QAAD,IAACA,OAAD,EAACA,EAAS3E,WAAV,OAAsB4E,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAQ5E,YAEnEiF,EAAkBN,EAAUA,EAAQpB,SAAW,EAC/C2B,EAAkBP,EAAUA,EAAQnB,SAAW,EAErD,EAAoEpM,EAClEC,EACAC,EACAC,GAHME,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,YAAaC,EAAnC,EAAmCA,UAAWC,EAA9C,EAA8CA,SAAUJ,EAAxD,EAAwDA,QAqCxD,OA/BImN,IACFlE,EAAMN,GAAW,CACfA,UACA/B,OAAQ,CACN+B,QAASwE,EAAQvG,OAAOL,GACxBoH,KAAMR,EAAQvG,OAAO+G,KACrB9G,OAAQsG,EAAQvG,OAAOC,QAEzBE,OAAQ,CACN4B,QAASwE,EAAQpG,OAAOR,GACxBoH,KAAMR,EAAQpG,OAAO4G,KACrB9G,OAAQsG,EAAQpG,OAAOF,QAEzBoF,YAAakB,EAAQlB,YACrBC,YAAaiB,EAAQjB,YACrBrM,YACAgG,kBACA/F,gBACA0N,sBACAvN,eACAC,cACAC,YACAC,WACAJ,UACAD,eACA+F,qBACA2H,kBACAC,oBAIGzE,IACN,IACHrE,EAAc,CAAET,KAAM+I,EAAW1L,OAAO,KAnF9B,2CAAH,qDAuFLoM,GAA6B,OAARrC,QAAQ,IAARA,OAAA,EAAAA,EAAU5I,UAAV,OAAoB6I,QAApB,IAAoBA,OAApB,EAAoBA,EAAU7I,UAA9B,OAAwC8I,QAAxC,IAAwCA,OAAxC,EAAwCA,EAAS9I,UAAjD,OAA2D+I,QAA3D,IAA2DA,OAA3D,EAA2DA,EAAU/I,QAC5FgJ,EAAc3K,OAAS,GAAK4M,IAAuB7I,GACrDG,MAED,CAACyG,EAAeJ,EAAUC,EAAUC,EAASC,EAAU3G,IAEnDJ,GC/NHkJ,GAAaxL,cAAH,wZAgCVyL,GAAc,uCAAG,WACrB9I,EACAC,EACA8I,GAHqB,+BAAArN,EAAA,+EAMAS,kBAAwB+C,IAAa2J,GAAY,CAClE7I,UACAC,UACA8I,cATiB,cAMb5J,EANa,yBAWZ,CACL3C,OAAO,EACPwM,UAAW,CACTb,QAAS5I,WAAU,oBAACJ,EAAKgJ,eAAN,aAAC,EAAcc,gBAAf,QAA2B,KAC9Cb,OAAQ7I,WAAU,oBAACJ,EAAKiJ,cAAN,aAAC,EAAaa,gBAAd,QAA0B,KAC5CC,OAAQ3J,WAAU,oBAACJ,EAAK+J,cAAN,aAAC,EAAaD,gBAAd,QAA0B,KAC5CX,KAAM/I,WAAU,oBAACJ,EAAKgK,eAAN,aAAC,EAAcF,gBAAf,QAA2B,QAjB5B,uCAqBnB1M,QAAQC,MAAM,6BAAd,MArBmB,kBAsBZ,CACLA,OAAO,EACPwM,eAAWtK,IAxBM,yDAAH,0DCJd0K,GAAiB,SAACpK,EAA2BqK,GACjD,IAAMjD,EAAe,YAAQiD,EAAOhD,KAAK,OAApB,MACfF,EAAcnH,EAAK,0BAAsBA,EAAtB,QACzB,MAAM,iCAAN,OACqBoH,EADrB,oBAEMD,EAFN,iOAkBImD,GAAc,uCAAG,WACrB/C,EACAC,EACAC,EACAC,EACA6C,GALqB,iBAAA7N,EAAA,sEAQbuD,EAAQ5B,cARK,oLAUR+L,GAAe,KAAMG,GACfH,GAAe7C,EAAUgD,GACxBH,GAAe5C,EAAU+C,GACzBH,GAAe3C,EAAS8C,GACvBH,GAAe1C,EAAU6C,IAdzB,SAiBApN,kBAA4B+C,IAAaD,GAjBzC,cAiBbE,EAjBa,yBAkBZ,CAAEA,OAAM3C,OAAO,IAlBH,uCAoBnBD,QAAQC,MAAM,6BAAd,MApBmB,kBAqBZ,CAAEA,OAAO,IArBG,yDAAH,8DA0BdgN,GAAiB,SAACH,GACtB,OAAKA,EAGEA,EAAOrF,QAAO,SAACC,EAAoDwF,GACxE,IAAQC,EAA8ED,EAA9EC,WAAYC,EAAkEF,EAAlEE,WAAYC,EAAsDH,EAAtDG,eAAgBtK,EAAsCmK,EAAtCnK,kBAAmBuK,EAAmBJ,EAAnBI,eASnE,OARA5F,EAAMwF,EAAUlI,IAAhB,2BACKkI,GADL,IAEEC,WAAYnK,WAAWmK,GACvBC,WAAYpK,WAAWoK,GACvBC,eAAgBrK,WAAWqK,GAC3BtK,kBAAmBC,WAAWD,GAC9BuK,eAAgBtK,WAAWsK,KAEtB5F,IACN,IAbM,IAgHI6F,GAtFc,SAACP,GAC5B,MAAoCpL,mBAAqB,CAAE3B,OAAO,IAAlE,mBAAOmD,EAAP,KAAmBC,EAAnB,KACA,EAAgCnD,IAAhC,mBAAO2K,EAAP,KAAaC,EAAb,KAAmBC,EAAnB,KAAwBC,EAAxB,KACA,EAAsCrJ,EAAwB,CAACkJ,EAAMC,EAAMC,EAAKC,IAAxE3J,EAAR,EAAQA,OAAemC,EAAvB,EAAgBvD,MAChB,SAAgDoB,QAAhD,IAAgDA,IAAU,GAA1D,mBAAO2I,EAAP,KAAiBC,EAAjB,KAA2BC,EAA3B,KAAoCC,EAApC,KACMsC,ED5CoB,WAC1B,MAA4B7K,qBAA5B,mBAAO4L,EAAP,KAAeC,EAAf,KACA,EAA0B7L,oBAAS,GAAnC,mBAAO3B,EAAP,KAAc6B,EAAd,KAEA,EAA0B5B,IAA1B,mBAAOoD,EAAP,KAAYC,EAAZ,KAAiBmK,EAAjB,KACA,EAAsC/L,EAAwB,CAAC2B,EAAKC,EAAKmK,IAAjErM,EAAR,EAAQA,OAAemC,EAAvB,EAAgBvD,MAiBhB,OAfAmC,qBAAU,WAUHoL,GAAWvN,IAASoB,GAAWmC,GATzB,uCAAG,sCAAArE,EAAA,2EAC0BkC,EAD1B,GACLoC,EADK,KACIC,EADJ,KACa8I,EADb,cAEmCD,GAAe9I,EAAQrC,OAAQsC,EAAQtC,OAAQoL,EAAUpL,QAF5F,gBAEJqL,EAFI,EAEJA,UAFI,EAEOxM,MAEjB6B,GAAS,GAET2L,EAAUhB,GANA,2CAAH,oDAUT9I,KAED,CAAC1D,EAAOuN,EAAQnM,EAAQmC,IAEpBgK,ECsBWG,GA8ElB,OA5EAvL,qBAAU,WACR,IAAMuB,EAAK,uCAAG,4CAAAxE,EAAA,sEACkB4N,GAC5B/C,EAAS5I,OACT6I,EAAS7I,OACT8I,EAAQ9I,OACR+I,EAAS/I,OACT4L,GANU,gBACJ/M,EADI,EACJA,MAAO2C,EADH,EACGA,KAOX3C,EACFoD,EAAc,CAAEpD,OAAO,KAEjB2N,EAASX,GAAc,OAACrK,QAAD,IAACA,OAAD,EAACA,EAAMsI,KAC9B2C,EAAWZ,GAAc,OAACrK,QAAD,IAACA,OAAD,EAACA,EAAMwI,WAChC0C,EAAWb,GAAc,OAACrK,QAAD,IAACA,OAAD,EAACA,EAAM0I,YAChCyC,EAAWd,GAAc,OAACrK,QAAD,IAACA,OAAD,EAACA,EAAM4I,YAChCwC,EAAYf,GAAc,OAACrK,QAAD,IAACA,OAAD,EAACA,EAAM8I,aAGjCC,EAAYqB,EAAevF,QAAO,SAACC,EAAyCN,GAChF,IAAMwE,EAA4CgC,EAAOxG,GACnDyE,EAA2CgC,EAASzG,GACpD0E,EAA4CgC,EAAS1G,GACrD2E,EAAyCgC,EAAS3G,GAClD4E,EAA6CgC,EAAU5G,GAE7D,EAAqCpJ,EAAkB,OACrD4N,QADqD,IACrDA,OADqD,EACrDA,EAASyB,eAD4C,OAErDxB,QAFqD,IAErDA,OAFqD,EAErDA,EAAQwB,eAF6C,OAGrDvB,QAHqD,IAGrDA,OAHqD,EAGrDA,EAASuB,gBAHX,mBAAO/O,EAAP,KAAkBgG,EAAlB,KAKA,EAAwBtG,EAAkB,OACxC4N,QADwC,IACxCA,OADwC,EACxCA,EAASyB,eAD+B,OAExCtB,QAFwC,IAExCA,OAFwC,EAExCA,EAAMsB,eAFkC,OAGxCrB,QAHwC,IAGxCA,OAHwC,EAGxCA,EAAUqB,gBAHL9O,EAAP,oBAKMC,EAAeoN,EAAUA,EAAQ0B,eAAiB1B,EAAQwB,WAAa,EACvEa,EAAwBpC,EAASA,EAAOyB,eAAiBzB,EAAOuB,WAAa,EAC7E7I,EAAqBxG,EAAiBS,EAAcyP,GACpDC,EAAiBtC,EAAUA,EAAQ0B,eAAiB,EAEpDa,EAAWvC,EAAUA,EAAQuB,WAAaV,EAAUb,QAAU,EAC9DwC,EAAiBvC,EAASA,EAAOsB,WAAaV,EAAUZ,OAAS,EACjEwC,EAAetC,EAAOA,EAAKoB,WAAaV,EAAUV,KAAO,EACzDuC,EAAiBvQ,EAAiBoQ,EAAUC,GAC5CG,EAAqBxQ,EAAiBoQ,EAAUE,GAChD7J,EAAU5G,EAAe,OAACgO,QAAD,IAACA,OAAD,EAACA,EAAS7I,kBAAV,OAA6B8I,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAQ9I,mBAmBpE,OAjBA2E,EAAMN,GAAW,CACfoH,SAAU5C,EACVxE,UACAgF,KAAMR,EAAUA,EAAQQ,KAAO,GAC/B9G,OAAQsG,EAAUA,EAAQtG,OAAS,GACnChH,YACAgG,kBACA/F,gBACAiG,UACAhG,eACA+F,qBACA2J,iBACAC,WACAG,iBACAC,sBAGK7G,IACN,IACHrE,EAAc,CAAET,KAAM+I,EAAW1L,OAAO,KAlE9B,2CAAH,qDAqELoM,GAA6B,OAARrC,QAAQ,IAARA,OAAA,EAAAA,EAAU5I,UAAV,OAAoB6I,QAApB,IAAoBA,OAApB,EAAoBA,EAAU7I,UAA9B,OAAwC8I,QAAxC,IAAwCA,OAAxC,EAAwCA,EAAS9I,UAAjD,OAA2D+I,QAA3D,IAA2DA,OAA3D,EAA2DA,EAAU/I,QAC5F4L,EAAevN,OAAS,GAAK4M,IAAuB7I,GAAciJ,GACpE9I,MAED,CAACqJ,EAAgBhD,EAAUC,EAAUC,EAASC,EAAU3G,EAAYiJ,IAEhErJ,GCtLHqL,GAAc,uCAAG,WAAOvF,GAAP,iBAAA/J,EAAA,sEAEbuD,EAAQ5B,cAFK,uWAcAlB,kBAA2B+C,IAAaD,EAAO,CAAEyG,UAAWxL,EAAiBuL,oBAd7E,cAcbtG,EAda,yBAgBZA,EAAK8L,cAAc/N,KAAI,SAACgO,GAAD,OAAOA,EAAE3J,GAAGxD,MAAM,KAAK,OAhBlC,uCAkBnBxB,QAAQC,MAAM,6BAAd,MAlBmB,kBAmBZ,IAnBY,yDAAH,sDA2CL2O,GAjBc,WAC3B,MAAkDhN,mBAAS,IAA3D,mBAAOiN,EAAP,KAA0BC,EAA1B,KACA,EAA0B5O,IAAnBgJ,EAAP,oBAYA,OAVA9G,qBAAU,WACR,IAAMuB,EAAK,uCAAG,4BAAAxE,EAAA,sEACYsP,GAAevF,GAD3B,OACNO,EADM,OAEZqF,EAAqBrF,GAFT,2CAAH,qDAIsB,IAA7BoF,EAAkBpP,QACpBkE,MAED,CAACkL,EAAmB3F,IAEhB2F,G,wCClDHE,GAAgB,uCAAG,WAAOxP,EAAc6H,GAArB,qBAAAjI,EAAA,sEAEfuD,EAAQ5B,cAFO,qZAiBUlB,kBAA8B+C,IAAaD,EAAO,CAC/E6F,UAAW/K,EACX+B,OACA6H,YApBmB,uBAiBbgC,EAjBa,EAiBbA,aAKFxG,EAAOwG,EAAazI,IAAIoG,IAtBT,kBAuBd,CAAEnE,OAAM3C,OAAO,IAvBD,yCAyBrBD,QAAQC,MAAM,kCAAd,MAzBqB,kBA0Bd,CAAEA,OAAO,IA1BK,0DAAH,wDA8BhB+O,GAAkB,uCAAG,WAAO5H,GAAP,SAAAjI,EAAA,+EAClB+H,GAAe6H,GAAkB3H,IADf,2CAAH,sDAIT4H,MCjCTC,GAAoBnO,cAAH,wlCAmEjBoO,GAAqB,uCAAG,WAAO9H,GAAP,qBAAAjI,EAAA,+EAEPS,kBAA4B+C,IAAasM,GAAmB,CAC7E7H,YAHwB,cAEpBxE,EAFoB,OAKpBkG,EAAQlG,EAAKkG,MAAMnI,IAAIgE,IACvBoE,EAAQnG,EAAKmG,MAAMpI,IAAIqF,IACvBgD,EAAQpG,EAAKoG,MAAMrI,IAAIwF,IAPH,kBAQnB,CAAEvD,KAAK,GAAD,oBAAMkG,GAAN,aAAgBC,GAAhB,aAA0BC,IAAQ/I,OAAO,IAR5B,yCAU1BD,QAAQC,MAAR,gDAAuDmH,GAAvD,MAV0B,kBAWnB,CACLnH,OAAO,IAZiB,0DAAH,sDAiBZiP,MCrFTC,GAAiB,uCAAG,WAAO5P,EAAc6H,GAArB,qBAAAjI,EAAA,sEAEhBuD,EAAQ5B,cAFQ,wZAiBUlB,kBAA+B+C,IAAaD,EAAO,CACjF6F,UAAW/K,EACX+B,OACA6H,YApBoB,uBAiBdsH,EAjBc,EAiBdA,cAKF9L,EAAO8L,EAAc/N,IAAIgG,IAtBT,kBAuBf,CAAE/D,OAAM3C,OAAO,IAvBA,yCAyBtBD,QAAQC,MAAM,mCAAd,MAzBsB,kBA0Bf,CAAEA,OAAO,IA1BM,0DAAH,wDA8BjBmP,GAAmB,uCAAG,WAAOhI,GAAP,SAAAjI,EAAA,+EACnB+H,GAAeiI,GAAmB/H,IADf,2CAAH,sDAIVgI,MChCTC,GAAqBvO,cAAH,0qEA8HlBwO,GAAsB,uCAAG,WAAOlI,GAAP,2BAAAjI,EAAA,+EAERS,kBAA4B+C,IAAa0M,GAAoB,CAC9EjI,YAHyB,cAErBxE,EAFqB,OAKrB2M,EAAS3M,EAAK4M,SAAS7O,IAAIgE,IAC3B8K,EAAS7M,EAAK8M,SAAS/O,IAAIgE,IAE3BgL,EAAS/M,EAAKgN,SAASjP,IAAIqF,IAC3B6J,EAASjN,EAAKkN,SAASnP,IAAIqF,IAE3B+J,EAASnN,EAAKoN,SAASrP,IAAIwF,IAC3B8J,EAASrN,EAAKsN,SAASvP,IAAIwF,IAZN,kBAcpB,CAAEvD,KAAK,GAAD,oBAAM2M,GAAN,aAAiBE,GAAjB,aAA4BE,GAA5B,aAAuCE,GAAvC,aAAkDE,GAAlD,aAA6DE,IAAShQ,OAAO,IAd/D,yCAgB3BD,QAAQC,MAAR,iDAAwDmH,GAAxD,MAhB2B,kBAiBpB,CACLnH,OAAO,IAlBkB,0DAAH,sDAuBbqP,MCvJTa,GAAqB,SAACC,EAAsB/O,GAAvB,OACzBA,EAAOV,KACL,SAAC8B,GAAD,yBACKA,EAAM7B,UADX,sBACkCwP,EADlC,+BACqE3N,EAAMrB,OAD3E,uDAIKqB,EAAM7B,UAJX,6CAIyD6B,EAAMrB,OAJ/D,+CAaEiP,GAAwB,SAACpR,GAC7B,OAAO6B,cAAP,2EAEM7B,IAsGOqR,GAjGU,uCAAG,WAC1BlJ,EACAmJ,EACAC,GAH0B,6BAAArR,EAAA,sDAY1B,IAHM8I,EAAe7H,YAAY,IAAIC,MAC/BK,EAAa,GACf+P,EAAOD,EACJC,GAAQxI,GACbvH,EAAWa,KAAKkP,GAChBA,GAAQF,EAdgB,yBAiBHxP,EAAwBL,EAAY,MAAO,KAjBxC,WAiBlBW,EAjBkB,SAkBS,IAAlBA,EAAO5B,OAlBE,wBAmBtBO,QAAQC,MAAM,uCAAwCS,GAnBhC,kBAoBf,CACLT,OAAO,IArBa,yBAyBclB,EACpCsR,GACAF,GAAmB/I,EAAS/F,GAC5BsB,IACA,KA7BsB,WAyBlB6K,EAzBkB,+BAiCtBxN,QAAQC,MAAM,6BAjCQ,kBAkCf,CACLA,OAAO,IAnCa,QA8ExB,IAtCMyQ,EAIA,GAGN5Q,OAAOC,KAAKyN,GAAQmD,SAAQ,SAACC,GAC3B,IAEe,EAFThQ,EAAYgQ,EAASpP,MAAM,KAAK,GAElCZ,GACF8P,EAAYnP,KAAK,CACfX,YACAuM,YAAY,UAAAK,EAAOoD,UAAP,eAAkBzD,YAAanK,WAAWwK,EAAOoD,GAAUzD,YAAc,EACrFgB,SAAU,OAMhBrO,OAAOC,KAAKyN,GAAQmD,SAAQ,SAACC,GAC3B,IAAMhQ,EAAYgQ,EAASpP,MAAM,KAAK,GAEtC,GAAIZ,EAAW,CACb,IAAMiQ,EAAkBH,EAAYI,WAAU,SAACC,GAAD,OAAgBA,EAAWnQ,YAAcA,KACvF,GAAIiQ,GAAmB,EAAG,CAAC,IAAD,IAChB1D,EAAeuD,EAAYG,GAA3B1D,WACRuD,EAAYG,GAAiB1C,SAAWnL,WAAU,oBAACwK,EAAOoD,UAAR,aAAC,EAAkBlE,gBAAnB,QAA+B,GAAKS,OAM5FuD,EAAYhP,MAAK,SAACvC,EAAGgC,GAAJ,OAAUM,SAAStC,EAAEyB,UAAW,IAAMa,SAASN,EAAEP,UAAW,OAEvEoQ,EAAmB,GAGhBC,EAAI,EAAGA,EAAIP,EAAYjR,OAAS,EAAGwR,IAC1CD,EAAiBzP,KAAK,CACpBkP,KAAMzN,WAAW0N,EAAYO,GAAGrQ,WAChCsQ,KAAMR,EAAYO,GAAG9C,SACrBgD,MAAOT,EAAYO,EAAI,GAAG9C,SAC1BiD,KAAMV,EAAYO,EAAI,GAAG9C,SACzBkD,IAAKX,EAAYO,GAAG9C,WApFA,yBAwFjB,CAAEvL,KAAMoO,EAAkB/Q,OAAO,IAxFhB,yCA0FxBD,QAAQC,MAAR,+CAAsDmH,GAAtD,MA1FwB,kBA2FjB,CACLnH,OAAO,IA5Fe,0DAAH,0DCvBnBqR,GAAkBxQ,cAAH,mhBAqDNyQ,GAvBS,uCAAG,WACzBnK,GADyB,eAAAjI,EAAA,+EAOJS,kBAA+B+C,IAAa2O,GAAiB,CAC9ElK,UACA+B,UAAWxL,IATU,cAOjBiF,EAPiB,yBAWhB,CACL3C,OAAO,EACPwJ,UAAW7G,EAAK4O,SAASjK,OAAO3E,EAAK6O,UAAU9Q,KAAI,SAAC0I,GAAD,OAAOA,EAAErE,QAbvC,uCAgBvBhF,QAAQC,MAAR,0CAAiDmH,GAAjD,MAhBuB,kBAiBhB,CACLnH,OAAO,IAlBc,yDAAH,sD,UCNXyR,GAAkB,WAC7B,IAAMhN,EAAyCiN,cAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAKC,SAASC,YAE9FC,EAAWC,eAMjB,MAAO,CAACvN,EALsDwN,uBAC5D,SAACtP,GAAD,OAAwBoP,EAASG,aAAmB,CAAEzN,aAAc9B,OACpE,CAACoP,MAMQI,GAAuB,WAClC,IAAMC,EAAsCV,cAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAKC,SAASO,aAC3FL,EAAWC,eAKjB,MAAO,CAACI,EAJgDH,uBACtD,SAACtP,GAAD,OAAwBoP,EAASM,aAAwB,CAAED,UAAWzP,OACtE,CAACoP,MAKQO,GAA0B,WACrC,IAAMC,EAA0Cb,cAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAKC,SAASU,gBAC/FR,EAAWC,eAKjB,MAAO,CAACO,EAJuDN,uBAC7D,SAACO,GAAD,OAAqCT,EAASU,aAA2B,CAAEF,aAAcC,OACzF,CAACT,MAOQW,GAAiB,WAG5B,OAAOhB,cAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAKlI,MAAMiJ,cAQ9CC,GAAiB,WAC5B,IAAMb,EAAWC,eACjB,OAAOC,uBAAY,SAAC9H,GAAD,OAA6B4H,EAASc,aAAY,CAAE1I,qBAAmB,CAAC4H,KAGhFpH,GAAe,SAACR,GAC3B,IAAM2I,EAAcJ,KACdK,EAAiBH,KAEjBI,EAAqB7I,EAAc3C,QAAO,SAACC,EAAiBN,GAIhE,OAHKtH,OAAOC,KAAKgT,GAAa7K,SAASd,IACrCM,EAAMnG,KAAK6F,GAENM,IACN,IAcH,OAZAtF,qBAAU,WACJ6Q,GACFD,EAAeC,KAEhB,CAACD,EAAgBC,IAEE7I,EACnBzJ,KAAI,SAACyG,GAAa,IAAD,EAChB,iBAAO2L,EAAY3L,UAAnB,aAAO,EAAsBxE,QAE9BsQ,QAAO,SAACC,GAAD,OAAUA,MAsDTC,GAAkB,WAG7B,OAAOzB,cAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAK/E,OAAO8F,cAa/CS,GAAkB,WAC7B,IAAMrB,EAAWC,eACjB,OAAOC,uBAAY,SAAClF,GAAD,OAA8BgF,EAASsB,aAAa,CAAEtG,sBAAoB,CAACgF,KAGnFuB,GAAgB,SAAC9J,GAC5B,IAAM+J,EAAeJ,KACfK,EAAkBJ,KAoBxB,OAjBS,OAAT5J,QAAS,IAATA,KAAWkH,SAAQ,SAACxR,GACbqU,EAAarU,IAChBsU,EAAgB,CAACtU,OAIEuU,mBAAQ,WAC7B,GAAKjK,EAGL,OAAOA,EACJ9I,KAAI,SAACxB,GAAO,IAAD,EACV,iBAAOqU,EAAarU,UAApB,aAAO,EAAiByD,QAEzBsQ,QAAO,SAACS,GAAD,OAAWA,OACpB,CAAClK,EAAW+J,KCjLJI,GAA4B,WACvC,MAAwClC,KAAxC,mBAAOhN,EAAP,KAAqBmP,EAArB,KACA,EAA6C1Q,IAA/B2Q,EAAd,EAAQlR,KAA2B3C,EAAnC,EAAmCA,MAEnC,EAAqCmS,KAArC,mBAAOC,EAAP,KAAkB0B,EAAlB,KACA,EAAsDtL,KAAxCuL,EAAd,EAAQpR,KAA+BqR,EAAvC,EAAgChU,MAEhC,EAA2CsS,KAA3C,mBAAOC,EAAP,KAAqB0B,EAArB,KA4BA,OAzBA9R,qBAAU,gBACaD,IAAjBuC,GAA8BoP,IAAwB7T,GACxD4T,EAAgBC,KAEjB,CAAC7T,EAAO6T,EAAqBpP,EAAcmP,IAG9CzR,qBAAU,gBACUD,IAAdkQ,GAA2B2B,IAAqBC,GAClDF,EAAgBC,KAEjB,CAAC3B,EAAW4B,EAAYD,EAAkBD,IAE7C3R,qBAAU,WAOHoQ,GANM,uCAAG,4BAAArT,EAAA,sEACO0J,KADP,QACNjG,EADM,SAGVsR,EAAmBtR,GAHT,2CAAH,oDAOTe,KAED,CAAC6O,EAAc0B,IAEX,MAGIC,GAAwB,WACnC,IAAMC,EDYyB,WAC/B,IAAMpC,EAAWC,eACjB,OAAOC,uBAAY,SAACvI,GAAD,OAAuBqI,EAASoC,aAAe,CAAEzK,aAAW,CAACqI,ICdzDqC,GACjBvB,EAAcD,KAEdE,EAAcJ,KACdlJ,EAAYH,KAGlBlH,qBAAU,WACJqH,EAAUhK,OAAS,GACrBqT,EAAYrJ,KAEb,CAACqJ,EAAarJ,IAGjB,IAAM6K,EAAyBZ,mBAAQ,WACrC,OAAO5T,OAAOC,KAAKgT,GAAatL,QAAO,SAACC,EAAiBN,GAKvD,OAJiB2L,EAAY3L,GACfxE,MACZ8E,EAAMnG,KAAK6F,GAENM,IACN,MACF,CAACqL,IAGJ,EAAkDnI,GAAa0J,GAAhDC,EAAf,EAAQtU,MAA4BuU,EAApC,EAA8B5R,KAO9B,OANAR,qBAAU,WACJoS,IAAcD,GAChBH,EAAetU,OAAOsI,OAAOoM,MAE9B,CAACD,EAAeC,EAAWJ,IAEvB,MAGIK,GAAe,WAC1B,IAAMC,EDmE0B,WAChC,IAAM1C,EAAWC,eACjB,OAAOC,uBACL,SAACpF,GACCkF,EAAS2C,aAAgB,CAAE7H,cAE7B,CAACkF,ICzEsB4C,GACnBtB,EAAeD,KAEfG,EAAeJ,KACf3J,EAAYmF,KAGlBxM,qBAAU,WACJqH,EAAUhK,OAAS,GACrB6T,EAAa7J,KAEd,CAAC6J,EAAc7J,IAGlB,IAAMoL,EAA0BnB,mBAAQ,WACtC,OAAO5T,OAAOC,KAAKyT,GAAc/L,QAAO,SAACC,EAAiBpG,GAKxD,OAJkBkS,EAAalS,GAChBsB,MACb8E,EAAMnG,KAAKD,GAENoG,IACN,MACF,CAAC8L,IAGJ,EAAoDjG,GAAqBsH,GAA1DC,EAAf,EAAQ7U,MAA6B8U,EAArC,EAA+BnS,KAO/B,OANAR,qBAAU,WACJ2S,IAAeD,GACjBJ,EAAiB5U,OAAOsI,OAAO2M,MAEhC,CAACD,EAAgBC,EAAYL,IAEzB,M,kCCxHHM,GAAelU,cAAH,meAcZmU,GAAcnU,cAAH,qTA6BXoU,GAAS,SAACC,GACd,IAAMC,EAAMD,EACT1N,QAAO,SAAC4N,EAAUC,GAAX,6BAAqCD,GAArC,aAAkDC,MAAoB,IAC7E3U,KAAI,SAAC4U,GAAD,OAAYA,EAAOvQ,MAC1B,OAAOwQ,MAAMlP,KAAK,IAAImP,IAAIL,KAsFbM,GAnFe,SAC5BC,GAQA,MAA0C/T,mBAAS,CACjDkL,OAAQ,GACRnD,MAAO,GACPiM,SAAS,EACT3V,OAAO,IAJT,mBAAO4V,EAAP,KAAsBC,EAAtB,KAOMC,EAAuBJ,EAAalW,OrBzEH,EqB4EvC2C,qBAAU,WACR0T,EAAiB,CACfhJ,OAAQ,GACRnD,MAAO,GACPiM,SAAUG,EACV9V,OAAO,MAER,CAAC0V,EAAcI,IAElB3T,qBAAU,WA8BH2T,GA7BO,uCAAG,gCAAA5W,EAAA,+EAEUS,kBAA6B+C,IAAaqS,GAAc,CAC3E1P,OAAQqQ,EAAaK,cAErB5J,KAAMuJ,EAAaM,OAAO,GAAGD,cAAgBL,EAAahW,MAAM,GAChEqF,GAAI2Q,EAAaO,gBANR,cAELpJ,EAFK,OAQLqJ,EAAWjB,GAAO,CAACpI,EAAOsJ,UAAWtJ,EAAOuJ,SAAUvJ,EAAOwJ,SARxD,SASS1W,kBAA4B+C,IAAasS,GAAa,CACxEnI,OAAQqJ,EACRnR,GAAI2Q,EAAaO,gBAXR,OASLvM,EATK,OAaXmM,EAAiB,CACfhJ,OAAQqJ,EACRxM,MAAOuL,GAAO,CAACvL,EAAMyM,UAAWzM,EAAM4M,IAAK5M,EAAM6M,MACjDZ,SAAS,EACT3V,OAAO,IAjBE,kDAoBXD,QAAQC,MAAR,4BAAmC0V,GAAnC,MACAG,EAAiB,CACfhJ,OAAQ,GACRnD,MAAO,GACPiM,SAAS,EACT3V,OAAO,IAzBE,0DAAH,oDA8BVwW,KAED,CAACd,EAAcI,IAKlB,IAAMW,EAAiBnD,GAAcsC,EAAc/I,QAC7C6J,EAAgB/L,GAAaiL,EAAclM,OAOjD,MAAO,CACLmD,OAAQ4J,EACR/M,MAAOgN,EACPC,cANoBF,EAAejX,SAAWoW,EAAc/I,OAAOrN,QAAUoW,EAAcD,QAO3FiB,aANmBF,EAAclX,SAAWoW,EAAclM,MAAMlK,QAAUoW,EAAcD,QAOxF3V,MAAO4V,EAAc5V,Q,2CCrInB6W,GAAqB,GAgCZC,GAtB+B,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,IAAKC,EAAmB,EAAnBA,IAAQC,EAAW,mBACvE,EAAoBtV,mBAAS,GAApBuV,EAAT,oBAEMC,EAAmBN,GAAS5O,SAAS8O,GAE3C,OAAIA,IAAQI,EAER,gDACMF,GADN,IAEED,IAAKA,EACLD,IAAKA,EACLK,QAAS,WACHL,GAAKF,GAASvV,KAAKyV,GACvBG,GAAQ,SAAClG,GAAD,OAAOA,EAAI,SAMpB,eAAC,KAAD,eAAciG,K,sBC1BjBI,GAAaC,aAAOR,GAAPQ,CAAH,+KACL,qBAAGC,QACF,qBAAGA,QACI,qBAAGA,QAEA,qBAAGC,MAAkBC,OAAOC,cACvC,qBAAGF,MAAkBC,OAAOE,QAG1BC,GAGR,SAAC,GAAyC,IAAvCzQ,EAAsC,EAAtCA,QAAsC,IAA7BoQ,YAA6B,MAAtB,OAAsB,EAAXN,EAAW,mBACtCF,EAAMtD,mBAAQ,WAClB,IAAMoE,EAAqBC,aAAU3Q,GACrC,OAAI0Q,EAEI,GAAN,OAAUE,KAAV,0BAAoCF,EAApC,QAEK,OACN,CAAC1Q,IAEJ,OAAO,eAACkQ,GAAD,aAAYE,KAAMA,EAAMR,IAAKA,EAAKC,IAAI,cAAiBC,KAG1De,GAAwBV,KAAOW,IAAV,uIAcdC,GAAwD,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,SAA0B,IAAhBb,YAAgB,MAAT,GAAS,EAC1G,OACE,gBAACS,GAAD,WACGG,GAAY,eAAC,GAAD,CAAchR,QAASgR,EAAUZ,KAAI,UAAKA,EAAKrP,WAAV,QACjDkQ,GAAY,eAAC,GAAD,CAAcjR,QAASiR,EAAUb,KAAI,UAAKA,EAAKrP,WAAV,Y,qBC9B3CmQ,GAAe,SAC1BC,EACAC,GAOA,MAA8EA,GAAW,CAAEC,SAAU,WAArG,IAAQA,gBAAR,MAAmB,UAAnB,EAA8BC,EAA9B,EAA8BA,iBAAkBC,EAAhD,EAAgDA,eAAgBC,EAAhE,EAAgEA,UAChE,GAAe,IAAXL,EACF,OAAIK,EACK,IAEF,OAET,IAAKL,EAAQ,MAAO,IACpB,GAAIG,GAAoBH,EAASG,EAC/B,MAAM,IAAN,OAAWA,GAEb,GAAIH,EAAS,IAAMI,EACjB,OAAoCJ,EAjCzB1Q,QAAQ,IAAIgR,MAAM,sBAAsB,GAoCrD,IAAIC,EAAY,EACZH,IACFG,EAAYP,EAAS,EAAI,EAAI,GAG/B,IAAIQ,EAAM,YAAQ,IAAIC,OAAOF,GAAnB,KAEO,aAAbL,IACFM,EAAM,cAAU,IAAIC,OAAOF,KAGzBF,GAAaL,EAAS,MACxBQ,EAAS,KAGX,IAAME,EAAsBjW,WAAWuV,EAAO1Q,QAAQiR,IAGtD,OAAOI,KAAQD,GAAqBF,OAAOA,GAAQ/C,e,8BCxD/CmD,GAAY5B,KAAOW,IAAV,8JAuBAkB,GAbgE,SAAC,GAA+B,IAAD,IAA5BC,YAA4B,SAAXnC,EAAW,mBACpGO,EAAU6B,eAAV7B,MACR,OACE,eAAC0B,GAAD,2BAAejC,GAAf,aACGmC,EACC,eAAC,MAAD,CAAcE,OAAQ9B,EAAMC,OAAO8B,QAASC,MAAOhC,EAAMC,OAAO8B,UAEhE,eAAC,MAAD,CAAcD,OAAQ9B,EAAMC,OAAOgC,mB,UCPrCC,GAAYpC,KAAOW,IAAV,qFAMT0B,GAAcrC,aAAOsC,KAAPtC,CAAH,0EAEK,qBAAGE,MAAkBC,OAAOoC,kBAG5CC,GAAOxC,KAAOW,IAAV,upBAYM,qBAAGT,MAAkBC,OAAOC,cAI/B,qBAAGqC,MAAmB,UACb,qBAAGvC,MAAkBC,OAAOuC,aAE9C,qBAAGxC,MAAkByC,aAAaC,MAKlC,qBAAG1C,MAAkByC,aAAaE,MAOhCC,GAAW9C,KAAOW,IAAV,gLAWRoC,GAAiB/C,KAAOW,IAAV,2MAMhB,qBAAGT,MAAkByC,aAAaC,MAKhCI,GAAQhD,KAAOW,IAAV,2GAEW,qBAAGT,MAAkBC,OAAO8C,cAK5CC,GAAYlD,KAAOW,IAAV,6IACJ,qBAAGT,MAAkBC,OAAOuC,aAC1B,qBAAGD,KAAmB,OAAS,WAQtCU,GAAenD,KAAOW,IAAV,wFAOZyC,GAAepD,KAAOW,IAAV,0UAUI,gBAAGT,EAAH,EAAGA,MAAH,SAAUmD,QAAyBnD,EAAMC,OAAOmD,QAAU,iBACrE,gBAAGpD,EAAH,EAAGA,MAAH,SAAUmD,QAAyBnD,EAAMqD,KAAKnD,WAAaF,EAAMC,OAAOuC,aAW7Ec,GAA0B,SAACpH,EAAuBqH,GACtD,OACErH,EAAMvM,QAAQ8O,cAAchO,SAAS8S,EAAM9E,gBAC3CvC,EAAMrO,OAAO4Q,cAAchO,SAAS8S,EAAM9E,gBAC1CvC,EAAMvH,KAAK8J,cAAchO,SAAS8S,EAAM9E,gBAuR7B+E,GA3QA,WACb,IAAMC,EAAUC,cAChB,EAAuBC,gBAAfC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KACN3M,EAAM4M,eAAN5M,EAEF6M,EAAWC,iBAAyB,MACpCC,EAAUD,iBAAuB,MACjCE,EAAcF,iBAAuB,MAE3C,EAAgC7Z,oBAAS,GAAzC,mBAAOga,EAAP,KAAiBC,EAAjB,KACA,EAA0Bja,mBAAS,IAAnC,mBAAOoZ,EAAP,KAAcc,EAAd,KACMC,EAAsBC,aAAYhB,EAAO,KAE/C,EAA8DtF,GAAsBqG,GAA5EjP,EAAR,EAAQA,OAAQnD,EAAhB,EAAgBA,MAAOiN,EAAvB,EAAuBA,cAAeC,EAAtC,EAAsCA,aAAc5W,EAApD,EAAoDA,MAEpD,EAAsC2B,mBAAS,GAA/C,mBAAOqa,EAAP,KAAoBC,EAApB,KACA,EAAoCta,mBAAS,GAA7C,mBAAOua,EAAP,KAAmBC,EAAnB,KAEAha,qBAAU,WACR8Z,EAAe,GACfE,EAAc,KACb,CAACL,IAEJ,IAAMM,EAAqB,SAACC,GAC1B,IAAMC,EAAYb,EAAQ9P,SAAW8P,EAAQ9P,QAAQ4Q,SAASF,EAAEG,QAC1DC,EAAalB,EAAS5P,SAAW4P,EAAS5P,QAAQ4Q,SAASF,EAAEG,QAC7DE,EAAgBhB,EAAY/P,SAAW+P,EAAY/P,QAAQ4Q,SAASF,EAAEG,QAEvEF,GAAcG,GAAeC,IAChCP,EAAc,GACdF,EAAe,GACfL,GAAY,KAIhBzZ,qBAAU,WASR,OARIwZ,GACFgB,SAASC,iBAAiB,QAASR,GACnCO,SAASE,cAAc,QAAQC,MAAMC,SAAW,WAEhDJ,SAASK,oBAAoB,QAASZ,GACtCO,SAASE,cAAc,QAAQC,MAAMC,SAAW,WAG3C,WACLJ,SAASK,oBAAoB,QAASZ,MAEvC,CAACT,IAGJ,MAAqCsB,eAArC,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAmCC,eAAnC,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAkB,SAACtY,GACvB2W,GAAY,GACZO,EAAc,GACdF,EAAe,GACfhB,EAAQ3Z,KAAK2D,IAITuY,EAAqBlK,GAAc4J,GACnCO,EAAwBD,EAAmBhe,SAAW0d,EAAY1d,OAClEke,EAAoB/S,GAAa0S,GACjCM,EAAuBD,EAAkBle,SAAW6d,EAAW7d,OAGrE,EAA0CmC,oBAAS,GAAnD,mBAAOic,EAAP,KAAsBC,EAAtB,KACMC,EAAgBrK,mBAAQ,WAC5B,OAAImK,EACKJ,EAAmBvK,QAAO,SAACS,GAAD,OAAWoH,GAAwBpH,EAAOqH,MAEtElO,EAAOpL,MAAK,SAACsc,EAAIC,GAAL,OAAaD,EAAG1f,UAAY2f,EAAG3f,WAAa,EAAI,OAClE,CAACuf,EAAe/Q,EAAQ2Q,EAAoBzC,IAEzCkD,EAAcxK,mBAAQ,WAC1B,OAAImK,EACKF,EAAkBzK,QAAO,SAACC,GAAD,OArFP,SAACA,EAAgB6H,GAC9C,OACE7H,EAAK/L,QAAQ8O,cAAchO,SAAS8S,EAAM9E,gBAC1C6E,GAAwB5H,EAAK9N,OAAQ2V,IACrCD,GAAwB5H,EAAK3N,OAAQwV,GAiFOmD,CAAuBhL,EAAM6H,MAElErR,EAAMjI,MAAK,SAAC0c,EAAIC,GAAL,OAAaD,EAAG9f,UAAY+f,EAAG/f,WAAa,EAAI,OACjE,CAACqL,EAAOkU,EAAeF,EAAmB3C,IAsC7C,OACE,uCACGY,EAAW,eAACvB,GAAD,IAAe,KAC3B,gBAACV,GAAD,WACE,eAACC,GAAD,CACE/U,KAAK,OACLmW,MAAOA,EACPsD,SAAU,SAAChC,GACTR,EAASQ,EAAEG,OAAOzB,QAEpBuD,YAAa5P,EAAE,0BACf6P,IAAKhD,EACLiD,QAAS,WACP5C,GAAY,MAGhB,gBAAC9B,GAAD,CAAMC,MAAO4B,EAAU4C,IAAK9C,EAA5B,UACE,gBAAC,KAAD,CAAMgD,GAAG,OAAT,UACE,eAAC/D,GAAD,CAAcC,SAAUiD,EAAec,QAAS,kBAAMb,GAAiB,IAAvE,SACGnP,EAAE,YAEL,eAACgM,GAAD,CAAcC,QAASiD,EAAec,QAAS,kBAAMb,GAAiB,IAAtE,SACGnP,EAAE,kBAGN1O,GAAS,eAAC,MAAD,CAAMwZ,MAAM,UAAZ,SAAuB9K,EAAE,sCAEnC,gBAAC2L,GAAD,WACE,eAAC,MAAD,CAAMsE,MAAI,EAACnF,MAAM,YAAjB,SACG9K,EAAE,aAEH0M,IAASC,GACT,eAAC,MAAD,CAAMuD,UAAU,MAAMC,SAAS,OAA/B,SACGnQ,EAAE,YAGL0M,IAASC,GACT,eAAC,MAAD,CAAMuD,UAAU,MAAMC,SAAS,OAA/B,SACGnQ,EAAE,iBAGL0M,IAASC,GACT,eAAC,MAAD,CAAMuD,UAAU,MAAMC,SAAS,OAA/B,SACGnQ,EAAE,kBAIRoP,EAAcpe,MAAM,EAAGsc,GAAatb,KAAI,SAACgT,EAAO1C,GAC/C,OAEE,cADA,CACCyJ,GAAD,CAAciE,QAAS,kBAAMnB,EAAgB,eAAD,OAAgB7J,EAAMvM,WAAlE,SACE,gBAACkT,GAAD,WACE,gBAAC,KAAD,WACE,eAAC,GAAD,CAAclT,QAASuM,EAAMvM,UAC7B,eAAC,MAAD,CAAM2X,GAAG,OAAT,SACE,eAAC,MAAD,oBAAUpL,EAAMvH,KAAhB,aAAyBuH,EAAMrO,OAA/B,SAEF,eAAC,GAAD,CACEN,GAAG,iBACH+X,MAAO,CAAEiC,WAAY,OACrB3F,KAAM8D,EAAYjV,SAASyL,EAAMvM,SACjCuX,QAAS,SAACrC,GACRA,EAAE2C,kBACF7B,EAAczJ,EAAMvM,gBAIxBiU,IAASC,GAAQ,gBAAC,MAAD,CAAMuD,UAAU,MAAhB,cAAwBvG,GAAa3E,EAAMxF,cAC5DkN,IAASC,GAAQ,gBAAC,MAAD,CAAMuD,UAAU,MAAhB,cAAwBvG,GAAa3E,EAAMrV,eAC5D+c,IAASC,GAAQ,gBAAC,MAAD,CAAMuD,UAAU,MAAhB,cAAwBvG,GAAa3E,EAAMnV,qBAnBiByS,MAtFjE,WAC5B,IAAMiO,EAAYrB,EAAgBH,EAAwB9G,EACpDuI,EACqB,IAAzBpB,EAActe,SAAiByf,GAAanD,EAAoBtc,Q1BlO7B,E0BmO/B2f,EAA6C,IAAzBrB,EAActe,SAAiByf,EACnDG,EAAcxB,EAAgBuB,EAAoBD,EAClDG,EAAkC3Q,EAAhBkP,EAAkB,gCAAqC,cAC/E,OACE,uCACGqB,GAAa,eAAC,MAAD,IACbG,GAAe,eAAC,MAAD,UAAOC,KACrBzB,GAAiB9B,EAAoBtc,O1B1ON,G0B2O/B,eAAC,MAAD,UAAOkP,EAAE,+BAkGR4Q,GACD,eAAC9E,GAAD,CACEkE,QAAS,WACPzC,EAAeD,EAAc,IAE/BjC,KAAM+D,EAActe,QAAUwc,EAC9BuC,IAAK7C,EALP,SAOGhN,EAAE,iBAGL,eAAC4L,GAAD,IACA,gBAACD,GAAD,WACE,eAAC,MAAD,CAAMsE,MAAI,EAACnF,MAAM,YAAYiF,GAAG,MAAhC,SACG/P,EAAE,YAEH0M,IAASC,GACT,eAAC,MAAD,CAAMuD,UAAU,MAAMC,SAAS,OAA/B,SACGnQ,EAAE,iBAGL0M,IAASC,GACT,eAAC,MAAD,CAAMuD,UAAU,MAAMC,SAAS,OAA/B,SACGnQ,EAAE,gBAGL0M,IAASC,GACT,eAAC,MAAD,CAAMuD,UAAU,MAAMC,SAAS,OAA/B,SACGnQ,EAAE,kBAIRuP,EAAYve,MAAM,EAAGwc,GAAYxb,KAAI,SAAC0I,EAAG4H,GACxC,OAEE,cADA,CACCyJ,GAAD,CAAciE,QAAS,kBAAMnB,EAAgB,cAAD,OAAenU,EAAEjC,WAA7D,SACE,gBAACkT,GAAD,WACE,gBAAC,KAAD,WACE,eAAC,GAAD,CAAoBlC,SAAU/O,EAAEhE,OAAO+B,QAASiR,SAAUhP,EAAE7D,OAAO4B,UACnE,eAAC,MAAD,CAAM2X,GAAG,OAAOhC,MAAO,CAAEyC,WAAY,UAArC,SACE,eAAC,MAAD,oBAAUnW,EAAEhE,OAAOC,OAAnB,cAA+B+D,EAAE7D,OAAOF,YAE1C,eAAC,GAAD,CACEN,GAAG,iBACH+X,MAAO,CAAEiC,WAAY,QACrB3F,KAAMiE,EAAWpV,SAASmB,EAAEjC,SAC5BuX,QAAS,SAACrC,GACRA,EAAE2C,kBACF1B,EAAalU,EAAEjC,gBAInBiU,IAASC,GAAQ,gBAAC,MAAD,CAAMuD,UAAU,MAAhB,cAAwBvG,GAAajP,EAAE/K,eACxD+c,IAASC,GAAQ,gBAAC,MAAD,CAAMuD,UAAU,MAAhB,cAAwBvG,GAAajP,EAAE9K,mBACxD8c,IAASC,GAAQ,gBAAC,MAAD,CAAMuD,UAAU,MAAhB,cAAwBvG,GAAajP,EAAE7K,qBAnBgByS,MA/H7D,WAC3B,IAAMiO,EAAYrB,EAAgBD,EAAuB/G,EACnD4I,EACmB,IAAvBvB,EAAYze,SAAiBoX,GAAgBkF,EAAoBtc,Q1BpP9B,E0BqP/BigB,EAA0C,IAAvBxB,EAAYze,SAAiByf,EAChDG,EAAcxB,EAAgB6B,EAAmBD,EACjDE,EAAiChR,EAAhBkP,EAAkB,gCAAqC,cAC9E,OACE,uCACGqB,GAAa,eAAC,MAAD,IACbG,GAAe,eAAC,MAAD,UAAOM,KACrB9B,GAAiB9B,EAAoBtc,O1B5PN,G0B6P/B,eAAC,MAAD,UAAOkP,EAAE,+BA2IRiR,GACD,eAACnF,GAAD,CACEkE,QAAS,WACPvC,EAAcD,EAAa,IAE7BnC,KAAMkE,EAAYze,QAAU0c,EAC5BqC,IAAK7C,EALP,SAOGhN,EAAE,2BCzYTkR,GAAatI,aAAOuI,KAAPvI,CAAH,0QACA,qBAAGE,MAAkBC,OAAOqI,UAAUC,cAOlD,qBAAGvI,MAAkByC,aAAaC,MAuCvB8F,GAjCC,WACd,IAAQtR,EAAM4M,eAAN5M,EAGJuR,EAAc,EAOlB,OATgBC,YAAc,CAAC,cAAe,aAAc,iBAI1DD,EAAc,GAHCC,YAAc,CAAC,eAAgB,kBAM9CD,EAAc,GAGd,gBAACL,GAAD,WACE,eAAC,KAAD,UACE,gBAAC,KAAD,CAAYK,YAAaA,EAAaE,MAAM,KAAKC,QAAQ,SAAzD,UACE,eAAC,KAAD,CAAgBC,GAAIC,KAAMrb,GAAG,QAA7B,SACGyJ,EAAE,cAEL,eAAC,KAAD,CAAgB2R,GAAIC,KAAMrb,GAAG,cAA7B,SACGyJ,EAAE,WAEL,eAAC,KAAD,CAAgB2R,GAAIC,KAAMrb,GAAG,eAA7B,SACGyJ,EAAE,iBAIT,eAAC,KAAD,CAAK6R,MAAO,CAAC,OAAQ,OAAQ,SAA7B,SACE,eAAC,GAAD,U,+FCWOC,GAxDgC,SAACC,GAC9C,OACE,gBAAC,MAAD,yBAAKF,MAAM,OAAOG,OAAO,OAAOC,oBAAoB,OAAOC,QAAQ,cAAiBH,GAApF,cACE,uBACEI,EAAE,wdACFvH,OAAO,UACPwH,YAAY,MACZC,gBAAgB,MAChBC,iBAAiB,MACjB5H,KAAK,cACL6H,QAAQ,MACRhO,OAAO,aART,SAUE,0BACElO,GAAG,YACHmc,cAAc,oBACdC,IAAI,KACJ9a,KAAK,MACLpB,GAAG,OACHmc,MAAM,4BAGV,uBACEP,EAAE,wdACFvH,OAAO,UACPwH,YAAY,MACZC,gBAAgB,MAChBC,iBAAiB,MACjB5H,KAAK,cACL6H,QAAQ,MACRhO,OAAO,aART,SAUE,0BACElO,GAAG,aACHmc,cAAc,oBACdC,IAAI,KACJ9a,KAAK,MACLpB,GAAG,OACHmc,MAAM,+BAGV,gCACE,0BAAQrc,GAAG,OAAX,UACE,iCAAgBsc,UAAU,OAAOzhB,OAAO,cAAc0hB,aAAa,MACnE,qCACE,8BAAaC,GAAG,gBAChB,8BAAaA,GAAG,gBAChB,8BAAaA,GAAG,gBAChB,8BAAaA,GAAG,+BCmIbC,GAnL+B,SAACf,GAC7C,OACE,gBAAC,MAAD,yBAAKF,MAAM,OAAOG,OAAO,OAAOE,QAAQ,YAAYD,oBAAoB,OAAOM,QAAQ,OAAUR,GAAjG,cACE,wBAAMF,MAAM,KAAKnH,KAAK,UAAtB,UACE,0BACE8H,cAAc,SACdC,IAAI,OACJhZ,OAAO,gBACPsZ,SAAS,aACTC,YAAY,aACZN,MAAM,UAER,0BACEF,cAAc,IACdC,IAAI,OACJhZ,OAAO,gBACPsZ,SAAS,aACTC,YAAY,aACZN,MAAM,aAGV,wBAAMO,EAAE,UAAUpB,MAAM,KAAKnH,KAAK,UAAlC,UACE,0BACE8H,cAAc,SACdC,IAAI,OACJhZ,OAAO,gBACPsZ,SAAS,aACTC,YAAY,aACZN,MAAM,UAER,0BACEF,cAAc,IACdC,IAAI,OACJhZ,OAAO,gBACPsZ,SAAS,aACTC,YAAY,aACZN,MAAM,aAGV,wBAAMO,EAAE,UAAUpB,MAAM,KAAKnH,KAAK,UAAlC,UACE,0BACE8H,cAAc,SACdC,IAAI,OACJhZ,OAAO,gBACPsZ,SAAS,aACTC,YAAY,aACZN,MAAM,UAER,0BACEF,cAAc,IACdC,IAAI,OACJhZ,OAAO,gBACPsZ,SAAS,aACTC,YAAY,aACZN,MAAM,aAGV,wBAAMO,EAAE,UAAUpB,MAAM,KAAKnH,KAAK,UAAlC,UACE,0BACE8H,cAAc,SACdC,IAAI,OACJhZ,OAAO,gBACPsZ,SAAS,aACTC,YAAY,aACZN,MAAM,UAER,0BACEF,cAAc,IACdC,IAAI,OACJhZ,OAAO,gBACPsZ,SAAS,aACTC,YAAY,aACZN,MAAM,aAGV,wBAAMO,EAAE,UAAUpB,MAAM,KAAKnH,KAAK,UAAlC,UACE,0BACE8H,cAAc,SACdC,IAAI,OACJhZ,OAAO,gBACPsZ,SAAS,aACTC,YAAY,aACZN,MAAM,UAER,0BACEF,cAAc,IACdC,IAAI,OACJhZ,OAAO,gBACPsZ,SAAS,aACTC,YAAY,aACZN,MAAM,aAGV,wBAAMO,EAAE,SAASpB,MAAM,KAAKnH,KAAK,UAAjC,UACE,0BACE8H,cAAc,SACdC,IAAI,OACJhZ,OAAO,gBACPsZ,SAAS,aACTC,YAAY,aACZN,MAAM,UAER,0BACEF,cAAc,IACdC,IAAI,OACJhZ,OAAO,gBACPsZ,SAAS,aACTC,YAAY,aACZN,MAAM,aAGV,wBAAMO,EAAE,UAAUpB,MAAM,KAAKnH,KAAK,UAAlC,UACE,0BACE8H,cAAc,SACdC,IAAI,OACJhZ,OAAO,gBACPsZ,SAAS,aACTC,YAAY,aACZN,MAAM,UAER,0BACEF,cAAc,IACdC,IAAI,OACJhZ,OAAO,gBACPsZ,SAAS,aACTC,YAAY,aACZN,MAAM,aAGV,wBAAMO,EAAE,UAAUpB,MAAM,KAAKnH,KAAK,UAAlC,UACE,0BACE8H,cAAc,SACdC,IAAI,OACJhZ,OAAO,gBACPsZ,SAAS,aACTC,YAAY,aACZN,MAAM,UAER,0BACEF,cAAc,IACdC,IAAI,OACJhZ,OAAO,gBACPsZ,SAAS,aACTC,YAAY,aACZN,MAAM,aAGV,wBAAMO,EAAE,UAAUpB,MAAM,KAAKnH,KAAK,UAAlC,UACE,0BACE8H,cAAc,SACdC,IAAI,OACJhZ,OAAO,gBACPsZ,SAAS,aACTC,YAAY,aACZN,MAAM,UAER,0BACEF,cAAc,IACdC,IAAI,OACJhZ,OAAO,gBACPsZ,SAAS,aACTC,YAAY,aACZN,MAAM,aAGV,wBAAMO,EAAE,UAAUpB,MAAM,KAAKnH,KAAK,UAAlC,UACE,0BACE8H,cAAc,SACdC,IAAI,OACJhZ,OAAO,gBACPsZ,SAAS,aACTC,YAAY,eAEd,0BAASR,cAAc,IAAIC,IAAI,OAAOhZ,OAAO,gBAAgBsZ,SAAS,aAAaC,YAAY,uBChBxFE,GA7JkC,SAACnB,GAChD,OACE,gBAAC,MAAD,yBAAKF,MAAM,OAAOG,OAAO,OAAOE,QAAQ,aAAaK,QAAQ,OAAUR,GAAvE,cACE,wBAAMF,MAAM,KAAKnH,KAAK,UAAtB,UACE,0BACE8H,cAAc,SACdC,IAAI,KACJhZ,OAAO,yBACPsZ,SAAS,0BACTC,YAAY,eAEd,0BACER,cAAc,IACdC,IAAI,KACJ9a,KAAK,MACLpB,GAAG,MACHkD,OAAO,0BACPsZ,SAAS,0BACTC,YAAY,eAEd,0BACER,cAAc,KACdC,IAAI,KACJhZ,OAAO,sBACPsZ,SAAS,mBACTC,YAAY,eAEd,0BACER,cAAc,IACdC,IAAI,KACJhZ,OAAO,8BACPsZ,SAAS,iBACTC,YAAY,eAEd,0BACER,cAAc,UACdC,IAAI,KACJhZ,OAAO,cACPsZ,SAAS,kBACTC,YAAY,kBAGhB,wBAAMnB,MAAM,KAAKnH,KAAK,UAAtB,UACE,0BACE8H,cAAc,SACdC,IAAI,KACJhZ,OAAO,6BACPsZ,SAAS,gCACTC,YAAY,eAEd,0BACER,cAAc,IACdC,IAAI,KACJhZ,OAAO,6BACPsZ,SAAS,gCACTC,YAAY,eAEd,0BACER,cAAc,KACdC,IAAI,KACJhZ,OAAO,sBACPsZ,SAAS,mBACTC,YAAY,eAEd,0BACER,cAAc,IACdC,IAAI,KACJhZ,OAAO,8BACPsZ,SAAS,iBACTC,YAAY,eAEd,0BACER,cAAc,UACdC,IAAI,KACJhZ,OAAO,cACPsZ,SAAS,kBACTC,YAAY,kBAGhB,wBAAMnB,MAAM,KAAKnH,KAAK,UAAtB,UACE,0BACE8H,cAAc,SACdC,IAAI,KACJhZ,OAAO,6BACPsZ,SAAS,gCACTC,YAAY,eAEd,0BACER,cAAc,IACdC,IAAI,KACJhZ,OAAO,+BACPsZ,SAAS,gCACTC,YAAY,eAEd,0BACER,cAAc,KACdC,IAAI,KACJhZ,OAAO,sBACPsZ,SAAS,mBACTC,YAAY,eAEd,0BACER,cAAc,IACdC,IAAI,KACJhZ,OAAO,8BACPsZ,SAAS,iBACTC,YAAY,eAEd,0BACER,cAAc,UACdC,IAAI,KACJhZ,OAAO,cACPsZ,SAAS,kBACTC,YAAY,kBAGhB,wBAAMnB,MAAM,KAAKnH,KAAK,UAAtB,UACE,0BACE8H,cAAc,SACdC,IAAI,KACJhZ,OAAO,6BACPsZ,SAAS,+BACTC,YAAY,eAEd,0BACER,cAAc,IACdC,IAAI,KACJhZ,OAAO,6BACPsZ,SAAS,+BACTC,YAAY,eAEd,0BACER,cAAc,KACdC,IAAI,KACJhZ,OAAO,sBACPsZ,SAAS,mBACTC,YAAY,eAEd,0BACER,cAAc,IACdC,IAAI,KACJhZ,OAAO,8BACPsZ,SAAS,iBACTC,YAAY,eAEd,0BACER,cAAc,UACdC,IAAI,KACJhZ,OAAO,cACPsZ,SAAS,kBACTC,YAAY,uBCjJhBG,GAAcvK,aAAOwK,KAAPxK,CAAH,+JAUXyK,GAAmBzK,aAAOwK,KAAPxK,CAAH,sEAKT0K,GAA2B,WACtC,IAAQtT,EAAM4M,eAAN5M,EACR,OACE,gBAACqT,GAAD,WACE,eAAC,GAAD,IACA,eAACF,GAAD,UACE,eAAC,MAAD,CAAMrI,MAAM,aAAaqF,SAAS,OAAlC,SACGnQ,EAAE,iCAOAuT,GAA4B,WACvC,IAAQvT,EAAM4M,eAAN5M,EACR,OACE,gBAACqT,GAAD,WACE,eAAC,GAAD,IACA,eAACF,GAAD,UACE,eAAC,MAAD,CAAMrI,MAAM,aAAaqF,SAAS,OAAlC,SACGnQ,EAAE,iCAOAwT,GAA8B,WACzC,IAAQxT,EAAM4M,eAAN5M,EACR,OACE,gBAACqT,GAAD,WACE,eAAC,GAAD,IACA,eAACF,GAAD,UACE,eAAC,MAAD,CAAMrI,MAAM,aAAaqF,SAAS,OAAlC,SACGnQ,EAAE,iCC3CPyT,GAAe,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aAM9C,OALAngB,qBAAU,WACRkgB,EAAcD,EAAQrH,OACtBuH,EAAaxJ,mBAAOsJ,EAAQ5R,KAAM,kBACjC,CAAC4R,EAAQrH,MAAOqH,EAAQ5R,KAAM6R,EAAeC,IAEzC,MAiEMC,GA3DG,SAAC,GAA2D,IAAzD5f,EAAwD,EAAxDA,KAAM0f,EAAkD,EAAlDA,cAAeC,EAAmC,EAAnCA,aAChC9K,EAAU6B,eAAV7B,MACR,OAAK7U,GAAwB,IAAhBA,EAAKnD,OAIhB,eAACgjB,GAAA,EAAD,UACE,gBAACC,GAAA,EAAD,CACE9f,KAAMA,EACN4d,MAAO,IACPG,OAAQ,IACRgC,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,GAEVC,aAAc,WACRT,GAAcA,OAAapgB,GAC3BmgB,GAAeA,OAAcngB,IAZrC,UAeE,gCACE,kCAAgB6C,GAAG,WAAWie,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAtD,UACE,uBAAMC,OAAO,KAAKC,UAAW7L,EAAMC,OAAOoC,eAAgByJ,YAAa,KACvE,uBAAMF,OAAO,OAAOC,UAAW7L,EAAMC,OAAOuC,UAAWsJ,YAAa,SAGxE,eAACC,GAAA,EAAD,CACEC,QAAQ,OACRC,UAAU,EACVC,UAAU,EACVC,cAAe,SAACnT,GAAD,OAAUsI,mBAAOtI,EAAM,OACtCoT,WAAY,KAEd,eAACC,GAAA,EAAD,CACEL,QAAQ,QACRM,UAAW,EACX3D,MAAM,SACNsD,UAAU,EACVC,UAAU,EACV7E,SAAS,OACT8E,cAAe,SAACI,GAAD,iBAAa1L,GAAa0L,KACzCC,YAAY,QACZC,KAAM,CAAEC,GAAI,GAAI9K,KAAM5B,EAAMC,OAAO0M,cAErC,eAACC,GAAA,EAAD,CACEC,OAAQ,CAAE/K,OAAQ9B,EAAMC,OAAOuC,WAC/BsK,aAAc,CAAEC,QAAS,QACzBC,UAAW,SAACC,EAActY,EAAMsU,GAArB,OACT,eAAC,GAAD,CAAc2B,QAAS3B,EAAM2B,QAASC,cAAeA,EAAeC,aAAcA,OAGtF,eAACoC,GAAA,EAAD,CAAMlB,QAAQ,QAAQ5e,KAAK,WAAW0U,OAAQ9B,EAAMC,OAAOuC,UAAWZ,KAAK,iBAAiB0H,YAAa,SAlDtG,eAAC,GAAD,K,aCRI6D,GAfyB,SAAC,GAAwB,IAAtB5J,EAAqB,EAArBA,MAAU9D,EAAW,mBAC9D,IAAK8D,GAAS6J,OAAOC,MAAM9J,GACzB,OAAO,eAAC,MAAD,2BAAU9D,GAAV,oBAGT,IAAM6N,EAAa/J,EAAQ,EAE3B,OACE,gBAAC,MAAD,2BAAU9D,GAAV,IAAgBuC,MAAOsL,EAAa,UAAY,UAAhD,UACGA,EAAa,SAAM,SACnBC,KAAKC,IAAIjK,GAAOnT,QAAQ,GAF3B,SCZSqd,GAAwB3N,aAAO4N,MAAP5N,CAAH,kDAIrB6N,GAAe7N,aAAOuI,KAAPvI,CAAH,wLAKH,qBAAGE,MAAkBqD,KAAKnD,cAC7B,qBAAGF,MAAkB4N,MAAMvK,QACxB,qBAAGrD,MAAkBC,OAAO8C,cAGrC8K,GAAc/N,KAAOW,IAAV,mKASXqN,GAAQhO,KAAOW,IAAV,wGACP,qBAAGT,MAAkBC,OAAOmD,WAO1BN,GAAQhD,KAAOW,IAAV,wFAEI,qBAAGT,MAAkBC,OAAO8C,cCjB5CF,GAAiB/C,KAAOW,IAAV,wpBAkCdsN,GAAcjO,aAAOgJ,KAAPhJ,CAAH,kHAQXkO,GAAiBlO,aAAOM,GAAPN,CAAH,kHAOdmO,GAAwB,WAC5B,IAAMC,EACJ,gBAAC,GAAD,WACE,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,OAGJ,OACE,uCACGA,EACAA,EACAA,MAKDC,GAA6D,SAAC,GAA0B,IAAxB1Y,EAAuB,EAAvBA,UAAW2Y,EAAY,EAAZA,MAC/E,EAAuBzK,gBAAfC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KACd,OACE,eAACkK,GAAD,CAAatgB,GAAE,sBAAiBgI,EAAU9F,SAA1C,SACE,gBAAC,GAAD,WACE,eAAC,KAAD,UACE,eAAC,MAAD,UAAOye,EAAQ,MAEjB,gBAAC,KAAD,CAAMC,WAAW,SAAjB,UACE,eAACL,GAAD,CAAgBre,QAAS8F,EAAU9F,WACjCiU,GAAQC,IAAS,eAAC,MAAD,CAAMyD,GAAG,MAAT,SAAgB7R,EAAU5H,UAC3C+V,IAASC,GACT,gBAAC,KAAD,CAAM0D,WAAW,OAAjB,UACE,eAAC,MAAD,UAAO9R,EAAUd,OACjB,gBAAC,MAAD,CAAM2S,GAAG,MAAT,cAAiB7R,EAAU5H,OAA3B,aAIN,gBAAC,MAAD,CAAMygB,WAAY,IAAlB,cAAyBzN,GAAapL,EAAUiB,SAAU,CAAEsK,SAAU,gBACtE,eAAC,MAAD,CAAMsN,WAAY,IAAlB,SACE,eAAC,GAAD,CAAS/K,MAAO9N,EAAUoB,eAAgByX,WAAY,QAExD,gBAAC,MAAD,CAAMA,WAAY,IAAlB,cAAyBzN,GAAapL,EAAU5O,cAChD,gBAAC,MAAD,CAAMynB,WAAY,IAAlB,cAAyBzN,GAAapL,EAAU1O,uBAMlDwnB,GACE,OADFA,GAEO,YAFPA,GAGI,SAHJA,GAIM,WAJNA,GAKY,iBA6JHC,GApJV,SAAC,GAA0C,IAAxClR,EAAuC,EAAvCA,WAAuC,IAA3BmR,gBAA2B,MAL7B,GAK6B,EAC7C,EAAkCtkB,mBAASokB,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0CxkB,oBAAkB,GAA5D,mBAAOZ,EAAP,KAAsBqlB,EAAtB,KAEQ1X,EAAM4M,eAAN5M,EAER,EAAwB/M,mBAAS,GAAjC,mBAAO0kB,EAAP,KAAaC,EAAb,KACA,EAA8B3kB,mBAAS,GAAvC,mBAAO4kB,EAAP,KAAgBC,EAAhB,KACArkB,qBAAU,WACR,IAAIskB,EAAa,EACb3R,IACEA,EAAWtV,OAASymB,IAAa,IACnCQ,EAAa,GAEfD,EAAWzB,KAAK2B,MAAM5R,EAAWtV,OAASymB,GAAYQ,MAEvD,CAACR,EAAUnR,IAEd,IAAM6R,EAAelT,mBAAQ,WAC3B,OAAOqB,EACHA,EACGrT,MAAK,SAACvC,EAAGgC,GACR,OAAIhC,GAAKgC,EACAhC,EAAEgnB,GAAgChlB,EAAEglB,GACZ,GAA1BnlB,GAAiB,EAAI,IACM,GAA3BA,GAAiB,EAAI,IAEpB,KAETrB,MAAMumB,GAAYI,EAAO,GAAIA,EAAOJ,GACvC,KACH,CAACnR,EAAYmR,EAAUI,EAAMtlB,EAAemlB,IAEzCU,EAAa3U,uBACjB,SAAC4U,GACCV,EAAaU,GACbT,EAAiBF,IAAcW,IAAmB9lB,KAEpD,CAACA,EAAemlB,IAGZY,EAAQ7U,uBACZ,SAAC8U,GAEC,OAAOb,IAAca,EADGhmB,EAAsB,SAAN,SACM,KAEhD,CAACA,EAAemlB,IAGlB,OAAKpR,EAKH,gBAACqQ,GAAD,WACE,gBAAC,GAAD,WACE,eAAC,MAAD,CAAM3L,MAAM,YAAYqF,SAAS,OAAOF,MAAI,EAA5C,eAGA,gBAACsG,GAAD,CACEzL,MAAM,YACNqF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAMkI,EAAWb,KAC1BiB,cAAc,YALhB,UAOGtY,EAAE,QAPL,IAOeoY,EAAMf,OAErB,gBAACd,GAAD,CACEzL,MAAM,YACNqF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAMkI,EAAWb,KAC1BiB,cAAc,YALhB,UAOGtY,EAAE,SAPL,IAOgBoY,EAAMf,OAEtB,gBAACd,GAAD,CACEzL,MAAM,YACNqF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAMkI,EAAWb,KAC1BiB,cAAc,YALhB,UAOGtY,EAAE,gBAPL,IAOuBoY,EAAMf,OAE7B,gBAACd,GAAD,CACEzL,MAAM,YACNqF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAMkI,EAAWb,KAC1BiB,cAAc,YALhB,UAOGtY,EAAE,cAPL,IAOqBoY,EAAMf,OAE3B,gBAACd,GAAD,CACEzL,MAAM,YACNqF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAMkI,EAAWb,KAC1BiB,cAAc,YALhB,UAOGtY,EAAE,aAPL,IAOoBoY,EAAMf,UAI5B,eAAC,GAAD,IACCY,EAAannB,OAAS,EACrB,uCACGmnB,EAAajmB,KAAI,SAACiC,EAAMqO,GACvB,OAAIrO,EAEA,gBAAC,IAAMskB,SAAP,WACE,eAAC,GAAD,CAASrB,MAtHT,IAsHiBS,EAAO,GAAiBrV,EAAG/D,UAAWtK,IACvD,eAAC,GAAD,MAFmBA,EAAKwE,SAMvB,QAET,gBAACke,GAAD,WACE,eAACC,GAAD,CACE5G,QAAS,WACP4H,EAAiB,IAATD,EAAaA,EAAOA,EAAO,IAFvC,SAKE,eAAC,KAAD,CAAe7M,MAAgB,IAAT6M,EAAa,eAAiB,cAEtD,eAAC,MAAD,UAAO3X,EAAE,2BAA4B,CAAE2X,OAAME,cAC7C,eAACjB,GAAD,CACE5G,QAAS,WACP4H,EAAQD,IAASE,EAAUF,EAAOA,EAAO,IAF7C,SAKE,eAAC,KAAD,CAAkB7M,MAAO6M,IAASE,EAAU,eAAiB,oBAKnE,uCACE,eAAC,GAAD,IACA,eAAC,KAAD,UA3FC,eAAC,MAAD,KCnKLlM,GAAiB/C,KAAOW,IAAV,usBA+BdsN,GAAcjO,aAAOgJ,KAAPhJ,CAAH,kHAQXyO,GACO,YADPA,GAEI,SAFJA,GAGW,gBAHXA,GAIO,YAJPA,GAKK,UAGLmB,GAAuB,kBAC3B,gBAAC,GAAD,WACE,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,QAIEzB,GAAwB,kBAC5B,uCACE,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,QAIEE,GAAU,SAAC,GAAgE,IAA9Drb,EAA6D,EAA7DA,SAAUsb,EAAmD,EAAnDA,MAC3B,OACE,eAAC,GAAD,CAAa3gB,GAAE,qBAAgBqF,EAASnD,SAAxC,SACE,gBAAC,GAAD,WACE,eAAC,MAAD,UAAOye,EAAQ,IACf,gBAAC,KAAD,WACE,eAAC,GAAD,CAAoBzN,SAAU7N,EAASlF,OAAO+B,QAASiR,SAAU9N,EAAS/E,OAAO4B,UACjF,gBAAC,MAAD,CAAM2X,GAAG,MAAT,UACGxU,EAASlF,OAAOC,OADnB,IAC4BiF,EAAS/E,OAAOF,aAG9C,gBAAC,MAAD,eAAQgT,GAAa/N,EAASjM,cAC9B,gBAAC,MAAD,eAAQga,GAAa/N,EAAShM,kBAC9B,gBAAC,MAAD,eAAQ+Z,GAAa/N,EAAS3L,cAC9B,gBAAC,MAAD,WAAO0Z,GAAa/N,EAAS9L,SAA7B,OACA,gBAAC,MAAD,eAAQ6Z,GAAa/N,EAAS/L,uBAgKvB4oB,GArJ6B,SAAC,GAA4B,IAA1B5S,EAAyB,EAAzBA,UAAWoB,EAAc,EAAdA,QAExD,EAAkChU,mBAASokB,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0CxkB,oBAAkB,GAA5D,mBAAOZ,EAAP,KAAsBqlB,EAAtB,KACQ1X,EAAM4M,eAAN5M,EAGR,EAAwB/M,mBAAS,GAAjC,mBAAO0kB,EAAP,KAAaC,EAAb,KACA,EAA8B3kB,mBAAS,GAAvC,mBAAO4kB,EAAP,KAAgBC,EAAhB,KACArkB,qBAAU,WACR,IAAIskB,EAAa,EACblS,EAAU/U,OAAS/B,IAA8B,IACnDgpB,EAAa,GAEfD,EAAWzB,KAAK2B,MAAMnS,EAAU/U,OAAS/B,GAA6BgpB,KACrE,CAAClS,IAEJ,IAAM6S,EAAc3T,mBAAQ,WAC1B,OAAOc,EACHA,EACG9S,MAAK,SAACvC,EAAGgC,GACR,OAAIhC,GAAKgC,EACAhC,EAAEgnB,GAA+BhlB,EAAEglB,GACX,GAA1BnlB,GAAiB,EAAI,IACM,GAA3BA,GAAiB,EAAI,IAEpB,KAETrB,MAAMjC,GAA6B4oB,EAAO,GAAIA,EAAO5oB,GACxD,KACH,CAAC4oB,EAAM9R,EAAWxT,EAAemlB,IAE9BU,EAAa3U,uBACjB,SAAC4U,GACCV,EAAaU,GACbT,EAAiBF,IAAcW,IAAmB9lB,KAEpD,CAACA,EAAemlB,IAGZY,EAAQ7U,uBACZ,SAAC8U,GAEC,OAAOb,IAAca,EADGhmB,EAAsB,SAAN,SACM,KAEhD,CAACA,EAAemlB,IAGlB,OACE,gBAACf,GAAD,WACE,gBAAC,GAAD,WACE,eAAC,MAAD,CAAM3L,MAAM,YAAYqF,SAAS,OAAOF,MAAI,EAA5C,eAGA,eAAC,MAAD,CAAMnF,MAAM,YAAYqF,SAAS,OAAOF,MAAI,EAACqI,cAAc,YAA3D,SACGtY,EAAE,UAEL,gBAACuW,GAAD,CACEzL,MAAM,YACNqF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAMkI,EAAWb,KAC1BiB,cAAc,YALhB,UAOGtY,EAAE,cAPL,IAOqBoY,EAAMf,OAE3B,gBAACd,GAAD,CACEzL,MAAM,YACNqF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAMkI,EAAWb,KAC1BiB,cAAc,YALhB,UAOGtY,EAAE,aAPL,IAOoBoY,EAAMf,OAE1B,gBAACd,GAAD,CACEzL,MAAM,YACNqF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAMkI,EAAWb,KAC1BiB,cAAc,YALhB,UAOGtY,EAAE,sBAPL,IAO6BoY,EAAMf,OAEnC,gBAACd,GAAD,CACEzL,MAAM,YACNqF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAMkI,EAAWb,KAC1BiB,cAAc,YALhB,UAOGtY,EAAE,iBAPL,IAOwBoY,EAAMf,OAE9B,gBAACd,GAAD,CACEzL,MAAM,YACNqF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAMkI,EAAWb,KAC1BiB,cAAc,YALhB,UAOGtY,EAAE,aAPL,IAOoBoY,EAAMf,UAG5B,eAAC,GAAD,IACCqB,EAAY5nB,OAAS,EACpB,uCACG4nB,EAAY1mB,KAAI,SAAC4J,EAAU0G,GAC1B,OAAI1G,EAEA,gBAAC,IAAM2c,SAAP,WACE,eAAC,GAAD,CAASrB,OAAQS,EAAO,GAAK5oB,EAA4BuT,EAAG1G,SAAUA,IACtE,eAAC,GAAD,MAFmBA,EAASnD,SAM3B,QAERwO,GAAW,eAAC,GAAD,IACZ,gBAAC0P,GAAD,WACE,eAACC,GAAD,CACE5G,QAAS,WACP4H,EAAiB,IAATD,EAAaA,EAAOA,EAAO,IAFvC,SAKE,eAAC,KAAD,CAAe7M,MAAgB,IAAT6M,EAAa,eAAiB,cAGtD,eAAC,MAAD,UAAO3X,EAAE,2BAA4B,CAAE2X,OAAME,cAE7C,eAACjB,GAAD,CACE5G,QAAS,WACP4H,EAAQD,IAASE,EAAUF,EAAOA,EAAO,IAF7C,SAKE,eAAC,KAAD,CAAkB7M,MAAO6M,IAASE,EAAU,eAAiB,oBAKnE,uCACE,eAAC,GAAD,IAEA,eAAC,KAAD,W,sBC9OJc,GAAY,SAAC,GAYZ,IAXL1F,EAWI,EAXJA,EACA2F,EAUI,EAVJA,EACA/G,EASI,EATJA,MACAG,EAQI,EARJA,OACAtH,EAOI,EAPJA,KAQA,OACE,6BACE,uBAAMuI,EAAGA,EAAG2F,EAAGA,EAAGlO,KAAMA,EAAMmH,MAAOA,EAAOG,OAAQA,EAAQ6G,GAAG,SAO/DpF,GAAe,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aAM9C,OALAngB,qBAAU,WACRkgB,EAAcD,EAAQrH,OACtBuH,EAAaxJ,mBAAOsJ,EAAQ5R,KAAM,kBACjC,CAAC4R,EAAQrH,MAAOqH,EAAQ5R,KAAM6R,EAAeC,IAEzC,MA6DMkF,GA1DD,SAAC,GAA2D,IAAzD7kB,EAAwD,EAAxDA,KAAM0f,EAAkD,EAAlDA,cAAeC,EAAmC,EAAnCA,aAC5B9K,EAAU6B,eAAV7B,MACR,OAAK7U,GAAwB,IAAhBA,EAAKnD,OAIhB,eAACgjB,GAAA,EAAD,CAAqBjC,MAAM,OAAOG,OAAO,OAAzC,SACE,gBAAC+G,GAAA,EAAD,CACE9kB,KAAMA,EACN+f,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,GAEVC,aAAc,WACZT,OAAapgB,GACbmgB,OAAcngB,IAVlB,UAaE,eAACqhB,GAAA,EAAD,CACEC,QAAQ,OACRC,UAAU,EACVC,UAAU,EACVC,cAAe,SAACnT,GAAD,OAAUsI,mBAAOtI,EAAM,OACtCoT,WAAY,KAEd,eAACC,GAAA,EAAD,CACEL,QAAQ,QACRM,UAAW,EACX3D,MAAM,SACNsD,UAAU,EACVC,UAAU,EACVlK,MAAOhC,EAAMC,OAAO0M,WACpBtF,SAAS,OACT8E,cAAe,SAACI,GAAD,iBAAa1L,GAAa0L,KACzCC,YAAY,QACZC,KAAM,CAAEC,GAAI,GAAI9K,KAAM5B,EAAMC,OAAO0M,cAErC,eAACC,GAAA,EAAD,CACEC,OAAQ,CAAEjL,KAAM5B,EAAMC,OAAOiQ,oBAC7BpD,aAAc,CAAEC,QAAS,QACzBC,UAAW,SAACC,EAActY,EAAMsU,GAArB,OACT,eAAC,GAAD,CAAc2B,QAAS3B,EAAM2B,QAASC,cAAeA,EAAeC,aAAcA,OAGtF,eAACqF,GAAA,EAAD,CACEnE,QAAQ,QACRpK,KAAM5B,EAAMC,OAAOmD,QACnBgN,MAAO,SAACnH,GAAD,OACL,eAAC,GAAD,CAAWC,OAAQD,EAAMC,OAAQH,MAAOE,EAAMF,MAAOoB,EAAGlB,EAAMkB,EAAG2F,EAAG7G,EAAM6G,EAAGlO,KAAM5B,EAAMC,OAAOmD,kBA/CjG,eAAC,GAAD,K,WC1CIiN,GAJM,SAAC1gB,GAAqD,IAApC2gB,EAAmC,uDAArB,EAAGC,EAAkB,uDAAN,EAClE,MAAM,GAAN,OAAU5gB,EAAQ6gB,UAAU,EAAGF,GAA/B,cAAiD3gB,EAAQ6gB,UAAU7gB,EAAQ3H,OAASuoB,KCUhFE,GAAU3Q,KAAOW,IAAV,8CAIPoC,GAAiB/C,KAAOW,IAAV,42BAyCdiQ,GAAa5Q,aAAOuI,KAAPvI,CAAH,qHAOVyO,GACO,YADPA,GAEO,YAFPA,GAGI,SAHJA,GAIU,eAJVA,GAKU,eAGVN,GAAwB,WAC5B,IAAMC,EACJ,gBAAC,GAAD,WACE,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,OAGJ,OACE,uCACGA,EACAA,EACAA,MAKDC,GAAkD,SAAC,GAAqB,IAAnBwC,EAAkB,EAAlBA,YACjDzZ,EAAM4M,eAAN5M,EACF0Z,EAAOrD,KAAKC,IAAImD,EAAYxiB,cAC5B0iB,EAAOtD,KAAKC,IAAImD,EAAYtiB,cAC5ByiB,EAAoBH,EAAYxiB,aAAe,EAAIwiB,EAAYjjB,aAAeijB,EAAY7iB,aAC1FijB,EAAmBJ,EAAYtiB,aAAe,EAAIsiB,EAAYjjB,aAAeijB,EAAY7iB,aAE/F,OACE,gBAAC,GAAD,WACE,eAAC,KAAD,CAAckjB,KAAMC,aAAeN,EAAYrjB,KAAM,eAArD,SACE,eAAC,MAAD,UACGqjB,EAAYvjB,OAASxH,EAAgByH,KAClC6J,EAAE,4BAA6B,CAAEtJ,OAAQ+iB,EAAYjjB,aAAcK,OAAQ4iB,EAAY7iB,eACvF6iB,EAAYvjB,OAASxH,EAAgBgJ,KACrCsI,EAAE,6BAA8B,CAAEtJ,OAAQmjB,EAAkBhjB,OAAQ+iB,IACpE5Z,EAAE,+BAAgC,CAAEtJ,OAAQ+iB,EAAYjjB,aAAcK,OAAQ4iB,EAAY7iB,mBAGlG,gBAAC,MAAD,eAAQ+S,GAAa8P,EAAYziB,cACjC,eAAC,MAAD,UACE,eAAC,MAAD,oBAAU2S,GAAa+P,GAAvB,YAAgCD,EAAYjjB,kBAE9C,eAAC,MAAD,UACE,eAAC,MAAD,oBAAUmT,GAAagQ,GAAvB,YAAgCF,EAAY7iB,kBAE9C,eAAC,KAAD,CAAckjB,KAAMC,aAAeN,EAAYnjB,OAAQ,WAAvD,SACG6iB,GAAaM,EAAYnjB,UAE5B,eAAC,MAAD,UAAO0jB,aAAgE,IAAtClnB,SAAS2mB,EAAYxnB,UAAW,WA+MxDgoB,GAxMV,SAAC,GAAsB,IAApBpW,EAAmB,EAAnBA,aACN,EAAkC5Q,mBAASokB,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0CxkB,oBAAkB,GAA5D,mBAAOZ,EAAP,KAAsBqlB,EAAtB,KAEQ1X,EAAM4M,eAAN5M,EAER,EAAwB/M,mBAAS,GAAjC,mBAAO0kB,EAAP,KAAaC,EAAb,KACA,EAA8B3kB,mBAAS,GAAvC,mBAAO4kB,EAAP,KAAgBC,EAAhB,KAEA,EAAgC7kB,wBAAsCO,GAAtE,mBAAO0mB,EAAP,KAAiBC,EAAjB,KAEMC,EAAqBrV,mBAAQ,WACjC,OAAOlB,EACHA,EACG7S,QACA+B,MAAK,SAACvC,EAAGgC,GACR,OAAIhC,GAAKgC,EACAhC,EAAEgnB,GAAkChlB,EAAEglB,GACd,GAA1BnlB,GAAiB,EAAI,IACM,GAA3BA,GAAiB,EAAI,IAEpB,KAETkS,QAAO,SAAC0O,GACP,YAAoBzf,IAAb0mB,GAA0BjH,EAAE/c,OAASgkB,KAE7ClpB,MAAMjC,GAA6B4oB,EAAO,GAAIA,EAAO5oB,GACxD,KACH,CAAC8U,EAAc8T,EAAMH,EAAWnlB,EAAe6nB,IAGlDzmB,qBAAU,WACR,GAAIoQ,EAAc,CAChB,IAAMwW,EAAuBxW,EAAaU,QAAO,SAAC+V,GAChD,YAAoB9mB,IAAb0mB,GAA0BI,EAAGpkB,OAASgkB,KAE3CG,EAAqBvpB,OAAS/B,IAA8B,EAC9D+oB,EAAWzB,KAAK2B,MAAMqC,EAAqBvpB,OAAS/B,IAEpD+oB,EAAWzB,KAAK2B,MAAMqC,EAAqBvpB,OAAS/B,GAA6B,MAGpF,CAAC8U,EAAcqW,IAElB,IAAMK,EAAehX,uBACnB,SAACiX,GACKA,IAAcN,IAChBC,EAAYK,GACZ5C,EAAQ,MAGZ,CAACsC,IAGGhC,EAAa3U,uBACjB,SAAC4U,GACCV,EAAaU,GACbT,EAAiBF,IAAcW,IAAmB9lB,KAEpD,CAACA,EAAemlB,IAGZY,EAAQ7U,uBACZ,SAAC8U,GAEC,OAAOb,IAAca,EADGhmB,EAAsB,SAAN,SACM,KAEhD,CAACA,EAAemlB,IAGlB,OACE,gBAAC+B,GAAD,WACE,gBAAC,KAAD,CAAMxJ,GAAG,OAAT,UACE,gBAAC,KAAD,CAAM0K,cAAe,CAAC,SAAU,OAAhC,UACE,gBAACjB,GAAD,CAAYxJ,QAAS,kBAAMuK,OAAa/mB,IAAxC,UACE,eAAC,MAAD,CAAOmc,SAAU,kBAAM,MAAM8B,MAAM,KAAKiJ,aAAsBlnB,IAAb0mB,IACjD,eAAC,MAAD,CAAM9J,GAAG,MAAT,SAAgBpQ,EAAE,YAGpB,gBAACwZ,GAAD,CAAYxJ,QAAS,kBAAMuK,EAAa7rB,EAAgBgJ,OAAxD,UACE,eAAC,MAAD,CAAOiY,SAAU,kBAAM,MAAM8B,MAAM,KAAKiJ,QAASR,IAAaxrB,EAAgBgJ,OAC9E,eAAC,MAAD,CAAM0Y,GAAG,MAAT,SAAgBpQ,EAAE,iBAItB,gBAAC,KAAD,CAAMya,cAAe,CAAC,SAAU,OAAhC,UACE,gBAACjB,GAAD,CAAYxJ,QAAS,kBAAMuK,EAAa7rB,EAAgByH,OAAxD,UACE,eAAC,MAAD,CAAOwZ,SAAU,kBAAM,MAAM8B,MAAM,KAAKiJ,QAASR,IAAaxrB,EAAgByH,OAC9E,eAAC,MAAD,CAAMia,GAAG,MAAT,SAAgBpQ,EAAE,aAGpB,gBAACwZ,GAAD,CAAYxJ,QAAS,kBAAMuK,EAAa7rB,EAAgB6I,OAAxD,UACE,eAAC,MAAD,CAAOoY,SAAU,kBAAM,MAAM8B,MAAM,KAAKiJ,QAASR,IAAaxrB,EAAgB6I,OAC9E,eAAC,MAAD,CAAM6Y,GAAG,MAAT,SAAgBpQ,EAAE,sBAIxB,gBAACyW,GAAD,WACE,gBAAC,GAAD,WACE,eAAC,MAAD,CAAM3L,MAAM,YAAYqF,SAAS,OAAOF,MAAI,EAACqI,cAAc,YAA3D,SACGtY,EAAE,YAEL,gBAACuW,GAAD,CACEzL,MAAM,YACNqF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAMkI,EAAWb,KAC1BiB,cAAc,YALhB,UAOGtY,EAAE,eAPL,IAOsBoY,EAAMf,OAE5B,gBAACd,GAAD,CACEzL,MAAM,YACNqF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAMkI,EAAWb,KAC1BiB,cAAc,YALhB,UAOGtY,EAAE,gBAPL,IAOuBoY,EAAMf,OAE7B,gBAACd,GAAD,CACEzL,MAAM,YACNqF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAMkI,EAAWb,KAC1BiB,cAAc,YALhB,UAOGtY,EAAE,gBAPL,IAOuBoY,EAAMf,OAE7B,gBAACd,GAAD,CACEzL,MAAM,YACNqF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAMkI,EAAWb,KAC1BiB,cAAc,YALhB,UAOGtY,EAAE,WAPL,IAOkBoY,EAAMf,OAExB,gBAACd,GAAD,CACEzL,MAAM,YACNqF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAMkI,EAAWb,KAC1BiB,cAAc,YALhB,UAOGtY,EAAE,QAPL,IAOeoY,EAAMf,UAGvB,eAAC,GAAD,IAECxT,EACC,uCACGuW,EAAmBpoB,KAAI,SAACynB,EAAavC,GACpC,OAAIuC,EAGA,eADA,CACC,IAAMlB,SAAP,WACE,eAAC,GAAD,CAASkB,YAAaA,IACtB,eAAC,GAAD,MAFmBvC,GAMlB,QAEsB,IAA9BkD,EAAmBtpB,OAClB,eAAC,KAAD,CAAM6pB,eAAe,SAArB,SACE,eAAC,MAAD,UAAO3a,EAAE,4BAETxM,EACJ,gBAACmjB,GAAD,WACE,eAACC,GAAD,CACE5G,QAAS,WACP4H,EAAiB,IAATD,EAAaA,EAAOA,EAAO,IAFvC,SAKE,eAAC,KAAD,CAAe7M,MAAgB,IAAT6M,EAAa,eAAiB,cAGtD,eAAC,MAAD,UAAO3X,EAAE,2BAA4B,CAAE2X,OAAME,cAC7C,eAACjB,GAAD,CACE5G,QAAS,WACP4H,EAAQD,IAASE,EAAUF,EAAOA,EAAO,IAF7C,SAKE,eAAC,KAAD,CAAkB7M,MAAO6M,IAASE,EAAU,eAAiB,oBAKnE,uCACE,eAAC,GAAD,IAEA,eAAC,KAAD,cC7SC+C,GAAsBhS,aAAOuI,KAAPvI,CAAH,wNAW5B,qBAAGE,MAAkByC,aAAaE,MAwIvBoP,GAnIY,WACzB,IAAQ7a,EAAM4M,eAAN5M,EACR,EAA4C/M,qBAA5C,mBAAO6nB,EAAP,KAAuBC,EAAvB,KACA,EAAoD9nB,qBAApD,mBAAO+nB,EAAP,KAA2BC,EAA3B,KACA,EAAsChoB,qBAAtC,mBAAOioB,EAAP,KAAoBC,EAApB,KACA,EAA8CloB,qBAA9C,mBAAOmoB,EAAP,KAAwBC,EAAxB,KAEA,EAAuBtY,KAAhBhN,EAAP,oBACA,EAAoB0N,KAAbC,EAAP,oBACA,EAAuBE,KAAhBC,EAAP,oBAEMyX,EAAclR,mBAAO,IAAI1Y,KAAQ,eAGvC+B,qBAAU,WACW,MAAfynB,GAAuBnlB,GACzBolB,EAAeplB,EAAapG,aAE7B,CAACoG,EAAcmlB,IAClBznB,qBAAU,WACc,MAAlBqnB,GAA0B/kB,GAC5BglB,EAAkBhlB,EAAalG,gBAEhC,CAACirB,EAAgB/kB,IAEpB,IAAMwlB,EAAyBxW,mBAAQ,WACrC,OAAIrB,EACKA,EAAU1R,KAAI,SAACwpB,GACpB,MAAO,CACL1Z,KAAM2Z,aAAaD,EAAItjB,MACvBmU,MAAOmP,EAAI3rB,iBAIV,KACN,CAAC6T,IAEEgY,EAAsB3W,mBAAQ,WAClC,OAAIrB,EACKA,EAAU1R,KAAI,SAACwpB,GACpB,MAAO,CACL1Z,KAAM2Z,aAAaD,EAAItjB,MACvBmU,MAAOmP,EAAI7rB,cAIV,KACN,CAAC+T,IAEEiY,EAAYlX,KAEZmX,EAAkB7W,mBAAQ,WAC9B,OAAO5T,OAAOsI,OAAOkiB,GAClB3pB,KAAI,SAACgT,GAAD,OAAWA,EAAM/Q,QACrBsQ,QAAO,SAACS,GAAD,OAAWA,OACpB,CAAC2W,IAEEvX,EAAcJ,KACd6B,EAAYd,mBAAQ,WACxB,OAAO5T,OAAOsI,OAAO2K,GAClBpS,KAAI,SAACwS,GAAD,OAAUA,EAAKvQ,QACnBsQ,QAAO,SAACC,GAAD,OAAUA,OACnB,CAACJ,IAEEyX,EAAsB9W,mBAAQ,WAClC,OAAO5T,OAAOsI,OAAO2K,GAAa0X,MAAK,SAACtX,GAAD,OAAWA,EAAKvQ,UACtD,CAACmQ,IAEJ,OACE,gBAAC2X,GAAA,EAAD,WACE,eAAC,KAAD,CAAStK,MAAM,KAAK1B,GAAG,OAAO1Z,GAAG,sBAAjC,SACG2J,EAAE,4BAEL,gBAAC4a,GAAD,WACE,eAAC,KAAD,UACE,gBAAC,KAAD,CAAKlgB,EAAG,CAAC,OAAQ,OAAQ,QAAzB,UACE,eAAC,MAAD,CAAMuV,MAAI,EAACnF,MAAM,YAAjB,SACG9K,EAAE,eAEJ8a,EAAiB,EAChB,gBAAC,MAAD,CAAM7K,MAAI,EAACE,SAAS,OAApB,cACIxG,GAAamR,MAGjB,eAAC,MAAD,CAAUjJ,MAAM,QAAQG,OAAO,SAEjC,eAAC,MAAD,iBAAOgJ,QAAP,IAAOA,IAAsBM,IAC7B,eAAC,KAAD,CAAKtJ,OAAO,QAAZ,SACE,eAAC,GAAD,CACE/d,KAAMsnB,EACN5H,cAAeoH,EACfnH,aAAcqH,WAKtB,eAAC,KAAD,UACE,gBAAC,KAAD,CAAKvgB,EAAG,CAAC,OAAQ,OAAQ,QAAzB,UACE,eAAC,MAAD,CAAMuV,MAAI,EAACnF,MAAM,YAAjB,SACG9K,EAAE,gBAEJkb,EAAc,EACb,gBAAC,MAAD,CAAMjL,MAAI,EAACE,SAAS,OAApB,cACIxG,GAAauR,MAGjB,eAAC,MAAD,CAAUrJ,MAAM,QAAQG,OAAO,SAEjC,eAAC,MAAD,iBAAOoJ,QAAP,IAAOA,IAAmBE,IAC1B,eAAC,KAAD,CAAKtJ,OAAO,QAAZ,SACE,eAAC,GAAD,CAAU/d,KAAMynB,EAAqB/H,cAAewH,EAAgBvH,aAAcyH,cAK1F,eAAC,KAAD,CAAS5J,MAAM,KAAKuK,GAAG,OAAOjM,GAAG,OAAjC,SACG/P,EAAE,gBAEL,eAAC,GAAD,CAAYoG,WAAYwV,IACxB,eAAC,KAAD,CAASnK,MAAM,KAAKuK,GAAG,OAAOjM,GAAG,OAAjC,SACG/P,EAAE,eAEL,eAAC,GAAD,CAAW6F,UAAWA,EAAWoB,QAAS4U,IAC1C,eAAC,KAAD,CAASpK,MAAM,KAAKuK,GAAG,OAAOjM,GAAG,OAAjC,SACG/P,EAAE,kBAEL,eAAC,GAAD,CAAkB6D,aAAcA,QCtHvBoY,GApCiB,WAC9B,IAAQjc,EAAM4M,eAAN5M,EAGFoE,EAAcJ,KACd6B,EAAYd,mBAAQ,WACxB,OAAO5T,OAAOsI,OAAO2K,GAClBpS,KAAI,SAACwS,GAAD,OAAUA,EAAKvQ,QACnBsQ,QAAO,SAACC,GAAD,OAAUA,OACnB,CAACJ,IAEJ,EAAqBsK,eAAdC,EAAP,oBACMuN,EAAiBjgB,GAAa0S,GAEpC,OACE,gBAACoN,GAAA,EAAD,WACE,eAAC,KAAD,CAAStK,MAAM,KAAK1B,GAAG,OAAvB,SACG/P,EAAE,oBAEL,eAAC,KAAD,UACGkc,EAAeprB,OAAS,EACvB,eAAC,GAAD,CAAW+U,UAAWqW,IAEtB,eAAC,MAAD,CAAMC,GAAG,OAAOC,GAAG,OAAnB,SACGpc,EAAE,oCAIT,eAAC,KAAD,CAASyR,MAAM,KAAKuK,GAAG,OAAOjM,GAAG,OAAO1Z,GAAG,mBAA3C,SACG2J,EAAE,eAEL,eAAC,GAAD,CAAW6F,UAAWA,Q,iEChCtBwW,GAAeC,KAAKC,KAAQC,SAiE3B,I,YC7DFC,GD6DQC,GAAmB,WAC9B,IACMC,EADcC,eAAZC,SAC2BN,KAAQC,QAE3C,OA/Da,SAAsBM,GACnC,IAAQD,EAAYD,eAAZC,QACFE,EAAUC,aAAgBF,EAAUD,GACpCI,EAA6DlY,mBACjE,iBAAM,CACJ,CACE8X,GAAWE,GAAWG,aAAeC,KAAKN,GAAUE,QAAWvpB,EAAYspB,EAC3ED,EAAUM,KAAKN,QAAWrpB,GAE5B,EAAQ,OAAPupB,QAAO,IAAPA,OAAA,EAAAA,EAASK,OAAOf,UAAgB7oB,EAAYupB,EAASF,IAAYN,KAAQC,QAAUH,QAAe7oB,GACnG,CAACqpB,EAAUM,KAAKN,QAAWrpB,EAAWqpB,IAAYN,KAAQC,QAAUH,QAAe7oB,MAErF,CAACqpB,EAASC,EAAUC,IAEtB,EAA8FM,aAASJ,GAAvG,yCAAQK,EAAR,KAAsBC,EAAtB,2BAAiCC,EAAjC,KAAgDC,EAAhD,2BAA4DC,EAA5D,KAA8EC,EAA9E,KAEA,OAAO5Y,mBAAQ,WACb,GAAK+X,GAAaC,GAAYF,EAI9B,GAAIE,EAAQK,OAAOD,KAAKN,KACtB,GAAIY,EAAU,CACZ,IAAMG,EAAQH,EAASI,QAAQV,KAAKN,IACpC,OAAO,IAAIiB,KAAMhB,EAAUT,GAAcuB,EAAMG,YAAaH,EAAMI,gBAHtE,CAQA,GAAIjB,EAAQK,OAAOf,IACjB,OAAO,IAAIyB,KAAMzB,GAAcA,GAAc,IAAK,KAGpD,IAAM4B,EAAgB,OAAGV,QAAH,IAAGA,OAAH,EAAGA,EAASW,UAAUf,KAAKN,IAC3CsB,EACJF,GAAoBN,EAAcA,EAAYE,QAAQV,KAAKN,IAAUuB,MAAMH,GAAkBI,IAAMC,KAAKC,OAAO,GAIjH,GACEf,IAAkBgB,KAAUC,QAC5BhB,GACAA,EAASS,UAAU7B,IAAcqC,YAAYP,GAC7C,CACA,IAAMP,EAAQH,EAASI,QAAQd,GAC/B,OAAO,IAAIe,KAAMhB,EAAUT,GAAcuB,EAAMG,YAAaH,EAAMI,WAEpE,GAAIV,IAAiBkB,KAAUC,QAAUlB,GAAWG,IAAqBc,KAAUC,QAAUd,GACvFA,EAAYO,UAAU7B,IAAcqC,YAAY,MAAQnB,EAAQW,UAAUf,KAAKN,IAAU6B,YAAY,KAAM,CAC7G,IAAMC,EAAehB,EAAYE,QAAQxB,IACnCuC,EAAmBrB,EAAQM,QAAQV,KAAKN,IACxCgC,EAAYF,EAAaG,SAASF,GAAkBG,SAC1D,OAAO,IAAIjB,KAAMhB,EAAUT,GAAcwC,EAAUd,YAAac,EAAUb,eAI7E,CAACnB,EAASC,EAAUS,EAASD,EAAcK,EAAaD,EAAkBD,EAAUD,EAAeT,IAM/EiC,CAAaC,KAAMtC,K,mCElEtCuC,GAAatW,aAAOoC,KAAPpC,CAAH,sPAKZ,qBAAGE,MAAkByC,aAAaC,MAKlC,qBAAG1C,MAAkByC,aAAa4T,MAMzBC,GAA0C,SAAC,GAAgB,IAAdzoB,EAAa,EAAbA,OAChDqJ,EAAM4M,eAAN5M,EACAqf,EAAaC,cAAbD,SACFE,EAAe7C,KACf8C,EAAsBD,EAAY,WAAOA,EAAarmB,QAAQ,IAAO,MAErEumB,EAAWC,aAAcL,EAAUrf,IAAM,GAC/C,6BAA2C2f,MAAiBF,GAApDG,EAAR,EAAQA,MAAOC,EAAf,EAAeA,YAAaC,EAA5B,EAA4BA,MACxBC,EAAYP,EAAsB,CAACI,EAAOJ,GAAqBrkB,KAAK,OAASykB,EAKjF,OAJIjpB,IACFopB,EAAY,CAACppB,EAAQipB,GAAOzkB,KAAK,QAIjC,gBAAC,KAAD,WACE,iCAAQ4kB,IACR,uBAAMC,SAAS,WAAWC,QAASL,IACnC,uBAAMI,SAAS,iBAAiBC,QAASJ,IACzC,uBAAMG,SAAS,WAAWC,QAASH,QAkB1BI,GAToB,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,SAAUxpB,EAAuB,EAAvBA,OAAWob,EAAY,mBACrE,OACE,uCACE,eAAC,GAAD,CAAUpb,OAAQA,IAClB,eAACuoB,GAAD,2BAAgBnN,GAAhB,aAAwBoO,S,6CCwFfC,GAlIK,SAAC,GAA2D,IAAzDnsB,EAAwD,EAAxDA,KAAMkZ,EAAkD,EAAlDA,SAAUkT,EAAwC,EAAxCA,SAAa9X,EAA2B,mBACrEO,EAAU6B,eAAV7B,MACFwX,EAAWxT,iBAAuB,MACxC,EAAiC7Z,qBAAjC,mBAAOstB,EAAP,KAAqBC,EAArB,KAEMC,EAAeld,uBAAY,WAAO,IAAD,EACjCgd,IAAY,OAAID,QAAJ,IAAIA,GAAJ,UAAIA,EAAUrjB,eAAd,aAAI,EAAmByjB,iBACrCH,EAAaI,OAAOL,EAASrjB,QAAQyjB,cAAcE,YAAc,GAf3C,KAgBtBL,EAAaM,YAAYC,aACzBP,EAAaM,YAAYE,iBAAiB,GAAG,MAE9C,CAACR,EAAcD,IAGZU,EAA6B,kBAAXC,OA4GxB,OA3GAxtB,qBAAU,WACR,OAAKutB,GAGLC,OAAO/S,iBAAiB,SAAUuS,GAC3B,kBAAMQ,OAAO3S,oBAAoB,SAAUmS,KAHzC,OAIR,CAACO,EAAUV,EAAUG,IAGxBhtB,qBAAU,WAAO,IAAD,EACd,IAAK8sB,GAAgBtsB,IAAS,OAACqsB,QAAD,IAACA,GAAD,UAACA,EAAUrjB,eAAX,aAAC,EAAmByjB,eAAe,CAC/D,IAAMQ,EAAQC,aAAYb,EAASrjB,QAAS,CAC1C+U,OAnCoB,IAoCpBH,MAAOyO,EAASrjB,QAAQyjB,cAAcE,YAAc,GACpDQ,OAAQ,CACNC,gBAAiB,cACjBC,UAAWxY,EAAMC,OAAO0M,WACxB8L,WAAY,oBACZpR,SAAU,IAEZqR,gBAAiB,CACfC,aAAc,CACZxN,IAAK,GACLG,OAAQ,IAEVsN,eAAe,GAEjBb,UAAW,CACTa,eAAe,EACfC,gBAAgB,EAChBC,kBAAmB,SAACC,GAClB,OAAOzX,mBAAkB,IAAXyX,EAAiB,kBAGnCC,UAAW,CACTC,SAAS,GAEXC,KAAM,CACJC,UAAW,CACTF,SAAS,GAEXG,UAAW,CACTH,SAAS,IAGbI,UAAW,CACTC,SAAU,CACRL,SAAS,EACTM,cAAc,GAEhBC,KAAM,EACNC,SAAU,CACRR,SAAS,EACTM,cAAc,EACdjU,MAAO,EACPyD,MAAO,EACP/G,MAAOhC,EAAMC,OAAO0M,WACpB+M,qBAAsB1Z,EAAMC,OAAOmD,YAKzCgV,EAAML,YAAYC,aAClBN,EAASU,MAEV,CAACX,EAActsB,EAAMkZ,EAAUrE,IAElCrV,qBAAU,WACR,GAAI8sB,GAAgBtsB,EAAM,CACxB,IAAMwuB,EAASlC,EAAamC,qBAAqB,CAC/CC,QAAS7Z,EAAMC,OAAO6Z,QACtBC,UAAW/Z,EAAMC,OAAO+Z,QACxBC,gBAAiBja,EAAMC,OAAO+Z,QAC9BE,cAAela,EAAMC,OAAO6Z,QAC5BK,cAAena,EAAMC,OAAO+Z,QAC5BI,YAAapa,EAAMC,OAAO6Z,UAG5BH,EAAOU,QAAQlvB,GAGfssB,EAAa6C,wBAAuB,SAACC,GACnC,IACU,OAAR/C,QAAQ,IAARA,OAAA,EAAAA,EAAUrjB,gBACCzJ,IAAV6vB,QACgB7vB,IAAf6vB,EAAMvhB,MACLuhB,GAASA,EAAMC,OAASD,EAAMC,MAAMrQ,EAAI,GACxCoQ,GAASA,EAAMC,OAASD,EAAMC,MAAMrQ,EAAIqN,EAASrjB,QAAQ2jB,aACzDyC,GAASA,EAAMC,OAASD,EAAMC,MAAM1K,EAAI,GACxCyK,GAASA,EAAMC,OAASD,EAAMC,MAAM1K,EAhHrB,KAmHdzL,GAAUA,OAAS3Z,GACnB6sB,GAAUA,OAAS7sB,QAClB,GAAIivB,GAAUY,EAAO,CAC1B,IAAMpxB,EAAYoxB,EAAMvhB,KAClBvF,EAAM,IAAI7K,KAAiB,IAAZO,GACfsxB,EAAM,IAAI7xB,KAAK6K,EAAIinB,UAAsC,IAA1BjnB,EAAIknB,qBACnC3hB,EAAI,UAAMsI,mBAAOmZ,EAAK,sBAAlB,UACJtkB,EAASokB,EAAMK,aAAaC,IAAIlB,GAClCtV,GAAUA,EAAQ,OAAClO,QAAD,IAACA,OAAD,EAACA,EAAQsD,MAC3B8d,GAAUA,EAASve,UAI5B,CAACye,EAActsB,EAAMkZ,EAAUkT,EAAUvX,IAG1C,wCACIyX,GAAgB,eAAC,GAAD,IAClB,kCAAK1Q,IAAKyQ,EAAUjqB,GAAG,gBAAmBkS,QCvI1CgR,GAAU3Q,aAAOuI,KAAPvI,CAAH,+LAUPgb,GAAQhb,aAAOuI,KAAPvI,CAAH,2GAEW,qBAAGE,MAAkBC,OAAO8a,SASrCC,GAAYlb,KAAOmb,OAAV,mSAYX,gBAAGjb,EAAH,EAAGA,MAAH,SAAUkb,SAA2Blb,EAAMC,OAAOE,KAAOH,EAAMC,OAAO0M,cAC3D,gBAAG3M,EAAH,EAAGA,MAAH,SAAUkb,SAA2Blb,EAAMqD,KAAKnD,WAAaF,EAAMC,OAAO8a,SAOnFI,GAAgD,SAAC,GAAkB,IAAhB9D,EAAe,EAAfA,SAC9D,OACE,eAAC,GAAD,CAASzlB,EAAG,CAAC,QAAS,UAAtB,SACE,eAACkpB,GAAD,UAAQzD,Q,SHrCT1D,O,yBAAAA,I,mBAAAA,I,kBAAAA,Q,KAaL,I,wBAyFeyH,GAzF6B,SAAC,GAAuD,IAArDxS,EAAoD,EAApDA,QAAShO,EAA2C,EAA3CA,UAAWnF,EAAgC,EAAhCA,UAAW4lB,EAAqB,EAArBA,eAC5E,EAAwBlxB,mBAASwpB,GAAU2H,OAA3C,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAoCrxB,qBAApC,mBAAOsxB,EAAP,KAAmB5Q,EAAnB,KACA,EAAkC1gB,qBAAlC,mBAAOuxB,EAAP,KAAkB5Q,EAAlB,KACQ5T,EAAM4M,eAAN5M,EAEFsb,EAAclR,mBAAO,IAAI1Y,KAAQ,eAEjC+yB,EAAmB1f,mBAAQ,WAC/B,OAAIrB,EACKA,EAAU1R,KAAI,SAACwpB,GACpB,MAAO,CACL1Z,KAAM2Z,aAAaD,EAAItjB,MACvBmU,MAAOmP,EAAI3rB,iBAIV,KACN,CAAC6T,IACEgY,EAAsB3W,mBAAQ,WAClC,OAAIrB,EACKA,EAAU1R,KAAI,SAACwpB,GACpB,MAAO,CACL1Z,KAAM2Z,aAAaD,EAAItjB,MACvBmU,MAAOmP,EAAI7rB,cAIV,KACN,CAAC+T,IAuBJ,OACE,gBAAC,KAAD,WACE,gBAAC,GAAD,WACc,UAAZgO,GACE,eAACoS,GAAD,CAAWE,SAAUK,IAAS5H,GAAU2H,MAAOpU,QAAS,kBAAMsU,EAAQ7H,GAAU2H,QAAhF,SACE,eAAC,MAAD,UAAOpkB,EAAE,aAGb,eAAC8jB,GAAD,CAAWE,SAAUK,IAAS5H,GAAUiI,OAAQ1U,QAAS,kBAAMsU,EAAQ7H,GAAUiI,SAAjF,SACE,eAAC,MAAD,UAAO1kB,EAAE,cAEX,eAAC8jB,GAAD,CAAWE,SAAUK,IAAS5H,GAAUkI,UAAW3U,QAAS,kBAAMsU,EAAQ7H,GAAUkI,YAApF,SACE,eAAC,MAAD,UAAO3kB,EAAE,oBAKb,gBAAC,KAAD,CAAMya,cAAc,SAAS0B,GAAG,OAAOyI,GAAG,OAA1C,UAtC0B,WAC5B,IAAIC,EAAiB,KACrB,GAAIN,EACFM,EAAiBlb,GAAa4a,QACzB,GAAIF,IAAS5H,GAAUiI,QAAUhJ,EAAoB5qB,OAAS,EAAG,CAAC,IAAD,EACtE+zB,EAAiBlb,GAAY,UAAC+R,EAAoBA,EAAoB5qB,OAAS,UAAlD,aAAC,EAAqDub,YAC9E,GAAIgY,IAAS5H,GAAUkI,WAAaF,EAAiB3zB,OAAS,EAAG,CAAC,IAAD,EACtE+zB,EAAiBlb,GAAY,UAAC8a,EAAiBA,EAAiB3zB,OAAS,UAA5C,aAAC,EAA+Cub,YACpEgY,IAAS5H,GAAU2H,QAAnB,OAA4B7lB,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAWiB,YAChDqlB,EAAiBlb,GAAapL,EAAUiB,WAG1C,OAAOqlB,EACL,gBAAC,MAAD,CAAM1U,SAAS,OAAOF,MAAI,EAA1B,cACI4U,KAGJ,eAAC,MAAD,CAAU7S,OAAO,OAAOH,MAAM,UAsB3BiT,GACD,eAAC,MAAD,CAAMC,OAAK,EAACja,MAAM,YAAlB,SACG0Z,GAAalJ,OAIlB,eAAC,KAAD,CAAKa,GAAG,OAAOnK,OAAoB,UAAZN,EAAsB,QAAU,QAAvD,SACG2S,IAAS5H,GAAUkI,UAClB,eAAC,GAAD,CAAW1wB,KAAMwwB,EAAkB9Q,cAAeA,EAAeC,aAAcA,IAC7EyQ,IAAS5H,GAAUiI,OACrB,eAAC,GAAD,CAAUzwB,KAAMynB,EAAqB/H,cAAeA,EAAeC,aAAcA,IAC/EyQ,IAAS5H,GAAU2H,MACrB,eAAC,GAAD,CAAanwB,KAAMkwB,EAAgBhX,SAAUwG,EAAe0M,SAAUzM,IACpE,WI3ENoR,GAAgBpc,KAAOW,IAAV,8OAWb0b,GAAcrc,aAAOuI,KAAPvI,CAAH,oIASXsc,GAAwBtc,aAAOuI,KAAPvI,CAAH,6MACL,qBAAGE,MAAkBC,OAAO8C,cAC5B,qBAAG/C,MAAkBC,OAAOC,cA6NnCmc,GApNsD,SAAC,GAI/D,IAFgBC,EAEjB,EAHJlb,MACEmb,OAAU5sB,QAGZ,EAAuBgU,gBAAfC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KACN3M,EAAM4M,eAAN5M,EACR,EAA4C/M,mBAAS,GAArD,mBAAOqyB,EAAP,KAAuBC,EAAvB,KACA,EAA+CC,cAC7CxlB,EAAE,4EACF,IAFMylB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,eAAgBC,EAAjC,EAAiCA,UAMjClyB,qBAAU,WACRwtB,OAAO2E,SAAS,EAAG,KAClB,IAGH,IAAMntB,EAAU2sB,EAAa7d,cAEvB3L,EAAWK,GAAa,CAACxD,IAAU,GACnCiL,E5BsBwB,SAACjL,GAC/B,IAAM4K,EAAWC,eACXkB,EAAOxB,cAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAKlI,MAAMiJ,UAAUxL,MACnEiL,EAAS,OAAGc,QAAH,IAAGA,OAAH,EAAGA,EAAMd,UACxB,EAA0BzQ,oBAAS,GAAnC,mBAAO3B,EAAP,KAAc6B,EAAd,KAiBA,OAfAM,qBAAU,WAUHiQ,GAAcpS,GATR,uCAAG,gCAAAd,EAAA,sEAC8B6P,GAAmB5H,GADjD,gBACGE,EADH,EACJrH,MAAmB2C,EADf,EACeA,MACtB0E,GAAc1E,GACjBoP,EAASwiB,aAAoB,CAAEC,YAAartB,EAASiL,UAAWzP,KAE9D0E,GACFxF,EAASwF,GANC,2CAAH,oDAUT3D,KAED,CAACyD,EAAS4K,EAAU/R,EAAOoS,IAEvBA,E4B3CWqiB,CAAiBttB,GAC7BoL,E5B6C2B,SAACpL,GAClC,IAAM4K,EAAWC,eACXkB,EAAOxB,cAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAKlI,MAAMiJ,UAAUxL,MACnEoL,EAAY,OAAGW,QAAH,IAAGA,OAAH,EAAGA,EAAMX,aAC3B,EAA0B5Q,oBAAS,GAAnC,mBAAO3B,EAAP,KAAc6B,EAAd,KAgBA,OAdAM,qBAAU,WASHoQ,GAAiBvS,GARX,uCAAG,gCAAAd,EAAA,sEAC8B+P,GAAsB9H,GADpD,gBACGE,EADH,EACJrH,MAAmB2C,EADf,EACeA,KACvB0E,EACFxF,GAAS,GAETkQ,EAAS2iB,aAAuB,CAAEF,YAAartB,EAASoL,aAAc5P,KAL5D,2CAAH,oDASTe,KAED,CAACyD,EAAS4K,EAAU/R,EAAOuS,IAEvBA,E4BjEcoiB,CAAoBxtB,GAEzC,EAA6CiW,eAA7C,mBAAOwN,EAAP,KAAuBgK,EAAvB,KAEA,OACE,eAAC,GAAD,CAAOvvB,OAAQiF,EAAQ,iBAAMA,QAAN,IAAMA,OAAN,EAAMA,EAAUlF,OAAOC,OAAvB,qBAAmCiF,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAU/E,OAAOF,QAAW,KAAtF,SACGiF,EACC,uCACE,gBAAC,KAAD,CAAM+e,eAAe,gBAAgB5K,GAAG,OAAO0K,cAAe,CAAC,SAAU,SAAU,OAAnF,UACE,gBAAC,KAAD,CAAa1K,GAAG,OAAhB,UACE,eAAC,KAAD,CAAMxZ,GAAG,QAAT,SACE,eAAC,MAAD,CAAMuU,MAAM,UAAZ,SAAuB9K,EAAE,YAE3B,eAAC,KAAD,CAAMzJ,GAAG,cAAT,SACE,eAAC,MAAD,CAAMuU,MAAM,UAAZ,SAAuB9K,EAAE,aAE3B,eAAC,KAAD,UACE,eAAC,MAAD,CAAMmmB,GAAG,MAAT,mBAAmBvqB,EAASlF,OAAOC,OAAnC,cAA+CiF,EAAS/E,OAAOF,eAGnE,gBAAC,KAAD,CAAMgkB,eAAgB,CAAC,KAAM,KAAM,YAAaqB,GAAI,CAAC,MAAO,MAAO,GAAnE,UACE,eAAC,KAAD,CAAcmK,GAAG,MAAMrM,KAAMC,aAAethB,EAAS,WAArD,SACGuH,EAAE,sBAEL,eAAC,GAAD,CAAU0K,KAAMwR,EAAe3iB,SAASd,GAAUuX,QAAS,kBAAMkW,EAAmBztB,YAGxF,gBAAC,KAAD,CAAMgiB,cAAc,SAApB,UACE,gBAAC,KAAD,CAAMtD,WAAW,SAASpH,GAAI,CAAC,MAAO,MAAtC,UACE,eAAC,GAAD,CAAoBtG,SAAU7N,EAASlF,OAAO+B,QAASiR,SAAU9N,EAAS/E,OAAO4B,QAASoQ,KAAM,KAChG,eAAC,MAAD,CACEuH,GAAG,OACHH,MAAI,EACJE,SAAUzD,GAAQC,EAAO,OAAS,OAClCtW,GAAG,uBAJL,mBAKKuF,EAASlF,OAAOC,OALrB,cAKiCiF,EAAS/E,OAAOF,aAEnD,gBAAC,KAAD,CAAMgkB,eAAe,gBAAgBF,cAAe,CAAC,SAAU,SAAU,SAAU,OAAnF,UACE,gBAAC,KAAD,CAAMA,cAAe,CAAC,SAAU,SAAU,OAAQ1K,GAAI,CAAC,MAAO,MAAO,MAArE,UACE,eAAC,KAAD,CAAMxZ,GAAE,sBAAiBqF,EAASlF,OAAO+B,SAAzC,SACE,gBAACwsB,GAAD,WACE,eAAC,GAAD,CAAcxsB,QAASmD,EAASlF,OAAO+B,QAASoQ,KAAK,SACrD,eAAC,MAAD,CAAMsH,SAAS,OAAOC,GAAG,MAAMhC,MAAO,CAAEyC,WAAY,UAAYgB,MAAM,cAAtE,qBACQjW,EAASlF,OAAOC,OADxB,eACqCgT,GAAa/N,EAASI,YAAa,CACpE8N,SAAU,WACVC,iBAAkB,KAClBC,gBAAgB,IAJpB,YAKQpO,EAAS/E,OAAOF,eAI5B,eAAC,KAAD,CAAMJ,GAAE,sBAAiBqF,EAAS/E,OAAO4B,SAAzC,SACE,gBAACwsB,GAAD,CAAa7U,GAAI,CAAC,KAAM,KAAM,QAA9B,UACE,eAAC,GAAD,CAAc3X,QAASmD,EAAS/E,OAAO4B,QAASoQ,KAAK,SACrD,eAAC,MAAD,CAAMsH,SAAS,OAAOC,GAAG,MAAMhC,MAAO,CAAEyC,WAAY,UAAYgB,MAAM,cAAtE,qBACQjW,EAAS/E,OAAOF,OADxB,eACqCgT,GAAa/N,EAASG,YAAa,CACpE+N,SAAU,WACVC,iBAAkB,KAClBC,gBAAgB,IAJpB,YAKQpO,EAASlF,OAAOC,kBAK9B,gBAAC,KAAD,WACE,eAAC,KAAD,CAAMJ,GAAE,eAAUqF,EAASlF,OAAO+B,QAA1B,YAAqCmD,EAAS/E,OAAO4B,SAA7D,SACE,eAAC,KAAD,CAAQ0tB,GAAG,MAAMzU,QAAQ,YAAzB,SACG1R,EAAE,qBAGP,eAAC,KAAD,CAAMzJ,GAAE,8BAAyBqF,EAASlF,OAAO+B,QAAzC,2BAAmEmD,EAAS/E,OAAO4B,SAA3F,SACE,eAAC,KAAD,UAASuH,EAAE,sBAKnB,gBAACglB,GAAD,WACE,gBAAC,KAAD,WACE,eAAC,KAAD,UACE,gBAAC,KAAD,CAAKtqB,EAAE,OAAP,UACE,gBAAC,KAAD,CAAMigB,eAAe,gBAArB,UACE,gBAAC,KAAD,CAAMyL,KAAK,IAAI3L,cAAc,SAA7B,UACE,eAAC,MAAD,CAAM3P,MAAM,YAAYmF,MAAI,EAACE,SAAS,OAAOmI,cAAc,YAA3D,SACGtY,EAAE,eAEL,gBAAC,MAAD,CAAMmQ,SAAS,OAAOF,MAAI,EAA1B,cACItG,GAAa/N,EAAS/L,iBAE1B,eAAC,GAAD,CAASwc,MAAOzQ,EAAShG,wBAE3B,gBAAC,KAAD,CAAMwwB,KAAK,IAAI3L,cAAc,SAA7B,UACE,eAAC,MAAD,CAAM3P,MAAM,YAAYmF,MAAI,EAACE,SAAS,OAAOmI,cAAc,YAA3D,SACGtY,EAAE,mBAEL,gBAAC,MAAD,CAAMmQ,SAAS,OAAOF,MAAI,EAA1B,UACGtG,GAAa/N,EAAS9L,SADzB,OAGA,gBAAC,KAAD,CAAMqnB,WAAW,SAAjB,UACE,uBAAMtH,IAAK8V,EAAX,SACE,eAAC,KAAD,CAAU7a,MAAM,iBAElB,eAAC,MAAD,CAAMsF,GAAG,MAAMD,SAAS,OAAOrF,MAAM,aAArC,SACG9K,EAAE,oBAEJ0lB,GAAkBD,WAIzB,eAAC,MAAD,CAAM3a,MAAM,YAAYmF,MAAI,EAAC+L,GAAG,OAAO7L,SAAS,OAAOmI,cAAc,YAArE,SACGtY,EAAE,yBAEL,gBAACklB,GAAD,WACE,gBAAC,KAAD,CAAMvK,eAAe,gBAArB,UACE,gBAAC,KAAD,WACE,eAAC,GAAD,CAAcliB,QAASmD,EAASlF,OAAO+B,QAASoQ,KAAK,SACrD,eAAC,MAAD,CAAMkc,OAAK,EAACja,MAAM,aAAasF,GAAG,MAAlC,SACGxU,EAASlF,OAAOC,YAGrB,eAAC,MAAD,CAAMouB,OAAK,EAAX,SAAapb,GAAa/N,EAAS2B,sBAErC,gBAAC,KAAD,CAAMod,eAAe,gBAArB,UACE,gBAAC,KAAD,WACE,eAAC,GAAD,CAAcliB,QAASmD,EAAS/E,OAAO4B,QAASoQ,KAAK,SACrD,eAAC,MAAD,CAAMkc,OAAK,EAACja,MAAM,aAAasF,GAAG,MAAlC,SACGxU,EAAS/E,OAAOF,YAGrB,eAAC,MAAD,CAAMouB,OAAK,EAAX,SAAapb,GAAa/N,EAAS4B,8BAK3C,eAAC,KAAD,CAAMwe,GAAG,OAAT,SACE,gBAAC,KAAD,CAAMvB,cAAc,SAAS/f,EAAE,OAA/B,UACE,gBAAC,KAAD,CACE6W,YAAa+T,EACbe,YAAa,SAACnP,GAAD,OAAWqO,EAAkBrO,IAC1CzF,MAAM,KACNC,QAAQ,SAJV,UAME,eAAC,KAAD,CAAgBG,MAAM,OAAtB,SAA8B7R,EAAE,SAChC,eAAC,KAAD,CAAgB6R,MAAM,OAAtB,SAA8B7R,EAAE,WAElC,gBAAC,KAAD,CAAMgc,GAAG,OAAT,UACE,gBAAC,KAAD,CAAMoK,KAAK,IAAI3L,cAAc,SAA7B,UACE,eAAC,MAAD,CAAM3P,MAAM,YAAYqF,SAAS,OAAOF,MAAI,EAACqI,cAAc,YAA3D,SACoBtY,EAAjBslB,EAAmB,YAAiB,gBAEvC,gBAAC,MAAD,CAAMnV,SAAS,OAAOF,MAAI,EAA1B,cACqBtG,GAAjB2b,EAA8B1pB,EAAShM,cAA8BgM,EAASjM,cAElF,eAAC,GAAD,CAAS0c,MAAOiZ,EAAiB1pB,EAAS0B,oBAAsB1B,EAASjG,qBAE3E,gBAAC,KAAD,CAAMywB,KAAK,IAAI3L,cAAc,SAA7B,UACE,eAAC,MAAD,CAAM3P,MAAM,YAAYqF,SAAS,OAAOF,MAAI,EAACqI,cAAc,YAA3D,SACoBtY,EAAjBslB,EAAmB,oBAAyB,wBAE/C,gBAAC,MAAD,CAAMnV,SAAS,OAAOF,MAAI,EAA1B,cACqBtG,GAAjB2b,EAA8B1pB,EAAS1L,SAAyB0L,EAAS3L,cAE7E,eAAC,MAAD,CAAM6a,MAAM,aAAaqF,SAAS,OAAlC,SACGnQ,EAAE,iCAAkC,CACnCsmB,UACI3c,GADO2b,EACM1pB,EAAS5L,YACT4L,EAAS7L,gCAQxC,eAAC,GAAD,CAAW2hB,QAAQ,OAAOhO,UAAWA,OAEvC,eAAC,KAAD,CAASqM,GAAG,OAAOiM,GAAG,OAAOvK,MAAM,KAAnC,SACGzR,EAAE,kBAEL,eAAC,GAAD,CAAkB6D,aAAcA,OAGlC,eAAC,KAAD,CAAMmY,GAAG,OAAOrB,eAAe,SAA/B,SACE,eAAC,KAAD,SCjQJ4L,GAAc3d,aAAOgJ,KAAPhJ,CAAH,6JAUX4d,GAAe5d,aAAOwK,KAAPxK,CAAH,iGACI,qBAAGE,MAAkBC,OAAO8C,cAC/B,qBAAG/C,MAAkB4N,MAAMvK,QAIjCsa,GAAgB7d,KAAOW,IAAV,iKAUpBmd,GAAW,SAAC,GAA6C,IAA3CnoB,EAA0C,EAA1CA,UAClB,OACE,eAACgoB,GAAD,CAAahwB,GAAE,sBAAiBgI,EAAU9F,SAA1C,SACE,eAAC+tB,GAAD,UACE,gBAAC,KAAD,WACE,eAAC,KAAD,CAAK3U,MAAM,OAAOG,OAAO,OAAzB,SAEE,eAAC,GAAD,CAAcvZ,QAAS8F,EAAU9F,QAASoQ,KAAK,WAEjD,gBAAC,KAAD,CAAKuH,GAAG,OAAR,UACE,eAAC,MAAD,UAAO7R,EAAU5H,SACjB,gBAAC,KAAD,CAAMwgB,WAAW,SAAjB,UACE,gBAAC,MAAD,CAAMhH,SAAS,OAAOgW,GAAG,MAAMQ,WAAW,OAA1C,cACIhd,GAAapL,EAAUiB,aAE3B,eAAC,GAAD,CAAS2Q,SAAS,OAAO9D,MAAO9N,EAAUoB,+BA+DzCinB,GAtDkB,WAC/B,IAAMjL,EAAYlX,KACVzE,EAAM4M,eAAN5M,EAEF6mB,EAAmB9hB,mBAAQ,WAC/B,OAAO5T,OAAOsI,OAAOkiB,GAClB5oB,MAAK,cAA+B,IAAtBvC,EAAqB,EAA3ByD,KAAmBzB,EAAQ,EAAdyB,KAEpB,OAAOzD,GAAKgC,EAAK6jB,KAAKC,IAAL,OAAS9lB,QAAT,IAASA,OAAT,EAASA,EAAGmP,gBAAkB0W,KAAKC,IAAL,OAAS9jB,QAAT,IAASA,OAAT,EAASA,EAAGmN,iBAAmB,EAAI,GAAM,KAEzF3O,MAAM,EAAGqlB,KAAKyQ,IAAI,GAAI31B,OAAOsI,OAAOkiB,GAAW7qB,WACjD,CAAC6qB,IAEEoL,EAAcja,iBAAuB,MACrCka,EAAcla,kBAAgB,GAsBpC,OApBArZ,qBAAU,WACR,IAAMwzB,EAAiBC,aAAY,WAC7BH,EAAY9pB,UACV8pB,EAAY9pB,QAAQkqB,aAAeJ,EAAY9pB,QAAQmqB,YAAcL,EAAY9pB,QAAQ2jB,YAC3FoG,EAAY/pB,SAAU,EACsB,IAAnC8pB,EAAY9pB,QAAQkqB,aAC7BH,EAAY/pB,SAAU,GAExB8pB,EAAY9pB,QAAQ2oB,SAClBoB,EAAY/pB,QAAU8pB,EAAY9pB,QAAQkqB,WAAa,EAAIJ,EAAY9pB,QAAQkqB,WAAa,EAC5F,MAGH,IAEH,OAAO,WACLE,cAAcJ,MAEf,IAE6B,IAA5BJ,EAAiB/1B,QAAiB+1B,EAAiB/K,MAAK,SAACwL,GAAD,OAAWA,EAAMrzB,QAK3E,gBAAC,KAAD,CAAMszB,GAAG,OAAT,UACE,eAAC,MAAD,CAAMnX,GAAG,OAAO4L,GAAG,MAAnB,SACGhc,EAAE,gBAEL,eAACymB,GAAD,CAAe5W,IAAKkX,EAApB,SACGF,EAAiB70B,KAAI,SAACs1B,GAAD,aACpBA,EAAMrzB,KAAO,eAAC,GAAD,CAAwDsK,UAAW+oB,EAAMrzB,MAAzE,mCAAiCqzB,EAAMrzB,YAAvC,aAAiC,EAAYwE,UAAuC,aAVhG,MCjDI+uB,GAxCkB,WAC/B,IAAQxnB,EAAM4M,eAAN5M,EACRvM,qBAAU,WACRwtB,OAAO2E,SAAS,EAAG,KAClB,IAEH,IAAMjK,EAAYlX,KAEZmX,EAAkB7W,mBAAQ,WAC9B,OAAO5T,OAAOsI,OAAOkiB,GAClB3pB,KAAI,SAACgT,GAAD,OAAWA,EAAM/Q,QACrBsQ,QAAO,SAACS,GAAD,OAAWA,OACpB,CAAC2W,IAEJ,EAAsBpN,eAAfC,EAAP,oBACMiZ,EAAkB7iB,GAAc4J,GAEtC,OACE,gBAACuN,GAAA,EAAD,WACE,eAAC,KAAD,CAAStK,MAAM,KAAK1B,GAAG,OAAvB,SACG/P,EAAE,oBAEJwO,EAAY1d,OAAS,EACpB,eAAC,GAAD,CAAYsV,WAAYqhB,IAExB,eAAC,KAAD,UACE,eAAC,MAAD,CAAMrL,GAAG,OAAOD,GAAG,OAAnB,SACGnc,EAAE,qCAIT,eAAC,GAAD,IACA,eAAC,KAAD,CAASyR,MAAM,KAAKuK,GAAG,OAAOjM,GAAG,OAAO1Z,GAAG,oBAA3C,SACG2J,EAAE,gBAEL,eAAC,GAAD,CAAYoG,WAAYwV,Q,UCZf8L,GArBI,SAACjvB,GAClB,MAAoCxF,wBAA6BO,GAAjE,mBAAOm0B,EAAP,KAAmBC,EAAnB,KAiBA,OAfAn0B,qBAAU,WAUJgF,GATW,uCAAG,4BAAAjI,EAAA,sEACKwE,MAAM,GAAD,OAZX,+EAYW,OAAmByD,IAD7B,OAGM,OAFhBvH,EADU,QAGL22B,QACT32B,EAAO42B,OAAOC,MAAK,YAAe,IAAZ9zB,EAAW,EAAXA,KACpB2zB,EAAc3zB,EAAK+zB,QALP,2CAAH,oDAUbC,KAED,CAACxvB,IAEGkvB,GCaH3C,GAAgBpc,KAAOW,IAAV,8OAWb2e,GAAgBtf,aAAOuf,KAAPvf,CAAH,6HASbwf,GAAgC,CAAEC,MAAO,GAgMhCC,GA9LuD,SAAC,GAIhE,IAFgBlD,EAEjB,EAHJlb,MACEmb,OAAU5sB,QAGZ,EAAuBgU,gBAAfC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KACN3M,EAAM4M,eAAN5M,EAGRvM,qBAAU,WACRwtB,OAAO2E,SAAS,EAAG,KAClB,IAGH,IAAMntB,EAAU2sB,EAAa7d,cAEvBghB,EAAUb,GAAWjvB,GAErB8F,EhCwHoB,SAAC9F,GAAwD,IAAD,EAC5EoM,EAAeJ,KACfK,EAAkBJ,KAExB,GAAKjM,GAAY2Q,aAAU3Q,GAS3B,OAJKoM,EAAapM,IAChBqM,EAAgB,CAACrM,IAGnB,UAAOoM,EAAapM,UAApB,aAAO,EAAuBxE,KgCrIZu0B,CAAa/vB,GACzBgwB,EhCuIwB,SAAChwB,GAC/B,IAAM4K,EAAWC,eAEXmlB,EADQzlB,cAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAK/E,OAAO8F,UAAUxL,MAC/CgD,cAC5B,EAA0BxI,oBAAS,GAAnC,mBAAO3B,EAAP,KAAc6B,EAAd,KAiBA,OAfAM,qBAAU,WAUHg1B,GAAkBn3B,GATZ,uCAAG,gCAAAd,EAAA,sEACmCoS,GAAmBnK,GADtD,gBACGE,EADH,EACJrH,MAAmBwJ,EADf,EACeA,WACtBnC,GAAcmC,GACjBuI,EAASqlB,aAAsB,CAAEjnB,aAAchJ,EAASgD,cAAeX,KAErEnC,GACFxF,EAASwF,GANC,2CAAH,oDAUT3D,KAED,CAACyD,EAAS4K,EAAU/R,EAAOm3B,IAEvBA,EgC5JeE,CAAiBlwB,GACjCoN,EAAY5J,GAAY,OAACwsB,QAAD,IAACA,IAAiB,IAC1C5kB,EhC6N4B,SAACpL,GACnC,IAAM4K,EAAWC,eAETO,EADMb,cAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAK/E,OAAO8F,UAAUxL,MACnEoL,aACR,EAA0B5Q,oBAAS,GAAnC,mBAAO3B,EAAP,KAAc6B,EAAd,KAgBA,OAdAM,qBAAU,WASHoQ,GAAiBvS,GARX,uCAAG,gCAAAd,EAAA,sEAC8BmQ,GAAuBlI,GADrD,gBACGE,EADH,EACJrH,MAAmB2C,EADf,EACeA,KACvB0E,EACFxF,GAAS,GACAc,GACToP,EAASulB,aAAwB,CAAEnnB,aAAchJ,EAASoL,aAAc5P,KAL9D,2CAAH,oDASTe,KAED,CAACyD,EAAS4K,EAAU/R,EAAOuS,IAEvBA,EgCjPcglB,CAAqBpwB,GACpCiL,EhC4JyB,SAACjL,GAChC,IAAM4K,EAAWC,eAETI,EADMV,cAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAK/E,OAAO8F,UAAUxL,MACnEiL,UACR,EAA0BzQ,oBAAS,GAAnC,mBAAO3B,EAAP,KAAc6B,EAAd,KAiBA,OAfAM,qBAAU,WAUHiQ,GAAcpS,GATR,uCAAG,gCAAAd,EAAA,sEAC8BiQ,GAAoBhI,GADlD,gBACGE,EADH,EACJrH,MAAmB2C,EADf,EACeA,MACtB0E,GAAc1E,GACjBoP,EAASylB,aAAqB,CAAErnB,aAAchJ,EAASiL,UAAWzP,KAEhE0E,GACFxF,EAASwF,GANC,2CAAH,oDAUT3D,KAED,CAACyD,EAAS4K,EAAU/R,EAAOoS,IAEvBA,EgCjLWqlB,CAAkBtwB,GAG9BuwB,EhCiLyB,SAC/BvwB,EACAmJ,EACAqnB,GAEA,IAAM5lB,EAAWC,eACX0B,EAAQhC,cAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAK/E,OAAO8F,UAAUxL,MACrEuwB,EAAYhkB,EAAMgkB,UAAUpnB,GAClC,EAA0B3O,oBAAS,GAAnC,mBAAO3B,EAAP,KAAc6B,EAAd,KAGM+1B,EAAyBlkB,EAAMgkB,UAAUG,uBACzC33B,EAA2C,IAA1BC,YAAY,IAAIC,MACjCmQ,EAAiBpQ,YAAY23B,aAAYC,aAAI73B,EAAgBy3B,KAwBnE,OAtBAx1B,qBAAU,WAiBHu1B,GAAc13B,GAhBR,uCAAG,gCAAAd,EAAA,sEACiCmR,GAAoBlJ,EAASmJ,EAAUC,GADxE,gBACJ5N,EADI,EACJA,KAAaq1B,EADT,EACEh4B,MACV2C,GACFoP,EACEkmB,aAAqB,CACnB9nB,aAAchJ,EACd+wB,gBAAiB5nB,EACjBonB,UAAW/0B,EACXk1B,uBAAwBtnB,KAI1BynB,GACFn2B,GAAS,GAbC,2CAAH,oDAiBT6B,KAED,CAACyD,EAAS4K,EAAU/R,EAAOsQ,EAAUsnB,EAAwBF,EAAWnnB,EAAgBonB,IAEpFD,EgCtNWS,CAAkBhxB,EnD9EN,KmD8EiC2vB,IACzDsB,EAAoB3kB,mBAAQ,WAEhC,GAAIikB,GAAazqB,GAAayqB,EAAUl4B,OAAS,EAC/C,MAAM,GAAN,oBACKk4B,GADL,CAEE,CACElnB,MAAM,IAAIpQ,MAAO8xB,UAAY,IAC7BjhB,KAAMymB,EAAUA,EAAUl4B,OAAS,GAAG0R,MACtCA,MAAK,OAAEjE,QAAF,IAAEA,OAAF,EAAEA,EAAWiB,SAClBiD,KAAI,OAAElE,QAAF,IAAEA,OAAF,EAAEA,EAAWiB,SACjBkD,IAAKsmB,EAAUA,EAAUl4B,OAAS,GAAG0R,WAK1C,CAACwmB,EAAWzqB,IAEf,EAA6CgQ,eAA7C,mBAAOob,EAAP,KAAwBC,EAAxB,KAEA,OACE,eAAC,GAAD,CAAOjzB,OAAM,OAAE4H,QAAF,IAAEA,OAAF,EAAEA,EAAW5H,OAA1B,SACG4H,EACEA,EAAUsB,OAYT,uCAEE,gBAAC,KAAD,CAAM8a,eAAe,gBAAgB5K,GAAG,OAAO0K,cAAe,CAAC,SAAU,SAAU,OAAnF,UACE,gBAAC,KAAD,CAAa1K,GAAG,OAAhB,UACE,eAAC,KAAD,CAAMxZ,GAAG,QAAT,SACE,eAAC,MAAD,CAAMuU,MAAM,UAAZ,SAAuB9K,EAAE,YAE3B,eAAC,KAAD,CAAMzJ,GAAG,eAAT,SACE,eAAC,MAAD,CAAMuU,MAAM,UAAZ,SAAuB9K,EAAE,cAE3B,gBAAC,KAAD,WACE,eAAC,MAAD,CAAMmmB,GAAG,MAAT,SAAgB5nB,EAAU5H,SAC1B,eAAC,MAAD,qBAAWwiB,GAAa1gB,GAAxB,aAGJ,gBAAC,KAAD,CAAMkiB,eAAgB,CAAC,KAAM,KAAM,YAAaqB,GAAI,CAAC,MAAO,MAAO,GAAnE,UACE,eAAC,KAAD,CAAcmK,GAAG,MAAMrb,MAAM,UAAUgP,KAAMC,aAAethB,EAAS,WAArE,SACGuH,EAAE,sBAEJuoB,GACC,eAACL,GAAD,CAAepO,KAAMyO,EAASsB,IAAI,+BAA+B/b,OAAO,SAAxE,SACE,eAAC,KAAD,CAAOzF,IAAI,uBAAuB2J,OAAQ,GAAIH,MAAO,GAAIvJ,IAAKtI,EAAE,mCAGpE,eAAC,GAAD,CAAU0K,KAAMif,EAAgBpwB,SAASd,GAAUuX,QAAS,kBAAM4Z,EAAkBnxB,YAGxF,gBAAC,KAAD,CAAMkiB,eAAe,gBAAgBF,cAAe,CAAC,SAAU,SAAU,SAAU,OAAnF,UACE,gBAAC,KAAD,CAAMA,cAAc,SAAS1K,GAAI,CAAC,MAAO,MAAzC,UACE,gBAAC,KAAD,CAAMoH,WAAW,SAAjB,UACE,eAAC,GAAD,CAActO,KAAK,OAAOpQ,QAASA,IACnC,eAAC,MAAD,CACE2X,GAAG,OACHH,MAAI,EACJ0W,WAAW,MACXxW,SAAUzD,GAAQC,EAAO,OAAS,OAClCtW,GAAG,wBALL,SAOGkI,EAAUd,OAEb,gBAAC,MAAD,CAAM2S,GAAG,OAAOuW,WAAW,IAAI7b,MAAM,aAAaqF,SAAUzD,GAAQC,EAAO,OAAS,OAApF,cACIpO,EAAU5H,OADd,UAIF,gBAAC,KAAD,CAAMqlB,GAAG,MAAM5L,GAAG,OAAO+G,WAAW,SAApC,UACE,gBAAC,MAAD,CAAMgP,GAAG,OAAOlW,MAAI,EAACE,SAAS,OAA9B,cACIxG,GAAapL,EAAUiB,SAAU,CAAEsK,SAAU,gBAEjD,eAAC,GAAD,CAASuC,MAAO9N,EAAUoB,eAAgByX,WAAY,YAG1D,gBAAC,KAAD,WACE,eAAC,KAAD,CAAM7gB,GAAE,eAAUkC,GAAlB,SACE,eAAC,KAAD,CAAQ0tB,GAAG,MAAMzU,QAAQ,YAAzB,SACG1R,EAAE,qBAGP,eAAC,KAAD,CAAMzJ,GAAE,8BAAyBkC,GAAjC,SACE,eAAC,KAAD,UAASuH,EAAE,mBAMjB,gBAAC,GAAD,WACE,eAAC,KAAD,UACE,gBAAC,KAAD,CAAKtF,EAAE,OAAP,UACE,eAAC,MAAD,CAAMuV,MAAI,EAAC8U,OAAK,EAACja,MAAM,YAAYqF,SAAS,OAAOmI,cAAc,YAAjE,SACGtY,EAAE,eAEL,gBAAC,MAAD,CAAMiQ,MAAI,EAACE,SAAS,OAApB,cACIxG,GAAapL,EAAU1O,iBAE3B,eAAC,GAAD,CAASwc,MAAO9N,EAAU3I,qBAE1B,eAAC,MAAD,CAAMomB,GAAG,OAAO/L,MAAI,EAACnF,MAAM,YAAYqF,SAAS,OAAOmI,cAAc,YAArE,SACGtY,EAAE,gBAEL,gBAAC,MAAD,CAAMiQ,MAAI,EAACE,SAAS,OAAOmI,cAAc,YAAzC,cACI3O,GAAapL,EAAU5O,cAE3B,eAAC,GAAD,CAAS0c,MAAO9N,EAAU5I,kBAE1B,eAAC,MAAD,CAAMqmB,GAAG,OAAO/L,MAAI,EAACnF,MAAM,YAAYqF,SAAS,OAAOmI,cAAc,YAArE,SACGtY,EAAE,eAEL,gBAAC,MAAD,CAAMiQ,MAAI,EAACE,SAAS,OAApB,cACIxG,GAAapL,EAAU3O,kBAG3B,eAAC,MAAD,CAAMosB,GAAG,OAAO/L,MAAI,EAACnF,MAAM,YAAYqF,SAAS,OAAOmI,cAAc,YAArE,SACGtY,EAAE,sBAEL,eAAC,MAAD,CAAMiQ,MAAI,EAACE,SAAS,OAApB,SACGxG,GAAapL,EAAU1I,QAAS,CAAEoU,WAAW,WAKpD,eAAC,GAAD,CACEyH,QAAQ,QACRhO,UAAWA,EACXnF,UAAWA,EACX4lB,eAAgBuF,OAKpB,eAAC,KAAD,CAASjY,MAAM,KAAK1B,GAAG,OAAOiM,GAAG,OAAjC,SACGhc,EAAE,WAGL,eAAC,GAAD,CAAW6F,UAAWA,IAEtB,eAAC,KAAD,CAAS4L,MAAM,KAAK1B,GAAG,OAAOiM,GAAG,OAAjC,SACGhc,EAAE,kBAGL,eAAC,GAAD,CAAkB6D,aAAcA,OAjIlC,eAAC,KAAD,UACE,eAAC,KAAD,CAAKnJ,EAAE,OAAP,SACE,gBAAC,MAAD,WACGsF,EAAE,4DACH,eAAC,KAAD,CAAMoO,MAAO,CAAEyH,QAAS,SAAUxF,WAAY,OAAS9Z,GAAE,eAAUkC,GAAnE,SACGuH,EAAE,kBAgIb,eAAC,KAAD,CAAMgc,GAAG,OAAOrB,eAAe,SAA/B,SACE,eAAC,KAAD,SCpOKmP,GAdc,SAAC/X,GAC5B,IAEctZ,EAEVsZ,EAHF7H,MACEmb,OAAU5sB,QAKd,OAAK2Q,qBAAU3Q,EAAQ8O,eAGhB,eAAC,GAAD,eAAewK,IAFb,eAAC,IAAD,CAAUxb,GAAG,OCkBTwzB,UAtBQ,WACrB,OACE,uCACE,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,IAAD,CAAOC,KAAK,QAAQC,OAAK,EAAzB,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAOD,KAAK,cAAcC,OAAK,EAA/B,SACE,eAACC,GAAD,MAEF,eAAC,IAAD,CAAOF,KAAK,eAAeC,OAAK,EAAhC,SACE,eAACE,GAAD,MAEF,eAAC,IAAD,CAAOF,OAAK,EAACD,KAAM,CAAC,wBAAyB,wBAAyBI,UAAWN,KACjF,eAAC,IAAD,CAAOG,OAAK,EAACD,KAAM,CAAC,uBAAwB,sBAAuB,uBAAwBI,UAAWjF,U,iCC3B5G,sGAAiCkF,kZAAYC,4BACTD,kZAAYE,+BACfF,kZAAYG,4BACVH,kZAAYI,8BAHxC,IAIMC,EAAoBL,kZAAYM,4BAKhCC,GAJY,UAAMF,EAAN,YACI,UAAMA,EAAN,gBAGI,+BAEpB12B,EAAc,4DACd1B,EAAgB","file":"static/js/10.973c9c43.chunk.js","sourcesContent":["export interface Block {\n  number: number\n  timestamp: string\n}\n\nexport interface ChartEntry {\n  date: number\n  volumeUSD: number\n  liquidityUSD: number\n}\n\n/**\n * Formatted type for Candlestick charts\n */\nexport interface PriceChartEntry {\n  time: number\n  open: number\n  close: number\n  high: number\n  low: number\n}\n\nexport enum TransactionType {\n  SWAP,\n  MINT,\n  BURN,\n}\n\nexport type Transaction = {\n  type: TransactionType\n  hash: string\n  timestamp: string\n  sender: string\n  token0Symbol: string\n  token1Symbol: string\n  token0Address: string\n  token1Address: string\n  amountUSD: number\n  amountToken0: number\n  amountToken1: number\n}\n\nexport interface ProtocolData {\n  volumeUSD: number\n  volumeUSDChange: number // in 24h, as percentage\n\n  liquidityUSD: number\n  liquidityUSDChange: number // in 24h, as percentage\n\n  txCount: number\n  txCountChange: number\n}\n\nexport interface ProtocolState {\n  readonly overview?: ProtocolData\n\n  readonly chartData?: ChartEntry[]\n\n  readonly transactions?: Transaction[]\n}\n\n// POOLS\n\nexport interface PoolData {\n  address: string\n\n  token0: {\n    name: string\n    symbol: string\n    address: string\n  }\n\n  token1: {\n    name: string\n    symbol: string\n    address: string\n  }\n\n  volumeUSD: number\n  volumeUSDChange: number\n  volumeUSDWeek: number\n  volumeUSDChangeWeek: number\n\n  totalFees24h: number\n  totalFees7d: number\n  lpFees24h: number\n  lpFees7d: number\n  lpApr7d: number\n\n  liquidityUSD: number\n  liquidityUSDChange: number\n\n  token0Price: number\n  token1Price: number\n\n  liquidityToken0: number\n  liquidityToken1: number\n}\n\nexport interface PoolsState {\n  byAddress: {\n    [address: string]: {\n      data?: PoolData\n      chartData?: ChartEntry[]\n      transactions?: Transaction[]\n    }\n  }\n}\n\n// TOKENS\n\nexport type TokenData = {\n  exists: boolean\n\n  name: string\n  symbol: string\n  address: string\n\n  volumeUSD: number\n  volumeUSDChange: number\n  volumeUSDWeek: number\n  txCount: number\n\n  liquidityToken: number\n  liquidityUSD: number\n  liquidityUSDChange: number\n\n  priceUSD: number\n  priceUSDChange: number\n  priceUSDChangeWeek: number\n}\n\nexport interface TokensState {\n  byAddress: {\n    [address: string]: {\n      data?: TokenData\n      poolAddresses?: string[]\n      chartData?: ChartEntry[]\n      priceData: {\n        oldestFetchedTimestamp?: number\n        [secondsInterval: number]: PriceChartEntry[] | undefined\n      }\n      transactions?: Transaction[]\n    }\n  }\n}\n\n// Info redux state\nexport interface InfoState {\n  protocol: ProtocolState\n  pools: PoolsState\n  tokens: TokensState\n}\n","export const MINIMUM_SEARCH_CHARACTERS = 2\n\nexport const WEEKS_IN_YEAR = 52.1429\n\nexport const TOTAL_FEE = 0.0025\nexport const LP_HOLDERS_FEE = 0.0005\nexport const TREASURY_FEE = 0.002\nexport const BUYBACK_FEE = 0\n\nexport const PCS_V2_START = 1635919200 // November 3, 2021, 12:00:00 AM\nexport const ONE_DAY_UNIX = 86400 // 24h * 60m * 60s\nexport const ONE_HOUR_SECONDS = 3600\n\nexport const ITEMS_PER_INFO_TABLE_PAGE = 10\n\n// These tokens are either incorrectly priced or have some other issues that spoil the query data\n// None of them present any interest as they have almost 0 daily trade volume\nexport const TOKEN_BLACKLIST = [\"0x\"]\n","import { TOTAL_FEE, LP_HOLDERS_FEE, WEEKS_IN_YEAR } from 'config/constants/info'\n\n/**\n * Get increase/decrease of value compared to the previous value (e.g. 24h volume compared to 24h volume the day before )\n * @param valueNow - more recent value\n * @param valueBefore - value to compare with\n */\nexport const getAmountChange = (valueNow?: number, valueBefore?: number) => {\n  if (valueNow && valueBefore) {\n    return valueNow - valueBefore\n  }\n  if (valueNow) {\n    return valueNow\n  }\n  return 0\n}\n\n/**\n * Get increase/decrease of value compared to the previous value as a percentage\n * @param valueNow - more recent value\n * @param valueBefore - value to compare with\n */\nexport const getPercentChange = (valueNow?: number, valueBefore?: number): number => {\n  if (valueNow && valueBefore) {\n    return ((valueNow - valueBefore) / valueBefore) * 100\n  }\n  return 0\n}\n\n/**\n * Given current value and value 1 and 2 periods (e.g. 1day + 2days, 1week - 2weeks) returns the amount change for latest period\n * and percentage change compared to the previous period.\n * @param valueNow - current value\n * @param valueOnePeriodAgo - value 1 period ago (e.g. 1 day or 1 week ago), period unit must be same as valueTwoPeriodsAgo\n * @param valueTwoPeriodsAgo - value 2 periods ago (e.g. 2 days or 2 weeks ago), period unit must be same as valueOnePeriodAgo\n * @returns amount change for the latest period and percentage change compared to previous period\n */\nexport const getChangeForPeriod = (\n  valueNow?: number,\n  valueOnePeriodAgo?: number,\n  valueTwoPeriodsAgo?: number,\n): [number, number] => {\n  const currentPeriodAmount = getAmountChange(valueNow, valueOnePeriodAgo)\n  const previousPeriodAmount = getAmountChange(valueOnePeriodAgo, valueTwoPeriodsAgo)\n  const percentageChange = getPercentChange(currentPeriodAmount, previousPeriodAmount)\n  return [currentPeriodAmount, percentageChange]\n}\n\nexport const getLpFeesAndApr = (volumeUSD: number, volumeUSDWeek: number, liquidityUSD: number) => {\n  const totalFees24h = volumeUSD * TOTAL_FEE\n  const totalFees7d = volumeUSDWeek * TOTAL_FEE\n  const lpFees24h = volumeUSD * LP_HOLDERS_FEE\n  const lpFees7d = volumeUSDWeek * LP_HOLDERS_FEE\n\n  const lpApr7d = liquidityUSD > 0 ? (volumeUSDWeek * LP_HOLDERS_FEE * WEEKS_IN_YEAR * 100) / liquidityUSD : 0\n  return {\n    totalFees24h,\n    totalFees7d,\n    lpFees24h,\n    lpFees7d,\n    lpApr7d: lpApr7d !== Infinity ? lpApr7d : 0,\n  }\n}\n","import { getUnixTime, subDays, subWeeks, startOfMinute } from 'date-fns'\nimport { request } from 'graphql-request'\n\n/**\n * Helper function to get large amount GraphQL subqueries\n * @param queryConstructor constructor function that combines subqueries\n * @param subqueries individual queries\n * @param endpoint GraphQL endpoint\n * @param skipCount how many subqueries to fire at a time\n * @returns\n */\nexport const multiQuery = async (\n  queryConstructor: (subqueries: string[]) => string,\n  subqueries: string[],\n  endpoint: string,\n  skipCount = 1000,\n) => {\n  let fetchedData = {}\n  let allFound = false\n  let skip = 0\n  try {\n    while (!allFound) {\n      let end = subqueries.length\n      if (skip + skipCount < subqueries.length) {\n        end = skip + skipCount\n      }\n      const subqueriesSlice = subqueries.slice(skip, end)\n      // eslint-disable-next-line no-await-in-loop\n      const result = await request(endpoint, queryConstructor(subqueriesSlice))\n      fetchedData = {\n        ...fetchedData,\n        ...result,\n      }\n      allFound = Object.keys(result).length < skipCount || skip + skipCount > subqueries.length\n      skip += skipCount\n    }\n    return fetchedData\n  } catch (error) {\n    console.error('Failed to fetch info data', error)\n    return null\n  }\n}\n\n/**\n * Returns UTC timestamps for 24h ago, 48h ago, 7d ago and 14d ago relative to current date and time\n */\nexport const getDeltaTimestamps = (): [number, number, number, number] => {\n  const utcCurrentTime = getUnixTime(new Date()) * 1000\n  const t24h = getUnixTime(startOfMinute(subDays(utcCurrentTime, 1)))\n  const t48h = getUnixTime(startOfMinute(subDays(utcCurrentTime, 2)))\n  const t7d = getUnixTime(startOfMinute(subWeeks(utcCurrentTime, 1)))\n  const t14d = getUnixTime(startOfMinute(subWeeks(utcCurrentTime, 2)))\n  return [t24h, t48h, t7d, t14d]\n}\n","import { gql } from 'graphql-request'\nimport { useState, useEffect } from 'react'\nimport { multiQuery } from 'views/Info/utils/infoQueryHelpers'\nimport { BLOCKS_CLIENT } from 'config/constants/endpoints'\nimport { Block } from 'state/info/types'\n\nconst getBlockSubqueries = (timestamps: number[]) =>\n  timestamps.map((timestamp) => {\n    return `t${timestamp}:blocks(first: 1, orderBy: timestamp, orderDirection: desc, where: { timestamp_gt: ${timestamp}, timestamp_lt: ${\n      timestamp + 600\n    } }) {\n      number\n    }`\n  })\n\nconst blocksQueryConstructor = (subqueries: string[]) => {\n  return gql`query blocks {\n    ${subqueries}\n  }`\n}\n\n/**\n * @notice Fetches block objects for an array of timestamps.\n * @param {Array} timestamps\n */\nexport const getBlocksFromTimestamps = async (\n  timestamps: number[],\n  sortDirection: 'asc' | 'desc' = 'desc',\n  skipCount = 500,\n): Promise<Block[]> => {\n  if (timestamps?.length === 0) {\n    return []\n  }\n\n  const fetchedData: any = await multiQuery(\n    blocksQueryConstructor,\n    getBlockSubqueries(timestamps),\n    BLOCKS_CLIENT,\n    skipCount,\n  )\n\n  const sortingFunction =\n    sortDirection === 'desc' ? (a: Block, b: Block) => b.number - a.number : (a: Block, b: Block) => a.number - b.number\n\n  const blocks: Block[] = []\n  if (fetchedData) {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key of Object.keys(fetchedData)) {\n      if (fetchedData[key].length > 0) {\n        blocks.push({\n          timestamp: key.split('t')[1],\n          number: parseInt(fetchedData[key][0].number, 10),\n        })\n      }\n    }\n    // graphql-request does not guarantee same ordering of batched requests subqueries, hence manual sorting\n    blocks.sort(sortingFunction)\n  }\n  return blocks\n}\n\n/**\n * for a given array of timestamps, returns block entities\n * @param timestamps\n * @param sortDirection\n * @param skipCount\n */\nexport const useBlocksFromTimestamps = (\n  timestamps: number[],\n  sortDirection: 'asc' | 'desc' = 'desc',\n  skipCount = 1000,\n): {\n  blocks?: Block[]\n  error: boolean\n} => {\n  const [blocks, setBlocks] = useState<Block[]>()\n  const [error, setError] = useState(false)\n\n  const timestampsString = JSON.stringify(timestamps)\n  const blocksString = blocks ? JSON.stringify(blocks) : undefined\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const timestampsArray = JSON.parse(timestampsString)\n      const result = await getBlocksFromTimestamps(timestampsArray, sortDirection, skipCount)\n      if (result.length === 0) {\n        setError(true)\n      } else {\n        setBlocks(result)\n      }\n    }\n    const blocksArray = blocksString ? JSON.parse(blocksString) : undefined\n    if (!blocksArray && !error) {\n      fetchData()\n    }\n  }, [blocksString, error, skipCount, sortDirection, timestampsString])\n\n  return {\n    blocks,\n    error,\n  }\n}\n","import { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { getChangeForPeriod, getPercentChange } from 'views/Info/utils/infoDataHelpers'\nimport { ProtocolData } from 'state/info/types'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\n\ninterface GlideFactory {\n  totalTransactions: string\n  totalVolumeUSD: string\n  totalLiquidityUSD: string\n}\n\ninterface OverviewResponse {\n  glideFactories: GlideFactory[]\n}\n\n/**\n * Latest Liquidity, Volume and Transaction count\n */\nconst getOverviewData = async (block?: number): Promise<{ data?: OverviewResponse; error: boolean }> => {\n  try {\n    const query = gql`query overview {\n      glideFactories(\n        ${block ? `block: { number: ${block}}` : ``} \n        first: 1) {\n        totalTransactions\n        totalVolumeUSD\n        totalLiquidityUSD\n      }\n    }`\n    const data = await request<OverviewResponse>(INFO_CLIENT, query)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch info overview', error)\n    return { data: null, error: true }\n  }\n}\n\nconst formatGlideFactoryResponse = (rawGlideFactory?: GlideFactory) => {\n  if (rawGlideFactory) {\n    return {\n      totalTransactions: parseFloat(rawGlideFactory.totalTransactions),\n      totalVolumeUSD: parseFloat(rawGlideFactory.totalVolumeUSD),\n      totalLiquidityUSD: parseFloat(rawGlideFactory.totalLiquidityUSD),\n    }\n  }\n  return null\n}\n\ninterface ProtocolFetchState {\n  error: boolean\n  data?: ProtocolData\n}\n\nconst useFetchProtocolData = (): ProtocolFetchState => {\n  const [fetchState, setFetchState] = useState<ProtocolFetchState>({\n    error: false,\n  })\n  const [t24, t48] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24, t48])\n  const [block24, block48] = blocks ?? []\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error, data } = await getOverviewData()\n      const { error: error24, data: data24 } = await getOverviewData(block24?.number ?? undefined)\n      const { error: error48, data: data48 } = await getOverviewData(block48?.number ?? undefined)\n      const anyError = error || error24 || error48\n      const overviewData = formatGlideFactoryResponse(data?.glideFactories?.[0])\n      const overviewData24 = formatGlideFactoryResponse(data24?.glideFactories?.[0])\n      const overviewData48 = formatGlideFactoryResponse(data48?.glideFactories?.[0])\n      const allDataAvailable = overviewData && overviewData24 && overviewData48\n      if (anyError || !allDataAvailable) {\n        setFetchState({\n          error: true,\n        })\n      } else {\n        const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\n          overviewData.totalVolumeUSD,\n          overviewData24.totalVolumeUSD,\n          overviewData48.totalVolumeUSD,\n        )\n        const liquidityUSDChange = getPercentChange(overviewData.totalLiquidityUSD, overviewData24.totalLiquidityUSD)\n        // 24H transactions\n        const [txCount, txCountChange] = getChangeForPeriod(\n          overviewData.totalTransactions,\n          overviewData24.totalTransactions,\n          overviewData48.totalTransactions,\n        )\n        const protocolData: ProtocolData = {\n          volumeUSD,\n          volumeUSDChange: typeof volumeUSDChange === 'number' ? volumeUSDChange : 0,\n          liquidityUSD: overviewData.totalLiquidityUSD,\n          liquidityUSDChange,\n          txCount,\n          txCountChange,\n        }\n        setFetchState({\n          error: false,\n          data: protocolData,\n        })\n      }\n    }\n    const allBlocksAvailable = block24?.number && block48?.number\n    if (allBlocksAvailable && !blockError && !fetchState.data) {\n      fetch()\n    }\n  }, [block24, block48, blockError, fetchState])\n\n  return fetchState\n}\n\nexport default useFetchProtocolData\n","import { ONE_DAY_UNIX, PCS_V2_START } from 'config/constants/info'\nimport { getUnixTime } from 'date-fns'\nimport { TransactionType } from 'state/info/types'\nimport { ChartEntry } from '../types'\nimport { MintResponse, SwapResponse, BurnResponse, TokenDayData, PairDayData, GlideDayData } from './types'\n\nexport const mapMints = (mint: MintResponse) => {\n  return {\n    type: TransactionType.MINT,\n    hash: mint.id.split('-')[0],\n    timestamp: mint.timestamp,\n    sender: mint.to,\n    token0Symbol: mint.pair.token0.symbol,\n    token1Symbol: mint.pair.token1.symbol,\n    token0Address: mint.pair.token0.id,\n    token1Address: mint.pair.token1.id,\n    amountUSD: parseFloat(mint.amountUSD),\n    amountToken0: parseFloat(mint.amount0),\n    amountToken1: parseFloat(mint.amount1),\n  }\n}\n\nexport const mapBurns = (burn: BurnResponse) => {\n  return {\n    type: TransactionType.BURN,\n    hash: burn.id.split('-')[0],\n    timestamp: burn.timestamp,\n    sender: burn.sender,\n    token0Symbol: burn.pair.token0.symbol,\n    token1Symbol: burn.pair.token1.symbol,\n    token0Address: burn.pair.token0.id,\n    token1Address: burn.pair.token1.id,\n    amountUSD: parseFloat(burn.amountUSD),\n    amountToken0: parseFloat(burn.amount0),\n    amountToken1: parseFloat(burn.amount1),\n  }\n}\n\nexport const mapSwaps = (swap: SwapResponse) => {\n  return {\n    type: TransactionType.SWAP,\n    hash: swap.id.split('-')[0],\n    timestamp: swap.timestamp,\n    sender: swap.from,\n    token0Symbol: swap.pair.token0.symbol,\n    token1Symbol: swap.pair.token1.symbol,\n    token0Address: swap.pair.token0.id,\n    token1Address: swap.pair.token1.id,\n    amountUSD: parseFloat(swap.amountUSD),\n    amountToken0: parseFloat(swap.amount0In) - parseFloat(swap.amount0Out),\n    amountToken1: parseFloat(swap.amount1In) - parseFloat(swap.amount1Out),\n  }\n}\n\nexport const mapDayData = (tokenDayData: TokenDayData | GlideDayData): ChartEntry => ({\n  date: tokenDayData.date,\n  volumeUSD: parseFloat(tokenDayData.dailyVolumeUSD),\n  liquidityUSD: parseFloat(tokenDayData.totalLiquidityUSD),\n})\n\nexport const mapPairDayData = (pairDayData: PairDayData): ChartEntry => ({\n  date: pairDayData.date,\n  volumeUSD: parseFloat(pairDayData.dailyVolumeUSD),\n  liquidityUSD: parseFloat(pairDayData.reserveUSD),\n})\n\ntype PoolOrTokenFetchFn = (skip: number, address: string) => Promise<{ data?: ChartEntry[]; error: boolean }>\ntype OverviewFetchFn = (skip: number) => Promise<{ data?: ChartEntry[]; error: boolean }>\n\n// Common helper function to retrieve chart data\n// Used for both Pool and Token charts\nexport const fetchChartData = async (\n  getEntityDayDatas: PoolOrTokenFetchFn | OverviewFetchFn,\n  address?: string,\n): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  let chartEntries: ChartEntry[] = []\n  let error = false\n  let skip = 0\n  let allFound = false\n\n  while (!allFound) {\n    // eslint-disable-next-line no-await-in-loop\n    const { data, error: fetchError } = await getEntityDayDatas(skip, address)\n    skip += 1000\n    allFound = data.length < 1000\n    error = fetchError\n    if (data) {\n      chartEntries = chartEntries.concat(data)\n    }\n  }\n\n  if (error || chartEntries.length === 0) {\n    return {\n      error: true,\n    }\n  }\n\n  const formattedDayDatas = chartEntries.reduce((accum: { [date: number]: ChartEntry }, dayData) => {\n    // At this stage we track unix day ordinal for each data point to check for empty days later\n    const dayOrdinal = parseInt((dayData.date / ONE_DAY_UNIX).toFixed(0))\n    return {\n      [dayOrdinal]: dayData,\n      ...accum,\n    }\n  }, {})\n\n  const availableDays = Object.keys(formattedDayDatas).map((dayOrdinal) => parseInt(dayOrdinal, 10))\n\n  const firstAvailableDayData = formattedDayDatas[availableDays[0]]\n  // fill in empty days ( there will be no day datas if no trades made that day )\n  let timestamp = firstAvailableDayData?.date ?? PCS_V2_START\n  let latestLiquidityUSD = firstAvailableDayData?.liquidityUSD ?? 0\n  const endTimestamp = getUnixTime(new Date())\n  while (timestamp < endTimestamp - ONE_DAY_UNIX) {\n    timestamp += ONE_DAY_UNIX\n    const dayOrdinal = parseInt((timestamp / ONE_DAY_UNIX).toFixed(0), 10)\n    if (!Object.keys(formattedDayDatas).includes(dayOrdinal.toString())) {\n      formattedDayDatas[dayOrdinal] = {\n        date: timestamp,\n        volumeUSD: 0,\n        liquidityUSD: latestLiquidityUSD,\n      }\n    } else {\n      latestLiquidityUSD = formattedDayDatas[dayOrdinal].liquidityUSD\n    }\n  }\n\n  return {\n    data: Object.values(formattedDayDatas),\n    error: false,\n  }\n}\n","/* eslint-disable no-await-in-loop */\nimport { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { PCS_V2_START } from 'config/constants/info'\nimport { ChartEntry } from 'state/info/types'\nimport { GlideDayDatasResponse } from '../types'\nimport { fetchChartData, mapDayData } from '../helpers'\n\n/**\n * Data for displaying Liquidity and Volume charts on Overview page\n */\nconst GLIDE_DAY_DATAS = gql`\n  query overviewCharts($startTime: Int!, $skip: Int!) {\n    glideDayDatas(first: 1000, skip: $skip, where: { date_gt: $startTime }, orderBy: date, orderDirection: asc) {\n      date\n      dailyVolumeUSD\n      totalLiquidityUSD\n    }\n  }\n`\n\nconst getOverviewChartData = async (skip: number): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  try {\n    const { glideDayDatas } = await request<GlideDayDatasResponse>(INFO_CLIENT, GLIDE_DAY_DATAS, {\n      startTime: PCS_V2_START,\n      skip,\n    })\n    const data = glideDayDatas.map(mapDayData)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch overview chart data', error)\n    return { error: true }\n  }\n}\n\n/**\n * Fetch historic chart data\n */\nconst useFetchGlobalChartData = (): {\n  error: boolean\n  data: ChartEntry[] | undefined\n} => {\n  const [overviewChartData, setOverviewChartData] = useState<ChartEntry[] | undefined>()\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { data } = await fetchChartData(getOverviewChartData)\n      if (data) {\n        setOverviewChartData(data)\n      } else {\n        setError(true)\n      }\n    }\n    if (!overviewChartData && !error) {\n      fetch()\n    }\n  }, [overviewChartData, error])\n\n  return {\n    error,\n    data: overviewChartData,\n  }\n}\n\nexport default useFetchGlobalChartData\n","import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { Transaction } from 'state/info/types'\nimport { MintResponse, SwapResponse, BurnResponse } from 'state/info/queries/types'\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers'\n\n/**\n * Transactions for Transaction table on the Home page\n */\nconst GLOBAL_TRANSACTIONS = gql`\n  query overviewTransactions {\n    mints: mints(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps: swaps(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    burns: burns(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`\ninterface TransactionResults {\n  mints: MintResponse[]\n  swaps: SwapResponse[]\n  burns: BurnResponse[]\n}\n\nconst fetchTopTransactions = async (): Promise<Transaction[] | undefined> => {\n  try {\n    const data = await request<TransactionResults>(INFO_CLIENT, GLOBAL_TRANSACTIONS)\n\n    if (!data) {\n      return undefined\n    }\n\n    const mints = data.mints.map(mapMints)\n    const burns = data.burns.map(mapBurns)\n    const swaps = data.swaps.map(mapSwaps)\n\n    return [...mints, ...burns, ...swaps].sort((a, b) => {\n      return parseInt(b.timestamp, 10) - parseInt(a.timestamp, 10)\n    })\n  } catch {\n    return undefined\n  }\n}\n\nexport default fetchTopTransactions\n","import { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { TOKEN_BLACKLIST } from 'config/constants/info'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\n\ninterface TopPoolsResponse {\n  pairDayDatas: {\n    id: string\n  }[]\n}\n\n/**\n * Initial pools to display on the home page\n */\nconst fetchTopPools = async (timestamp24hAgo: number): Promise<string[]> => {\n  try {\n    const query = gql`\n      query topPools($blacklist: [String!], $timestamp24hAgo: Int) {\n        pairDayDatas(\n          first: 30\n          where: { dailyTxns_gt: 0, token0_not_in: $blacklist, token1_not_in: $blacklist, date_gt: $timestamp24hAgo }\n          orderBy: dailyVolumeUSD\n          orderDirection: desc\n        ) {\n          id\n        }\n      }\n    `\n    const data = await request<TopPoolsResponse>(INFO_CLIENT, query, { blacklist: TOKEN_BLACKLIST, timestamp24hAgo })\n    // pairDayDatas id has compound id \"0xPOOLADDRESS-NUMBERS\", extracting pool address with .split('-')\n    return data.pairDayDatas.map((p) => p.id.split('-')[0])\n  } catch (error) {\n    console.error('Failed to fetch top pools', error)\n    return []\n  }\n}\n\n/**\n * Fetch top addresses by volume\n */\nconst useTopPoolAddresses = (): string[] => {\n  const [topPoolAddresses, setTopPoolAddresses] = useState([])\n  const [timestamp24hAgo] = getDeltaTimestamps()\n\n  useEffect(() => {\n    const fetch = async () => {\n      const addresses = await fetchTopPools(timestamp24hAgo)\n      setTopPoolAddresses(addresses)\n    }\n    if (topPoolAddresses.length === 0) {\n      fetch()\n    }\n  }, [topPoolAddresses, timestamp24hAgo])\n\n  return topPoolAddresses\n}\n\nexport default useTopPoolAddresses\n","/* eslint-disable no-param-reassign */\nimport { useEffect, useState } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { PoolData } from 'state/info/types'\nimport { getChangeForPeriod, getLpFeesAndApr, getPercentChange } from 'views/Info/utils/infoDataHelpers'\n\ninterface PoolFields {\n  id: string\n  reserve0: string\n  reserve1: string\n  reserveUSD: string\n  volumeUSD: string\n  token0Price: string\n  token1Price: string\n  token0: {\n    id: string\n    symbol: string\n    name: string\n  }\n  token1: {\n    id: string\n    symbol: string\n    name: string\n  }\n}\n\ninterface FormattedPoolFields\n  extends Omit<PoolFields, 'volumeUSD' | 'reserveUSD' | 'reserve0' | 'reserve1' | 'token0Price' | 'token1Price'> {\n  volumeUSD: number\n  reserveUSD: number\n  reserve0: number\n  reserve1: number\n  token0Price: number\n  token1Price: number\n}\n\ninterface PoolsQueryResponse {\n  now: PoolFields[]\n  oneDayAgo: PoolFields[]\n  twoDaysAgo: PoolFields[]\n  oneWeekAgo: PoolFields[]\n  twoWeeksAgo: PoolFields[]\n}\n\n/**\n * Data for displaying pool tables (on multiple pages, used throughout the site)\n * Note: Don't try to refactor it to use variables, server throws error if blocks passed as undefined variable\n * only works if its hard-coded into query string\n */\nconst POOL_AT_BLOCK = (block: number | null, pools: string[]) => {\n  const blockString = block ? `block: {number: ${block}}` : ``\n  const addressesString = `[\"${pools.join('\",\"')}\"]`\n  return `pairs(\n    where: { id_in: ${addressesString} }\n    ${blockString}\n    orderBy: trackedReserveELA\n    orderDirection: desc\n  ) {\n    id\n    reserve0\n    reserve1\n    reserveUSD\n    volumeUSD\n    token0Price\n    token1Price\n    token0 {\n      id\n      symbol\n      name\n    }\n    token1 {\n      id\n      symbol\n      name\n    }\n  }`\n}\n\nconst fetchPoolData = async (\n  block24h: number,\n  block48h: number,\n  block7d: number,\n  block14d: number,\n  poolAddresses: string[],\n) => {\n  try {\n    const query = gql`\n      query pools {\n        now: ${POOL_AT_BLOCK(null, poolAddresses)}\n        oneDayAgo: ${POOL_AT_BLOCK(block24h, poolAddresses)}\n        twoDaysAgo: ${POOL_AT_BLOCK(block48h, poolAddresses)}\n        oneWeekAgo: ${POOL_AT_BLOCK(block7d, poolAddresses)}\n        twoWeeksAgo: ${POOL_AT_BLOCK(block14d, poolAddresses)}\n      }\n    `\n    const data = await request<PoolsQueryResponse>(INFO_CLIENT, query)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch pool data', error)\n    return { error: true }\n  }\n}\n\n// Transforms pools into \"0xADDRESS: { ...PoolFields }\" format and cast strings to numbers\nconst parsePoolData = (pairs?: PoolFields[]) => {\n  if (!pairs) {\n    return {}\n  }\n  return pairs.reduce((accum: { [address: string]: FormattedPoolFields }, poolData) => {\n    const { volumeUSD, reserveUSD, reserve0, reserve1, token0Price, token1Price } = poolData\n    accum[poolData.id] = {\n      ...poolData,\n      volumeUSD: parseFloat(volumeUSD),\n      reserveUSD: parseFloat(reserveUSD),\n      reserve0: parseFloat(reserve0),\n      reserve1: parseFloat(reserve1),\n      token0Price: parseFloat(token0Price),\n      token1Price: parseFloat(token1Price),\n    }\n    return accum\n  }, {})\n}\n\ninterface PoolDatas {\n  error: boolean\n  data?: {\n    [address: string]: PoolData\n  }\n}\n\n/**\n * Fetch top pools by liquidity\n */\nconst usePoolDatas = (poolAddresses: string[]): PoolDatas => {\n  const [fetchState, setFetchState] = useState<PoolDatas>({ error: false })\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24h, t48h, t7d, t14d])\n  const [block24h, block48h, block7d, block14d] = blocks ?? []\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error, data } = await fetchPoolData(\n        block24h.number,\n        block48h.number,\n        block7d.number,\n        block14d.number,\n        poolAddresses,\n      )\n      if (error) {\n        setFetchState({ error: true })\n      } else {\n        const formattedPoolData = parsePoolData(data?.now)\n        const formattedPoolData24h = parsePoolData(data?.oneDayAgo)\n        const formattedPoolData48h = parsePoolData(data?.twoDaysAgo)\n        const formattedPoolData7d = parsePoolData(data?.oneWeekAgo)\n        const formattedPoolData14d = parsePoolData(data?.twoWeeksAgo)\n\n        // Calculate data and format\n        const formatted = poolAddresses.reduce((accum: { [address: string]: PoolData }, address) => {\n          // Undefined data is possible if pool is brand new and didn't exist one day ago or week ago.\n          const current: FormattedPoolFields | undefined = formattedPoolData[address]\n          const oneDay: FormattedPoolFields | undefined = formattedPoolData24h[address]\n          const twoDays: FormattedPoolFields | undefined = formattedPoolData48h[address]\n          const week: FormattedPoolFields | undefined = formattedPoolData7d[address]\n          const twoWeeks: FormattedPoolFields | undefined = formattedPoolData14d[address]\n\n          const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\n            current?.volumeUSD,\n            oneDay?.volumeUSD,\n            twoDays?.volumeUSD,\n          )\n          const [volumeUSDWeek, volumeUSDChangeWeek] = getChangeForPeriod(\n            current?.volumeUSD,\n            week?.volumeUSD,\n            twoWeeks?.volumeUSD,\n          )\n\n          const liquidityUSD = current ? current.reserveUSD : 0\n\n          const liquidityUSDChange = getPercentChange(current?.reserveUSD, oneDay?.reserveUSD)\n\n          const liquidityToken0 = current ? current.reserve0 : 0\n          const liquidityToken1 = current ? current.reserve1 : 0\n\n          const { totalFees24h, totalFees7d, lpFees24h, lpFees7d, lpApr7d } = getLpFeesAndApr(\n            volumeUSD,\n            volumeUSDWeek,\n            liquidityUSD,\n          )\n\n          if (current) {\n            accum[address] = {\n              address,\n              token0: {\n                address: current.token0.id,\n                name: current.token0.name,\n                symbol: current.token0.symbol,\n              },\n              token1: {\n                address: current.token1.id,\n                name: current.token1.name,\n                symbol: current.token1.symbol,\n              },\n              token0Price: current.token0Price,\n              token1Price: current.token1Price,\n              volumeUSD,\n              volumeUSDChange,\n              volumeUSDWeek,\n              volumeUSDChangeWeek,\n              totalFees24h,\n              totalFees7d,\n              lpFees24h,\n              lpFees7d,\n              lpApr7d,\n              liquidityUSD,\n              liquidityUSDChange,\n              liquidityToken0,\n              liquidityToken1,\n            }\n          }\n\n          return accum\n        }, {})\n        setFetchState({ data: formatted, error: false })\n      }\n    }\n\n    const allBlocksAvailable = block24h?.number && block48h?.number && block7d?.number && block14d?.number\n    if (poolAddresses.length > 0 && allBlocksAvailable && !blockError) {\n      fetch()\n    }\n  }, [poolAddresses, block24h, block48h, block7d, block14d, blockError])\n\n  return fetchState\n}\n\nexport default usePoolDatas\n","import { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\nimport { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\n\nexport interface ElaPrices {\n  current: number\n  oneDay: number\n  twoDay: number\n  week: number\n}\n\nconst ELA_PRICES = gql`\n  query prices($block24: Int!, $block48: Int!, $blockWeek: Int!) {\n    current: bundle(id: \"1\") {\n      elaPrice\n    }\n    oneDay: bundle(id: \"1\", block: { number: $block24 }) {\n      elaPrice\n    }\n    twoDay: bundle(id: \"1\", block: { number: $block48 }) {\n      elaPrice\n    }\n    oneWeek: bundle(id: \"1\", block: { number: $blockWeek }) {\n      elaPrice\n    }\n  }\n`\n\ninterface PricesResponse {\n  current: {\n    elaPrice: string\n  }\n  oneDay: {\n    elaPrice: string\n  }\n  twoDay: {\n    elaPrice: string\n  }\n  oneWeek: {\n    elaPrice: string\n  }\n}\n\nconst fetchElaPrices = async (\n  block24: number,\n  block48: number,\n  blockWeek: number,\n): Promise<{ elaPrices: ElaPrices | undefined; error: boolean }> => {\n  try {\n    const data = await request<PricesResponse>(INFO_CLIENT, ELA_PRICES, {\n      block24,\n      block48,\n      blockWeek,\n    })\n    return {\n      error: false,\n      elaPrices: {\n        current: parseFloat(data.current?.elaPrice ?? '0'),\n        oneDay: parseFloat(data.oneDay?.elaPrice ?? '0'),\n        twoDay: parseFloat(data.twoDay?.elaPrice ?? '0'),\n        week: parseFloat(data.oneWeek?.elaPrice ?? '0'),\n      },\n    }\n  } catch (error) {\n    console.error('Failed to fetch ELA prices', error)\n    return {\n      error: true,\n      elaPrices: undefined,\n    }\n  }\n}\n\n/**\n * Returns ELA prices at current, 24h, 48h, and 7d intervals\n */\nexport const useElaPrices = (): ElaPrices | undefined => {\n  const [prices, setPrices] = useState<ElaPrices | undefined>()\n  const [error, setError] = useState(false)\n\n  const [t24, t48, tWeek] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24, t48, tWeek])\n\n  useEffect(() => {\n    const fetch = async () => {\n      const [block24, block48, blockWeek] = blocks\n      const { elaPrices, error: fetchError } = await fetchElaPrices(block24.number, block48.number, blockWeek.number)\n      if (fetchError) {\n        setError(true)\n      } else {\n        setPrices(elaPrices)\n      }\n    }\n    if (!prices && !error && blocks && !blockError) {\n      fetch()\n    }\n  }, [error, prices, blocks, blockError])\n\n  return prices\n}\n","/* eslint-disable no-param-reassign */\nimport { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { getPercentChange, getChangeForPeriod, getAmountChange } from 'views/Info/utils/infoDataHelpers'\nimport { TokenData } from 'state/info/types'\nimport { useElaPrices } from 'views/Info/hooks/useElaPrices'\n\ninterface TokenFields {\n  id: string\n  symbol: string\n  name: string\n  derivedELA: string // Price in ELA per token\n  derivedUSD: string // Price in USD per token\n  tradeVolumeUSD: string\n  totalTransactions: string\n  totalLiquidity: string\n}\n\ninterface FormattedTokenFields\n  extends Omit<TokenFields, 'derivedELA' | 'derivedUSD' | 'tradeVolumeUSD' | 'totalTransactions' | 'totalLiquidity'> {\n  derivedELA: number\n  derivedUSD: number\n  tradeVolumeUSD: number\n  totalTransactions: number\n  totalLiquidity: number\n}\n\ninterface TokenQueryResponse {\n  now: TokenFields[]\n  oneDayAgo: TokenFields[]\n  twoDaysAgo: TokenFields[]\n  oneWeekAgo: TokenFields[]\n  twoWeeksAgo: TokenFields[]\n}\n\n/**\n * Main token data to display on Token page\n */\nconst TOKEN_AT_BLOCK = (block: number | undefined, tokens: string[]) => {\n  const addressesString = `[\"${tokens.join('\",\"')}\"]`\n  const blockString = block ? `block: {number: ${block}}` : ``\n  return `tokens(\n      where: {id_in: ${addressesString}}\n      ${blockString}\n      orderBy: tradeVolumeUSD\n      orderDirection: desc\n    ) {\n      id\n      symbol\n      name\n      derivedELA\n      derivedUSD\n      tradeVolumeUSD\n      totalTransactions\n      totalLiquidity\n    }\n  `\n}\n\nconst fetchTokenData = async (\n  block24h: number,\n  block48h: number,\n  block7d: number,\n  block14d: number,\n  tokenAddresses: string[],\n) => {\n  try {\n    const query = gql`\n      query tokens {\n        now: ${TOKEN_AT_BLOCK(null, tokenAddresses)}\n        oneDayAgo: ${TOKEN_AT_BLOCK(block24h, tokenAddresses)}\n        twoDaysAgo: ${TOKEN_AT_BLOCK(block48h, tokenAddresses)}\n        oneWeekAgo: ${TOKEN_AT_BLOCK(block7d, tokenAddresses)}\n        twoWeeksAgo: ${TOKEN_AT_BLOCK(block14d, tokenAddresses)}\n      }\n    `\n    const data = await request<TokenQueryResponse>(INFO_CLIENT, query)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch token data', error)\n    return { error: true }\n  }\n}\n\n// Transforms tokens into \"0xADDRESS: { ...TokenFields }\" format and cast strings to numbers\nconst parseTokenData = (tokens?: TokenFields[]) => {\n  if (!tokens) {\n    return {}\n  }\n  return tokens.reduce((accum: { [address: string]: FormattedTokenFields }, tokenData) => {\n    const { derivedELA, derivedUSD, tradeVolumeUSD, totalTransactions, totalLiquidity } = tokenData\n    accum[tokenData.id] = {\n      ...tokenData,\n      derivedELA: parseFloat(derivedELA),\n      derivedUSD: parseFloat(derivedUSD),\n      tradeVolumeUSD: parseFloat(tradeVolumeUSD),\n      totalTransactions: parseFloat(totalTransactions),\n      totalLiquidity: parseFloat(totalLiquidity),\n    }\n    return accum\n  }, {})\n}\n\ninterface TokenDatas {\n  error: boolean\n  data?: {\n    [address: string]: TokenData\n  }\n}\n\n/**\n * Fetch top addresses by volume\n */\nconst useFetchedTokenDatas = (tokenAddresses: string[]): TokenDatas => {\n  const [fetchState, setFetchState] = useState<TokenDatas>({ error: false })\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24h, t48h, t7d, t14d])\n  const [block24h, block48h, block7d, block14d] = blocks ?? []\n  const elaPrices = useElaPrices()\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error, data } = await fetchTokenData(\n        block24h.number,\n        block48h.number,\n        block7d.number,\n        block14d.number,\n        tokenAddresses,\n      )\n      if (error) {\n        setFetchState({ error: true })\n      } else {\n        const parsed = parseTokenData(data?.now)\n        const parsed24 = parseTokenData(data?.oneDayAgo)\n        const parsed48 = parseTokenData(data?.twoDaysAgo)\n        const parsed7d = parseTokenData(data?.oneWeekAgo)\n        const parsed14d = parseTokenData(data?.twoWeeksAgo)\n\n        // Calculate data and format\n        const formatted = tokenAddresses.reduce((accum: { [address: string]: TokenData }, address) => {\n          const current: FormattedTokenFields | undefined = parsed[address]\n          const oneDay: FormattedTokenFields | undefined = parsed24[address]\n          const twoDays: FormattedTokenFields | undefined = parsed48[address]\n          const week: FormattedTokenFields | undefined = parsed7d[address]\n          const twoWeeks: FormattedTokenFields | undefined = parsed14d[address]\n\n          const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\n            current?.tradeVolumeUSD,\n            oneDay?.tradeVolumeUSD,\n            twoDays?.tradeVolumeUSD,\n          )\n          const [volumeUSDWeek] = getChangeForPeriod(\n            current?.tradeVolumeUSD,\n            week?.tradeVolumeUSD,\n            twoWeeks?.tradeVolumeUSD,\n          )\n          const liquidityUSD = current ? current.totalLiquidity * current.derivedUSD : 0\n          const liquidityUSDOneDayAgo = oneDay ? oneDay.totalLiquidity * oneDay.derivedUSD : 0\n          const liquidityUSDChange = getPercentChange(liquidityUSD, liquidityUSDOneDayAgo)\n          const liquidityToken = current ? current.totalLiquidity : 0\n          // Prices of tokens for now, 24h ago and 7d ago\n          const priceUSD = current ? current.derivedELA * elaPrices.current : 0\n          const priceUSDOneDay = oneDay ? oneDay.derivedELA * elaPrices.oneDay : 0\n          const priceUSDWeek = week ? week.derivedELA * elaPrices.week : 0\n          const priceUSDChange = getPercentChange(priceUSD, priceUSDOneDay)\n          const priceUSDChangeWeek = getPercentChange(priceUSD, priceUSDWeek)\n          const txCount = getAmountChange(current?.totalTransactions, oneDay?.totalTransactions)\n\n          accum[address] = {\n            exists: !!current,\n            address,\n            name: current ? current.name : '',\n            symbol: current ? current.symbol : '',\n            volumeUSD,\n            volumeUSDChange,\n            volumeUSDWeek,\n            txCount,\n            liquidityUSD,\n            liquidityUSDChange,\n            liquidityToken,\n            priceUSD,\n            priceUSDChange,\n            priceUSDChangeWeek,\n          }\n\n          return accum\n        }, {})\n        setFetchState({ data: formatted, error: false })\n      }\n    }\n    const allBlocksAvailable = block24h?.number && block48h?.number && block7d?.number && block14d?.number\n    if (tokenAddresses.length > 0 && allBlocksAvailable && !blockError && elaPrices) {\n      fetch()\n    }\n  }, [tokenAddresses, block24h, block48h, block7d, block14d, blockError, elaPrices])\n\n  return fetchState\n}\n\nexport default useFetchedTokenDatas\n","import { useEffect, useState } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { TOKEN_BLACKLIST } from 'config/constants/info'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\n\ninterface TopTokensResponse {\n  tokenDayDatas: {\n    id: string\n  }[]\n}\n\n/**\n * Tokens to display on Home page\n * The actual data is later requested in tokenData.ts\n * Note: dailyTxns_gt: 300 is there to prevent fetching incorrectly priced tokens with high dailyVolumeUSD\n */\nconst fetchTopTokens = async (timestamp24hAgo: number): Promise<string[]> => {\n  try {\n    const query = gql`\n      query topTokens($blacklist: [String!], $timestamp24hAgo: Int) {\n        tokenDayDatas(\n          first: 30\n          where: { dailyTxns_gt: 0, id_not_in: $blacklist, date_gt: $timestamp24hAgo }\n          orderBy: dailyVolumeUSD\n          orderDirection: desc\n        ) {\n          id\n        }\n      }\n    `\n    const data = await request<TopTokensResponse>(INFO_CLIENT, query, { blacklist: TOKEN_BLACKLIST, timestamp24hAgo })\n    // tokenDayDatas id has compound id \"0xTOKENADDRESS-NUMBERS\", extracting token address with .split('-')\n    return data.tokenDayDatas.map((t) => t.id.split('-')[0])\n  } catch (error) {\n    console.error('Failed to fetch top tokens', error)\n    return []\n  }\n}\n\n/**\n * Fetch top addresses by volume\n */\nconst useTopTokenAddresses = (): string[] => {\n  const [topTokenAddresses, setTopTokenAddresses] = useState([])\n  const [timestamp24hAgo] = getDeltaTimestamps()\n\n  useEffect(() => {\n    const fetch = async () => {\n      const addresses = await fetchTopTokens(timestamp24hAgo)\n      setTopTokenAddresses(addresses)\n    }\n    if (topTokenAddresses.length === 0) {\n      fetch()\n    }\n  }, [topTokenAddresses, timestamp24hAgo])\n\n  return topTokenAddresses\n}\n\nexport default useTopTokenAddresses\n","import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { ChartEntry } from 'state/info/types'\nimport { PCS_V2_START } from 'config/constants/info'\nimport { PairDayDatasResponse } from '../types'\nimport { mapPairDayData, fetchChartData } from '../helpers'\n\nconst getPoolChartData = async (skip: number, address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  try {\n    const query = gql`\n      query pairDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\n        pairDayDatas(\n          first: 1000\n          skip: $skip\n          where: { pairAddress: $address, date_gt: $startTime }\n          orderBy: date\n          orderDirection: asc\n        ) {\n          date\n          dailyVolumeUSD\n          reserveUSD\n        }\n      }\n    `\n    const { pairDayDatas } = await request<PairDayDatasResponse>(INFO_CLIENT, query, {\n      startTime: PCS_V2_START,\n      skip,\n      address,\n    })\n    const data = pairDayDatas.map(mapPairDayData)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch pool chart data', error)\n    return { error: true }\n  }\n}\n\nconst fetchPoolChartData = async (address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  return fetchChartData(getPoolChartData, address)\n}\n\nexport default fetchPoolChartData\n","import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { Transaction } from 'state/info/types'\nimport { MintResponse, SwapResponse, BurnResponse } from 'state/info/queries/types'\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers'\n/**\n * Transactions of the given pool, used on Pool page\n */\nconst POOL_TRANSACTIONS = gql`\n  query poolTransactions($address: Bytes!) {\n    mints(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    burns(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`\n\ninterface TransactionResults {\n  mints: MintResponse[]\n  swaps: SwapResponse[]\n  burns: BurnResponse[]\n}\n\nconst fetchPoolTransactions = async (address: string): Promise<{ data?: Transaction[]; error: boolean }> => {\n  try {\n    const data = await request<TransactionResults>(INFO_CLIENT, POOL_TRANSACTIONS, {\n      address,\n    })\n    const mints = data.mints.map(mapMints)\n    const burns = data.burns.map(mapBurns)\n    const swaps = data.swaps.map(mapSwaps)\n    return { data: [...mints, ...burns, ...swaps], error: false }\n  } catch (error) {\n    console.error(`Failed to fetch transactions for pool ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchPoolTransactions\n","import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { ChartEntry } from 'state/info/types'\nimport { PCS_V2_START } from 'config/constants/info'\nimport { TokenDayDatasResponse } from '../types'\nimport { mapDayData, fetchChartData } from '../helpers'\n\nconst getTokenChartData = async (skip: number, address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  try {\n    const query = gql`\n      query tokenDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\n        tokenDayDatas(\n          first: 1000\n          skip: $skip\n          where: { token: $address, date_gt: $startTime }\n          orderBy: date\n          orderDirection: asc\n        ) {\n          date\n          dailyVolumeUSD\n          totalLiquidityUSD\n        }\n      }\n    `\n    const { tokenDayDatas } = await request<TokenDayDatasResponse>(INFO_CLIENT, query, {\n      startTime: PCS_V2_START,\n      skip,\n      address,\n    })\n    const data = tokenDayDatas.map(mapDayData)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch token chart data', error)\n    return { error: true }\n  }\n}\n\nconst fetchTokenChartData = async (address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  return fetchChartData(getTokenChartData, address)\n}\n\nexport default fetchTokenChartData\n","import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { Transaction } from 'state/info/types'\nimport { MintResponse, SwapResponse, BurnResponse } from 'state/info/queries/types'\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers'\n\n/**\n * Data to display transaction table on Token page\n */\nconst TOKEN_TRANSACTIONS = gql`\n  query tokenTransactions($address: Bytes!) {\n    mintsAs0: mints(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    mintsAs1: mints(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    swapsAs0: swaps(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    swapsAs1: swaps(first: 10, orderBy: timestamp, orderDirection: desc, where: { token1: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    burnsAs0: burns(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n    burnsAs1: burns(first: 10, orderBy: timestamp, orderDirection: desc, where: { token1: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`\n\ninterface TransactionResults {\n  mintsAs0: MintResponse[]\n  mintsAs1: MintResponse[]\n  swapsAs0: SwapResponse[]\n  swapsAs1: SwapResponse[]\n  burnsAs0: BurnResponse[]\n  burnsAs1: BurnResponse[]\n}\n\nconst fetchTokenTransactions = async (address: string): Promise<{ data?: Transaction[]; error: boolean }> => {\n  try {\n    const data = await request<TransactionResults>(INFO_CLIENT, TOKEN_TRANSACTIONS, {\n      address,\n    })\n    const mints0 = data.mintsAs0.map(mapMints)\n    const mints1 = data.mintsAs1.map(mapMints)\n\n    const burns0 = data.burnsAs0.map(mapBurns)\n    const burns1 = data.burnsAs1.map(mapBurns)\n\n    const swaps0 = data.swapsAs0.map(mapSwaps)\n    const swaps1 = data.swapsAs1.map(mapSwaps)\n\n    return { data: [...mints0, ...mints1, ...burns0, ...burns1, ...swaps0, ...swaps1], error: false }\n  } catch (error) {\n    console.error(`Failed to fetch transactions for token ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchTokenTransactions\n","import { getUnixTime } from 'date-fns'\nimport { gql } from 'graphql-request'\nimport { getBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { multiQuery } from 'views/Info/utils/infoQueryHelpers'\nimport { PriceChartEntry } from 'state/info/types'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\n\nconst getPriceSubqueries = (tokenAddress: string, blocks: any) =>\n  blocks.map(\n    (block: any) => `\n      t${block.timestamp}:token(id:\"${tokenAddress}\", block: { number: ${block.number} }) { \n        derivedELA\n      }\n      b${block.timestamp}: bundle(id:\"1\", block: { number: ${block.number} }) { \n        elaPrice\n      }\n    `,\n  )\n\n/**\n * Price data for token and ela based on block number\n */\nconst priceQueryConstructor = (subqueries: string[]) => {\n  return gql`\n    query tokenPriceData {\n      ${subqueries}\n    }\n  `\n}\n\nconst fetchTokenPriceData = async (\n  address: string,\n  interval: number,\n  startTimestamp: number,\n): Promise<{\n  data?: PriceChartEntry[]\n  error: boolean\n}> => {\n  // Construct timestamps to query against\n  const endTimestamp = getUnixTime(new Date())\n  const timestamps = []\n  let time = startTimestamp\n  while (time <= endTimestamp) {\n    timestamps.push(time)\n    time += interval\n  }\n  try {\n    const blocks = await getBlocksFromTimestamps(timestamps, 'asc', 500)\n    if (!blocks || blocks.length === 0) {\n      console.error('Error fetching blocks for timestamps', timestamps)\n      return {\n        error: false,\n      }\n    }\n\n    const prices: any | undefined = await multiQuery(\n      priceQueryConstructor,\n      getPriceSubqueries(address, blocks),\n      INFO_CLIENT,\n      200,\n    )\n\n    if (!prices) {\n      console.error('Price data failed to load')\n      return {\n        error: false,\n      }\n    }\n\n    // format token ELA price results\n    const tokenPrices: {\n      timestamp: string\n      derivedELA: number\n      priceUSD: number\n    }[] = []\n\n    // Get Token prices in ELA\n    Object.keys(prices).forEach((priceKey) => {\n      const timestamp = priceKey.split('t')[1]\n      // if its ELA price e.g. `b123` split('t')[1] will be undefined and skip ELA price entry\n      if (timestamp) {\n        tokenPrices.push({\n          timestamp,\n          derivedELA: prices[priceKey]?.derivedELA ? parseFloat(prices[priceKey].derivedELA) : 0,\n          priceUSD: 0,\n        })\n      }\n    })\n\n    // Go through ELA USD prices and calculate Token price based on it\n    Object.keys(prices).forEach((priceKey) => {\n      const timestamp = priceKey.split('b')[1]\n      // if its Token price e.g. `t123` split('b')[1] will be undefined and skip Token price entry\n      if (timestamp) {\n        const tokenPriceIndex = tokenPrices.findIndex((tokenPrice) => tokenPrice.timestamp === timestamp)\n        if (tokenPriceIndex >= 0) {\n          const { derivedELA } = tokenPrices[tokenPriceIndex]\n          tokenPrices[tokenPriceIndex].priceUSD = parseFloat(prices[priceKey]?.elaPrice ?? 0) * derivedELA\n        }\n      }\n    })\n\n    // graphql-request does not guarantee same ordering of batched requests subqueries, hence sorting by timestamp from oldest to newest\n    tokenPrices.sort((a, b) => parseInt(a.timestamp, 10) - parseInt(b.timestamp, 10))\n\n    const formattedHistory = []\n\n    // for each timestamp, construct the open and close price\n    for (let i = 0; i < tokenPrices.length - 1; i++) {\n      formattedHistory.push({\n        time: parseFloat(tokenPrices[i].timestamp),\n        open: tokenPrices[i].priceUSD,\n        close: tokenPrices[i + 1].priceUSD,\n        high: tokenPrices[i + 1].priceUSD,\n        low: tokenPrices[i].priceUSD,\n      })\n    }\n\n    return { data: formattedHistory, error: false }\n  } catch (error) {\n    console.error(`Failed to fetch price data for token ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchTokenPriceData\n","import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { TOKEN_BLACKLIST } from 'config/constants/info'\n\n/**\n * Data for showing Pools table on the Token page\n */\nconst POOLS_FOR_TOKEN = gql`\n  query poolsForToken($address: Bytes!, $blacklist: [String!]) {\n    asToken0: pairs(\n      first: 15\n      orderBy: trackedReserveELA\n      orderDirection: desc\n      where: { totalTransactions_gt: 100, token0: $address, token1_not_in: $blacklist }\n    ) {\n      id\n    }\n    asToken1: pairs(\n      first: 15\n      orderBy: trackedReserveELA\n      orderDirection: desc\n      where: { totalTransactions_gt: 100, token1: $address, token0_not_in: $blacklist }\n    ) {\n      id\n    }\n  }\n`\n\ninterface PoolsForTokenResponse {\n  asToken0: {\n    id: string\n  }[]\n  asToken1: {\n    id: string\n  }[]\n}\n\nconst fetchPoolsForToken = async (\n  address: string,\n): Promise<{\n  error: boolean\n  addresses?: string[]\n}> => {\n  try {\n    const data = await request<PoolsForTokenResponse>(INFO_CLIENT, POOLS_FOR_TOKEN, {\n      address,\n      blacklist: TOKEN_BLACKLIST,\n    })\n    return {\n      error: false,\n      addresses: data.asToken0.concat(data.asToken1).map((p) => p.id),\n    }\n  } catch (error) {\n    console.error(`Failed to fetch pools for token ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchPoolsForToken\n","import { useCallback, useEffect, useState, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getUnixTime, startOfHour, Duration, sub } from 'date-fns'\nimport { AppState, AppDispatch } from 'state'\nimport { isAddress } from 'utils'\nimport { Transaction } from 'state/info/types'\nimport fetchPoolChartData from 'state/info/queries/pools/chartData'\nimport fetchPoolTransactions from 'state/info/queries/pools/transactions'\nimport fetchTokenChartData from 'state/info/queries/tokens/chartData'\nimport fetchTokenTransactions from 'state/info/queries/tokens/transactions'\nimport fetchTokenPriceData from 'state/info/queries/tokens/priceData'\nimport fetchPoolsForToken from 'state/info/queries/tokens/poolsForToken'\nimport {\n  updateProtocolData,\n  updateProtocolChartData,\n  updateProtocolTransactions,\n  updatePoolData,\n  addPoolKeys,\n  updatePoolChartData,\n  updatePoolTransactions,\n  updateTokenData,\n  addTokenKeys,\n  addTokenPoolAddresses,\n  updateTokenChartData,\n  updateTokenPriceData,\n  updateTokenTransactions,\n} from './actions'\nimport { ProtocolData, PoolData, TokenData, ChartEntry, PriceChartEntry } from './types'\n\n// Protocol hooks\n\nexport const useProtocolData = (): [ProtocolData | undefined, (protocolData: ProtocolData) => void] => {\n  const protocolData: ProtocolData | undefined = useSelector((state: AppState) => state.info.protocol.overview)\n\n  const dispatch = useDispatch<AppDispatch>()\n  const setProtocolData: (protocolData: ProtocolData) => void = useCallback(\n    (data: ProtocolData) => dispatch(updateProtocolData({ protocolData: data })),\n    [dispatch],\n  )\n\n  return [protocolData, setProtocolData]\n}\n\nexport const useProtocolChartData = (): [ChartEntry[] | undefined, (chartData: ChartEntry[]) => void] => {\n  const chartData: ChartEntry[] | undefined = useSelector((state: AppState) => state.info.protocol.chartData)\n  const dispatch = useDispatch<AppDispatch>()\n  const setChartData: (chartData: ChartEntry[]) => void = useCallback(\n    (data: ChartEntry[]) => dispatch(updateProtocolChartData({ chartData: data })),\n    [dispatch],\n  )\n  return [chartData, setChartData]\n}\n\nexport const useProtocolTransactions = (): [Transaction[] | undefined, (transactions: Transaction[]) => void] => {\n  const transactions: Transaction[] | undefined = useSelector((state: AppState) => state.info.protocol.transactions)\n  const dispatch = useDispatch<AppDispatch>()\n  const setTransactions: (transactions: Transaction[]) => void = useCallback(\n    (transactionsData: Transaction[]) => dispatch(updateProtocolTransactions({ transactions: transactionsData })),\n    [dispatch],\n  )\n  return [transactions, setTransactions]\n}\n\n// Pools hooks\n\nexport const useAllPoolData = (): {\n  [address: string]: { data?: PoolData }\n} => {\n  return useSelector((state: AppState) => state.info.pools.byAddress)\n}\n\nexport const useUpdatePoolData = (): ((pools: PoolData[]) => void) => {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback((pools: PoolData[]) => dispatch(updatePoolData({ pools })), [dispatch])\n}\n\nexport const useAddPoolKeys = (): ((addresses: string[]) => void) => {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback((poolAddresses: string[]) => dispatch(addPoolKeys({ poolAddresses })), [dispatch])\n}\n\nexport const usePoolDatas = (poolAddresses: string[]): PoolData[] => {\n  const allPoolData = useAllPoolData()\n  const addNewPoolKeys = useAddPoolKeys()\n\n  const untrackedAddresses = poolAddresses.reduce((accum: string[], address) => {\n    if (!Object.keys(allPoolData).includes(address)) {\n      accum.push(address)\n    }\n    return accum\n  }, [])\n\n  useEffect(() => {\n    if (untrackedAddresses) {\n      addNewPoolKeys(untrackedAddresses)\n    }\n  }, [addNewPoolKeys, untrackedAddresses])\n\n  const poolsWithData = poolAddresses\n    .map((address) => {\n      return allPoolData[address]?.data\n    })\n    .filter((pool) => pool)\n\n  return poolsWithData\n}\n\nexport const usePoolChartData = (address: string): ChartEntry[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const pool = useSelector((state: AppState) => state.info.pools.byAddress[address])\n  const chartData = pool?.chartData\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error: fetchError, data } = await fetchPoolChartData(address)\n      if (!fetchError && data) {\n        dispatch(updatePoolChartData({ poolAddress: address, chartData: data }))\n      }\n      if (fetchError) {\n        setError(fetchError)\n      }\n    }\n    if (!chartData && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, chartData])\n\n  return chartData\n}\n\nexport const usePoolTransactions = (address: string): Transaction[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const pool = useSelector((state: AppState) => state.info.pools.byAddress[address])\n  const transactions = pool?.transactions\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error: fetchError, data } = await fetchPoolTransactions(address)\n      if (fetchError) {\n        setError(true)\n      } else {\n        dispatch(updatePoolTransactions({ poolAddress: address, transactions: data }))\n      }\n    }\n    if (!transactions && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, transactions])\n\n  return transactions\n}\n\n// Tokens hooks\n\nexport const useAllTokenData = (): {\n  [address: string]: { data?: TokenData }\n} => {\n  return useSelector((state: AppState) => state.info.tokens.byAddress)\n}\n\nexport const useUpdateTokenData = (): ((tokens: TokenData[]) => void) => {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback(\n    (tokens: TokenData[]) => {\n      dispatch(updateTokenData({ tokens }))\n    },\n    [dispatch],\n  )\n}\n\nexport const useAddTokenKeys = (): ((addresses: string[]) => void) => {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback((tokenAddresses: string[]) => dispatch(addTokenKeys({ tokenAddresses })), [dispatch])\n}\n\nexport const useTokenDatas = (addresses?: string[]): TokenData[] | undefined => {\n  const allTokenData = useAllTokenData()\n  const addNewTokenKeys = useAddTokenKeys()\n\n  // if token not tracked yet track it\n  addresses?.forEach((a) => {\n    if (!allTokenData[a]) {\n      addNewTokenKeys([a])\n    }\n  })\n\n  const tokensWithData = useMemo(() => {\n    if (!addresses) {\n      return undefined\n    }\n    return addresses\n      .map((a) => {\n        return allTokenData[a]?.data\n      })\n      .filter((token) => token)\n  }, [addresses, allTokenData])\n\n  return tokensWithData\n}\n\nexport const useTokenData = (address: string | undefined): TokenData | undefined => {\n  const allTokenData = useAllTokenData()\n  const addNewTokenKeys = useAddTokenKeys()\n\n  if (!address || !isAddress(address)) {\n    return undefined\n  }\n\n  // if token not tracked yet track it\n  if (!allTokenData[address]) {\n    addNewTokenKeys([address])\n  }\n\n  return allTokenData[address]?.data\n}\n\nexport const usePoolsForToken = (address: string): string[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\n  const poolsForToken = token.poolAddresses\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error: fetchError, addresses } = await fetchPoolsForToken(address)\n      if (!fetchError && addresses) {\n        dispatch(addTokenPoolAddresses({ tokenAddress: address, poolAddresses: addresses }))\n      }\n      if (fetchError) {\n        setError(fetchError)\n      }\n    }\n    if (!poolsForToken && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, poolsForToken])\n\n  return poolsForToken\n}\n\nexport const useTokenChartData = (address: string): ChartEntry[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\n  const { chartData } = token\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error: fetchError, data } = await fetchTokenChartData(address)\n      if (!fetchError && data) {\n        dispatch(updateTokenChartData({ tokenAddress: address, chartData: data }))\n      }\n      if (fetchError) {\n        setError(fetchError)\n      }\n    }\n    if (!chartData && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, chartData])\n\n  return chartData\n}\n\nexport const useTokenPriceData = (\n  address: string,\n  interval: number,\n  timeWindow: Duration,\n): PriceChartEntry[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\n  const priceData = token.priceData[interval]\n  const [error, setError] = useState(false)\n\n  // construct timestamps and check if we need to fetch more data\n  const oldestTimestampFetched = token.priceData.oldestFetchedTimestamp\n  const utcCurrentTime = getUnixTime(new Date()) * 1000\n  const startTimestamp = getUnixTime(startOfHour(sub(utcCurrentTime, timeWindow)))\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { data, error: fetchingError } = await fetchTokenPriceData(address, interval, startTimestamp)\n      if (data) {\n        dispatch(\n          updateTokenPriceData({\n            tokenAddress: address,\n            secondsInterval: interval,\n            priceData: data,\n            oldestFetchedTimestamp: startTimestamp,\n          }),\n        )\n      }\n      if (fetchingError) {\n        setError(true)\n      }\n    }\n    if (!priceData && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, interval, oldestTimestampFetched, priceData, startTimestamp, timeWindow])\n\n  return priceData\n}\n\nexport const useTokenTransactions = (address: string): Transaction[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\n  const { transactions } = token\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error: fetchError, data } = await fetchTokenTransactions(address)\n      if (fetchError) {\n        setError(true)\n      } else if (data) {\n        dispatch(updateTokenTransactions({ tokenAddress: address, transactions: data }))\n      }\n    }\n    if (!transactions && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, transactions])\n\n  return transactions\n}\n","import React, { useEffect, useMemo } from 'react'\nimport useFetchProtocolData from 'state/info/queries/protocol/overview'\nimport useFetchGlobalChartData from 'state/info/queries/protocol/chart'\nimport fetchTopTransactions from 'state/info/queries/protocol/transactions'\nimport useTopPoolAddresses from 'state/info/queries/pools/topPools'\nimport usePoolDatas from 'state/info/queries/pools/poolData'\nimport useFetchedTokenDatas from 'state/info/queries/tokens/tokenData'\nimport useTopTokenAddresses from 'state/info/queries/tokens/topTokens'\nimport {\n  useProtocolData,\n  useProtocolChartData,\n  useProtocolTransactions,\n  useUpdatePoolData,\n  useAllPoolData,\n  useAddPoolKeys,\n  useAllTokenData,\n  useUpdateTokenData,\n  useAddTokenKeys,\n} from './hooks'\n\nexport const ProtocolUpdater: React.FC = () => {\n  const [protocolData, setProtocolData] = useProtocolData()\n  const { data: fetchedProtocolData, error } = useFetchProtocolData()\n\n  const [chartData, updateChartData] = useProtocolChartData()\n  const { data: fetchedChartData, error: chartError } = useFetchGlobalChartData()\n\n  const [transactions, updateTransactions] = useProtocolTransactions()\n\n  // update overview data if available and not set\n  useEffect(() => {\n    if (protocolData === undefined && fetchedProtocolData && !error) {\n      setProtocolData(fetchedProtocolData)\n    }\n  }, [error, fetchedProtocolData, protocolData, setProtocolData])\n\n  // update global chart data if available and not set\n  useEffect(() => {\n    if (chartData === undefined && fetchedChartData && !chartError) {\n      updateChartData(fetchedChartData)\n    }\n  }, [chartData, chartError, fetchedChartData, updateChartData])\n\n  useEffect(() => {\n    const fetch = async () => {\n      const data = await fetchTopTransactions()\n      if (data) {\n        updateTransactions(data)\n      }\n    }\n    if (!transactions) {\n      fetch()\n    }\n  }, [transactions, updateTransactions])\n\n  return null\n}\n\nexport const PoolUpdater: React.FC = () => {\n  const updatePoolData = useUpdatePoolData()\n  const addPoolKeys = useAddPoolKeys()\n\n  const allPoolData = useAllPoolData()\n  const addresses = useTopPoolAddresses()\n\n  // add top pools on first load\n  useEffect(() => {\n    if (addresses.length > 0) {\n      addPoolKeys(addresses)\n    }\n  }, [addPoolKeys, addresses])\n\n  // detect for which addresses we havent loaded pool data yet\n  const unfetchedPoolAddresses = useMemo(() => {\n    return Object.keys(allPoolData).reduce((accum: string[], address) => {\n      const poolData = allPoolData[address]\n      if (!poolData.data) {\n        accum.push(address)\n      }\n      return accum\n    }, [])\n  }, [allPoolData])\n\n  // fetch data for unfetched pools and update them\n  const { error: poolDataError, data: poolDatas } = usePoolDatas(unfetchedPoolAddresses)\n  useEffect(() => {\n    if (poolDatas && !poolDataError) {\n      updatePoolData(Object.values(poolDatas))\n    }\n  }, [poolDataError, poolDatas, updatePoolData])\n\n  return null\n}\n\nexport const TokenUpdater = (): null => {\n  const updateTokenDatas = useUpdateTokenData()\n  const addTokenKeys = useAddTokenKeys()\n\n  const allTokenData = useAllTokenData()\n  const addresses = useTopTokenAddresses()\n\n  // add top tokens on first load\n  useEffect(() => {\n    if (addresses.length > 0) {\n      addTokenKeys(addresses)\n    }\n  }, [addTokenKeys, addresses])\n\n  // detect for which addresses we havent loaded token data yet\n  const unfetchedTokenAddresses = useMemo(() => {\n    return Object.keys(allTokenData).reduce((accum: string[], key) => {\n      const tokenData = allTokenData[key]\n      if (!tokenData.data) {\n        accum.push(key)\n      }\n      return accum\n    }, [])\n  }, [allTokenData])\n\n  // fetch data for unfetched tokens and update them\n  const { error: tokenDataError, data: tokenDatas } = useFetchedTokenDatas(unfetchedTokenAddresses)\n  useEffect(() => {\n    if (tokenDatas && !tokenDataError) {\n      updateTokenDatas(Object.values(tokenDatas))\n    }\n  }, [tokenDataError, tokenDatas, updateTokenDatas])\n\n  return null\n}\n","import { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { useTokenDatas, usePoolDatas } from 'state/info/hooks'\nimport { TokenData, PoolData } from 'state/info/types'\nimport { MINIMUM_SEARCH_CHARACTERS } from 'config/constants/info'\n\nconst TOKEN_SEARCH = gql`\n  query tokens($symbol: String, $name: String, $id: String) {\n    asSymbol: tokens(first: 10, where: { symbol_contains: $symbol }, orderBy: tradeVolumeUSD, orderDirection: desc) {\n      id\n    }\n    asName: tokens(first: 10, where: { name_contains: $name }, orderBy: tradeVolumeUSD, orderDirection: desc) {\n      id\n    }\n    asAddress: tokens(first: 1, where: { id: $id }, orderBy: tradeVolumeUSD, orderDirection: desc) {\n      id\n    }\n  }\n`\n\nconst POOL_SEARCH = gql`\n  query pools($tokens: [Bytes]!, $id: String) {\n    as0: pairs(first: 10, where: { token0_in: $tokens }) {\n      id\n    }\n    as1: pairs(first: 10, where: { token1_in: $tokens }) {\n      id\n    }\n    asAddress: pairs(first: 1, where: { id: $id }) {\n      id\n    }\n  }\n`\n\ninterface SingleQueryResponse {\n  id: string[]\n}\n\ninterface TokenSearchResponse {\n  asSymbol: SingleQueryResponse[]\n  asName: SingleQueryResponse[]\n  asAddress: SingleQueryResponse[]\n}\ninterface PoolSearchResponse {\n  as0: SingleQueryResponse[]\n  as1: SingleQueryResponse[]\n  asAddress: SingleQueryResponse[]\n}\n\nconst getIds = (entityArrays: SingleQueryResponse[][]) => {\n  const ids = entityArrays\n    .reduce((entities, currentTokenArray) => [...entities, ...currentTokenArray], [])\n    .map((entity) => entity.id)\n  return Array.from(new Set(ids))\n}\n\nconst useFetchSearchResults = (\n  searchString: string,\n): {\n  tokens: TokenData[]\n  pools: PoolData[]\n  tokensLoading: boolean\n  poolsLoading: boolean\n  error: boolean\n} => {\n  const [searchResults, setSearchResults] = useState({\n    tokens: [], // Token ids found by search query\n    pools: [], // Pool ids found by search query\n    loading: false, // Search query is in progress\n    error: false, // GraphQL returned error\n  })\n\n  const searchStringTooShort = searchString.length < MINIMUM_SEARCH_CHARACTERS\n\n  // New value received, reset state\n  useEffect(() => {\n    setSearchResults({\n      tokens: [],\n      pools: [],\n      loading: !searchStringTooShort,\n      error: false,\n    })\n  }, [searchString, searchStringTooShort])\n\n  useEffect(() => {\n    const search = async () => {\n      try {\n        const tokens = await request<TokenSearchResponse>(INFO_CLIENT, TOKEN_SEARCH, {\n          symbol: searchString.toUpperCase(),\n          // Most well known tokens have first letter capitalized\n          name: searchString.charAt(0).toUpperCase() + searchString.slice(1),\n          id: searchString.toLowerCase(),\n        })\n        const tokenIds = getIds([tokens.asAddress, tokens.asSymbol, tokens.asName])\n        const pools = await request<PoolSearchResponse>(INFO_CLIENT, POOL_SEARCH, {\n          tokens: tokenIds,\n          id: searchString.toLowerCase(),\n        })\n        setSearchResults({\n          tokens: tokenIds,\n          pools: getIds([pools.asAddress, pools.as0, pools.as1]),\n          loading: false,\n          error: false,\n        })\n      } catch (error) {\n        console.error(`Search failed for ${searchString}`, error)\n        setSearchResults({\n          tokens: [],\n          pools: [],\n          loading: false,\n          error: true,\n        })\n      }\n    }\n    if (!searchStringTooShort) {\n      search()\n    }\n  }, [searchString, searchStringTooShort])\n\n  // Save ids to Redux\n  // Token and Pool updater will then go fetch full data for these addresses\n  // These hooks in turn will return data of tokens that have been fetched\n  const tokenDatasFull = useTokenDatas(searchResults.tokens)\n  const poolDatasFull = usePoolDatas(searchResults.pools)\n\n  // If above hooks returned not all tokens/pools it means\n  // that some requests for full data are in progress\n  const tokensLoading = tokenDatasFull.length !== searchResults.tokens.length || searchResults.loading\n  const poolsLoading = poolDatasFull.length !== searchResults.pools.length || searchResults.loading\n\n  return {\n    tokens: tokenDatasFull,\n    pools: poolDatasFull,\n    tokensLoading,\n    poolsLoading,\n    error: searchResults.error,\n  }\n}\n\nexport default useFetchSearchResults\n","import React, { useState } from 'react'\nimport { HelpIcon } from '@glide-finance/uikit'\n\nconst BAD_SRCS: string[] = []\n\nexport interface LogoLoaderProps {\n  alt: string\n  src: string\n}\n\n/**\n * Renders an image by sequentially trying a list of URIs, and then eventually a fallback to HelpIcon\n */\nconst LogoLoader: React.FC<LogoLoaderProps> = ({ src, alt, ...rest }) => {\n  const [, refresh] = useState(0)\n\n  const srcFailedLoading = BAD_SRCS.includes(src)\n\n  if (src && !srcFailedLoading) {\n    return (\n      <img\n        {...rest}\n        alt={alt}\n        src={src}\n        onError={() => {\n          if (src) BAD_SRCS.push(src)\n          refresh((i) => i + 1)\n        }}\n      />\n    )\n  }\n\n  return <HelpIcon {...rest} />\n}\n\nexport default LogoLoader\n","import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { isAddress } from 'utils'\nimport { BASE_URL } from 'config'\nimport LogoLoader from './LogoLoader'\n\nconst StyledLogo = styled(LogoLoader)<{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n  border-radius: ${({ size }) => size};\n  box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.075);\n  background-color: ${({ theme }) => theme.colors.background};\n  color: ${({ theme }) => theme.colors.text};\n`\n\nexport const CurrencyLogo: React.FC<{\n  address?: string\n  size?: string\n}> = ({ address, size = '24px', ...rest }) => {\n  const src = useMemo(() => {\n    const checksummedAddress = isAddress(address)\n    if (checksummedAddress) {\n      // return `https://assets.trustwalletapp.com/blockchains/smartchain/assets/${checksummedAddress}/logo.png`\n      return `${BASE_URL}/images/tokens/${checksummedAddress}.png`\n    }\n    return null\n  }, [address])\n\n  return <StyledLogo size={size} src={src} alt=\"token logo\" {...rest} />\n}\n\nconst DoubleCurrencyWrapper = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 32px;\n`\n\ninterface DoubleCurrencyLogoProps {\n  address0?: string\n  address1?: string\n  size?: number\n}\n\nexport const DoubleCurrencyLogo: React.FC<DoubleCurrencyLogoProps> = ({ address0, address1, size = 16 }) => {\n  return (\n    <DoubleCurrencyWrapper>\n      {address0 && <CurrencyLogo address={address0} size={`${size.toString()}px`} />}\n      {address1 && <CurrencyLogo address={address1} size={`${size.toString()}px`} />}\n    </DoubleCurrencyWrapper>\n  )\n}\n","import numeral from 'numeral'\n\n// Returns first 2 digits after first non-zero decimal\n// i.e. 0.001286 -> 0.0012, 0.9845 -> 0.98, 0.0102 -> 0.010, etc\n// Intended to be used for tokens whose value is less than $1\n// https://stackoverflow.com/a/23887837\nexport const getFirstThreeNonZeroDecimals = (value: number) => {\n  return value.toFixed(11).match(/^-?\\d*\\.?0*\\d{0,2}/)[0]\n}\n\n/**\n * This function is used to format token prices, liquidity, amount of tokens in TX, and in general any numbers on info section\n * @param amount - amount to be formatted\n * @param notation - whether to show 1M or 1,000,000\n * @param displayThreshold - threshold below which it will return simply <displayThreshold instead of actual value, e.g. if 0.001 -> returns <0.001 for 0.0005\n * @param tokenPrecision - set to true when you want precision to be 3 decimals for values < 1 and 2 decimals for values > 1\n * @param isInteger - if true the values will contain decimal part only if the amount is > 1000\n * @returns formatted string ready to be displayed\n */\nexport const formatAmount = (\n  amount: number | undefined,\n  options?: {\n    notation?: 'compact' | 'standard'\n    displayThreshold?: number\n    tokenPrecision?: boolean\n    isInteger?: boolean\n  },\n) => {\n  const { notation = 'compact', displayThreshold, tokenPrecision, isInteger } = options || { notation: 'compact' }\n  if (amount === 0) {\n    if (isInteger) {\n      return '0'\n    }\n    return '0.00'\n  }\n  if (!amount) return '-'\n  if (displayThreshold && amount < displayThreshold) {\n    return `<${displayThreshold}`\n  }\n  if (amount < 1 && !tokenPrecision) {\n    return getFirstThreeNonZeroDecimals(amount)\n  }\n\n  let precision = 2\n  if (tokenPrecision) {\n    precision = amount < 1 ? 3 : 2\n  }\n\n  let format = `0.${'0'.repeat(precision)}a`\n\n  if (notation === 'standard') {\n    format = `0,0.${'0'.repeat(precision)}`\n  }\n\n  if (isInteger && amount < 1000) {\n    format = '0'\n  }\n\n  const amountWithPrecision = parseFloat(amount.toFixed(precision))\n\n  // toUpperCase is needed cause numeral doesn't have support for capital K M B out of the box\n  return numeral(amountWithPrecision).format(format).toUpperCase()\n}\n","import React, { HTMLAttributes } from 'react'\nimport styled from 'styled-components'\nimport { StarFillIcon, StarLineIcon } from '@glide-finance/uikit'\nimport useTheme from 'hooks/useTheme'\n\nconst HoverIcon = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst SaveIcon: React.FC<{ fill: boolean } & HTMLAttributes<HTMLDivElement>> = ({ fill = false, ...rest }) => {\n  const { theme } = useTheme()\n  return (\n    <HoverIcon {...rest}>\n      {fill ? (\n        <StarFillIcon stroke={theme.colors.warning} color={theme.colors.warning} />\n      ) : (\n        <StarLineIcon stroke={theme.colors.textDisabled} />\n      )}\n    </HoverIcon>\n  )\n}\n\nexport default SaveIcon\n","import React, { useRef, useState, useEffect, useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Text, Input, Flex, Skeleton, useMatchBreakpoints } from '@glide-finance/uikit'\nimport useFetchSearchResults from 'state/info/queries/search'\nimport { CurrencyLogo, DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { useWatchlistTokens, useWatchlistPools } from 'state/user/hooks'\nimport SaveIcon from 'views/Info/components/SaveIcon'\nimport { useHistory } from 'react-router-dom'\nimport { usePoolDatas, useTokenDatas } from 'state/info/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport useDebounce from 'hooks/useDebounce'\nimport { MINIMUM_SEARCH_CHARACTERS } from 'config/constants/info'\nimport { PoolData } from 'state/info/types'\n\nconst Container = styled.div`\n  position: relative;\n  z-index: 30;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  z-index: 9999;\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n`\n\nconst Menu = styled.div<{ hide: boolean }>`\n  display: flex;\n  flex-direction: column;\n  z-index: 9999;\n  width: 100%;\n  top: 50px;\n  max-height: 400px;\n  overflow: auto;\n  right: 0;\n  padding: 1.5rem;\n  padding-bottom: 2.5rem;\n  position: absolute;\n  background: ${({ theme }) => theme.colors.background};\n  border-radius: 8px;\n  box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.04), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04),\n    0px 24px 32px rgba(0, 0, 0, 0.04);\n  display: ${({ hide }) => hide && 'none'};\n  border: 1px solid ${({ theme }) => theme.colors.secondary};\n  margin-top: 4px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 0;\n    width: 500px;\n    max-height: 600px;\n  }\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-top: 0;\n    width: 800px;\n    max-height: 600px;\n  }\n`\n\nconst Blackout = styled.div`\n  position: absolute;\n  min-height: 100vh;\n  width: 100vw;\n  z-index: 10;\n  background-color: black;\n  opacity: 0.7;\n  left: 0;\n  top: 0;\n`\n\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  grid-template-columns: 1fr;\n  margin: 8px 0;\n  align-items: center;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: 1.5fr repeat(3, 1fr);\n  }\n`\n\nconst Break = styled.div`\n  height: 1px;\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  width: 100%;\n  margin: 16px 0;\n`\n\nconst HoverText = styled.div<{ hide: boolean }>`\n  color: ${({ theme }) => theme.colors.secondary};\n  display: ${({ hide }) => (hide ? 'none' : 'block')};\n  margin-top: 16px;\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst HoverRowLink = styled.div`\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst OptionButton = styled.div<{ enabled: boolean }>`\n  width: fit-content;\n  padding: 4px 8px;\n  border-radius: 8px;\n  display: flex;\n  font-size: 12px;\n  font-weight: 600;\n  margin-right: 10px;\n  justify-content: center;\n  align-items: center;\n  background-color: ${({ theme, enabled }) => (enabled ? theme.colors.primary : 'transparent')};\n  color: ${({ theme, enabled }) => (enabled ? theme.card.background : theme.colors.secondary)};\n  :hover {\n    opacity: 0.6;\n    cursor: pointer;\n  }\n`\ntype BasicTokenData = {\n  address: string\n  symbol: string\n  name: string\n}\nconst tokenIncludesSearchTerm = (token: BasicTokenData, value: string) => {\n  return (\n    token.address.toLowerCase().includes(value.toLowerCase()) ||\n    token.symbol.toLowerCase().includes(value.toLowerCase()) ||\n    token.name.toLowerCase().includes(value.toLowerCase())\n  )\n}\n\nconst poolIncludesSearchTerm = (pool: PoolData, value: string) => {\n  return (\n    pool.address.toLowerCase().includes(value.toLowerCase()) ||\n    tokenIncludesSearchTerm(pool.token0, value) ||\n    tokenIncludesSearchTerm(pool.token1, value)\n  )\n}\n\nconst Search = () => {\n  const history = useHistory()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { t } = useTranslation()\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const menuRef = useRef<HTMLDivElement>(null)\n  const showMoreRef = useRef<HTMLDivElement>(null)\n\n  const [showMenu, setShowMenu] = useState(false)\n  const [value, setValue] = useState('')\n  const debouncedSearchTerm = useDebounce(value, 600)\n\n  const { tokens, pools, tokensLoading, poolsLoading, error } = useFetchSearchResults(debouncedSearchTerm)\n\n  const [tokensShown, setTokensShown] = useState(3)\n  const [poolsShown, setPoolsShown] = useState(3)\n\n  useEffect(() => {\n    setTokensShown(3)\n    setPoolsShown(3)\n  }, [debouncedSearchTerm])\n\n  const handleOutsideClick = (e: any) => {\n    const menuClick = menuRef.current && menuRef.current.contains(e.target)\n    const inputCLick = inputRef.current && inputRef.current.contains(e.target)\n    const showMoreClick = showMoreRef.current && showMoreRef.current.contains(e.target)\n\n    if (!menuClick && !inputCLick && !showMoreClick) {\n      setPoolsShown(3)\n      setTokensShown(3)\n      setShowMenu(false)\n    }\n  }\n\n  useEffect(() => {\n    if (showMenu) {\n      document.addEventListener('click', handleOutsideClick)\n      document.querySelector('body').style.overflow = 'hidden'\n    } else {\n      document.removeEventListener('click', handleOutsideClick)\n      document.querySelector('body').style.overflow = 'visible'\n    }\n\n    return () => {\n      document.removeEventListener('click', handleOutsideClick)\n    }\n  }, [showMenu])\n\n  // watchlist\n  const [savedTokens, addSavedToken] = useWatchlistTokens()\n  const [savedPools, addSavedPool] = useWatchlistPools()\n\n  const handleItemClick = (to: string) => {\n    setShowMenu(false)\n    setPoolsShown(3)\n    setTokensShown(3)\n    history.push(to)\n  }\n\n  // get date for watchlist\n  const watchListTokenData = useTokenDatas(savedTokens)\n  const watchListTokenLoading = watchListTokenData.length !== savedTokens.length\n  const watchListPoolData = usePoolDatas(savedPools)\n  const watchListPoolLoading = watchListPoolData.length !== savedPools.length\n\n  // filter on view\n  const [showWatchlist, setShowWatchlist] = useState(false)\n  const tokensForList = useMemo(() => {\n    if (showWatchlist) {\n      return watchListTokenData.filter((token) => tokenIncludesSearchTerm(token, value))\n    }\n    return tokens.sort((t0, t1) => (t0.volumeUSD > t1.volumeUSD ? -1 : 1))\n  }, [showWatchlist, tokens, watchListTokenData, value])\n\n  const poolForList = useMemo(() => {\n    if (showWatchlist) {\n      return watchListPoolData.filter((pool) => poolIncludesSearchTerm(pool, value))\n    }\n    return pools.sort((p0, p1) => (p0.volumeUSD > p1.volumeUSD ? -1 : 1))\n  }, [pools, showWatchlist, watchListPoolData, value])\n\n  const contentUnderTokenList = () => {\n    const isLoading = showWatchlist ? watchListTokenLoading : tokensLoading\n    const noTokensFound =\n      tokensForList.length === 0 && !isLoading && debouncedSearchTerm.length >= MINIMUM_SEARCH_CHARACTERS\n    const noWatchlistTokens = tokensForList.length === 0 && !isLoading\n    const showMessage = showWatchlist ? noWatchlistTokens : noTokensFound\n    const noTokensMessage = showWatchlist ? t('Saved tokens will appear here') : t('No results')\n    return (\n      <>\n        {isLoading && <Skeleton />}\n        {showMessage && <Text>{noTokensMessage}</Text>}\n        {!showWatchlist && debouncedSearchTerm.length < MINIMUM_SEARCH_CHARACTERS && (\n          <Text>{t('Search pools or tokens')}</Text>\n        )}\n      </>\n    )\n  }\n\n  const contentUnderPoolList = () => {\n    const isLoading = showWatchlist ? watchListPoolLoading : poolsLoading\n    const noPoolsFound =\n      poolForList.length === 0 && !poolsLoading && debouncedSearchTerm.length >= MINIMUM_SEARCH_CHARACTERS\n    const noWatchlistPools = poolForList.length === 0 && !isLoading\n    const showMessage = showWatchlist ? noWatchlistPools : noPoolsFound\n    const noPoolsMessage = showWatchlist ? t('Saved tokens will appear here') : t('No results')\n    return (\n      <>\n        {isLoading && <Skeleton />}\n        {showMessage && <Text>{noPoolsMessage}</Text>}\n        {!showWatchlist && debouncedSearchTerm.length < MINIMUM_SEARCH_CHARACTERS && (\n          <Text>{t('Search pools or tokens')}</Text>\n        )}\n      </>\n    )\n  }\n\n  return (\n    <>\n      {showMenu ? <Blackout /> : null}\n      <Container>\n        <StyledInput\n          type=\"text\"\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value)\n          }}\n          placeholder={t('Search pools or tokens')}\n          ref={inputRef}\n          onFocus={() => {\n            setShowMenu(true)\n          }}\n        />\n        <Menu hide={!showMenu} ref={menuRef}>\n          <Flex mb=\"16px\">\n            <OptionButton enabled={!showWatchlist} onClick={() => setShowWatchlist(false)}>\n              {t('Search')}\n            </OptionButton>\n            <OptionButton enabled={showWatchlist} onClick={() => setShowWatchlist(true)}>\n              {t('Watchlist')}\n            </OptionButton>\n          </Flex>\n          {error && <Text color=\"failure\">{t('Error occurred, please try again')}</Text>}\n\n          <ResponsiveGrid>\n            <Text bold color=\"secondary\">\n              {t('Tokens')}\n            </Text>\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Price')}\n              </Text>\n            )}\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Volume 24H')}\n              </Text>\n            )}\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Liquidity')}\n              </Text>\n            )}\n          </ResponsiveGrid>\n          {tokensForList.slice(0, tokensShown).map((token, i) => {\n            return (\n              // eslint-disable-next-line react/no-array-index-key\n              <HoverRowLink onClick={() => handleItemClick(`/info/token/${token.address}`)} key={i}>\n                <ResponsiveGrid>\n                  <Flex>\n                    <CurrencyLogo address={token.address} />\n                    <Text ml=\"10px\">\n                      <Text>{`${token.name} (${token.symbol})`}</Text>\n                    </Text>\n                    <SaveIcon\n                      id=\"watchlist-icon\"\n                      style={{ marginLeft: '8px' }}\n                      fill={savedTokens.includes(token.address)}\n                      onClick={(e) => {\n                        e.stopPropagation()\n                        addSavedToken(token.address)\n                      }}\n                    />\n                  </Flex>\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(token.priceUSD)}</Text>}\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(token.volumeUSD)}</Text>}\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(token.liquidityUSD)}</Text>}\n                </ResponsiveGrid>\n              </HoverRowLink>\n            )\n          })}\n          {contentUnderTokenList()}\n          <HoverText\n            onClick={() => {\n              setTokensShown(tokensShown + 5)\n            }}\n            hide={tokensForList.length <= tokensShown}\n            ref={showMoreRef}\n          >\n            {t('See more...')}\n          </HoverText>\n\n          <Break />\n          <ResponsiveGrid>\n            <Text bold color=\"secondary\" mb=\"8px\">\n              {t('Pools')}\n            </Text>\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Volume 24H')}\n              </Text>\n            )}\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Volume 7D')}\n              </Text>\n            )}\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Liquidity')}\n              </Text>\n            )}\n          </ResponsiveGrid>\n          {poolForList.slice(0, poolsShown).map((p, i) => {\n            return (\n              // eslint-disable-next-line react/no-array-index-key\n              <HoverRowLink onClick={() => handleItemClick(`/info/pool/${p.address}`)} key={i}>\n                <ResponsiveGrid>\n                  <Flex>\n                    <DoubleCurrencyLogo address0={p.token0.address} address1={p.token1.address} />\n                    <Text ml=\"10px\" style={{ whiteSpace: 'nowrap' }}>\n                      <Text>{`${p.token0.symbol} / ${p.token1.symbol}`}</Text>\n                    </Text>\n                    <SaveIcon\n                      id=\"watchlist-icon\"\n                      style={{ marginLeft: '10px' }}\n                      fill={savedPools.includes(p.address)}\n                      onClick={(e) => {\n                        e.stopPropagation()\n                        addSavedPool(p.address)\n                      }}\n                    />\n                  </Flex>\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(p.volumeUSD)}</Text>}\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(p.volumeUSDWeek)}</Text>}\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(p.liquidityUSD)}</Text>}\n                </ResponsiveGrid>\n              </HoverRowLink>\n            )\n          })}\n          {contentUnderPoolList()}\n          <HoverText\n            onClick={() => {\n              setPoolsShown(poolsShown + 5)\n            }}\n            hide={poolForList.length <= poolsShown}\n            ref={showMoreRef}\n          >\n            {t('See more...')}\n          </HoverText>\n        </Menu>\n      </Container>\n    </>\n  )\n}\n\nexport default Search\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Link, useRouteMatch } from 'react-router-dom'\nimport { Box, Flex, ButtonMenu, ButtonMenuItem } from '@glide-finance/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Search from 'views/Info/components/InfoSearch'\n\nconst NavWrapper = styled(Flex)`\n  background: ${({ theme }) => theme.colors.gradients.cardHeader};\n  justify-content: space-between;\n  padding: 20px 16px;\n  margin: 0 24px 16px 24px;\n  flex-direction: column;\n  gap: 8px;\n  border-radius: 16px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding: 20px 40px;\n    flex-direction: row;\n  }\n`\n\nconst InfoNav = () => {\n  const { t } = useTranslation()\n  const isPools = useRouteMatch(['/info/pools', '/info/pool', '/info/pair'])\n  const isTokens = useRouteMatch(['/info/tokens', '/info/token'])\n  let activeIndex = 0\n  if (isPools) {\n    activeIndex = 1\n  }\n  if (isTokens) {\n    activeIndex = 2\n  }\n  return (\n    <NavWrapper>\n      <Box>\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n          <ButtonMenuItem as={Link} to=\"/info\">\n            {t('Overview')}\n          </ButtonMenuItem>\n          <ButtonMenuItem as={Link} to=\"/info/pools\">\n            {t('Pools')}\n          </ButtonMenuItem>\n          <ButtonMenuItem as={Link} to=\"/info/tokens\">\n            {t('Tokens')}\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </Box>\n      <Box width={['100%', '100%', '250px']}>\n        <Search />\n      </Box>\n    </NavWrapper>\n  )\n}\n\nexport default InfoNav\n","import React from 'react'\nimport { Svg, SvgProps } from '@glide-finance/uikit'\n\nconst LineChartLoaderSVG: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg width=\"100%\" height=\"100%\" preserveAspectRatio=\"none\" viewBox=\"0 0 100 50\" {...props}>\n      <path\n        d=\"M 0 49 C 1 49 1 45 4 47 C 7 49 7 35 11 37 C 13 38 14 32 16 34 C 18 35.6667 20 40 22 39 C 24 38 24 34 26 34 C 27 34 29 39 32 36 C 33 35 34 32 35 32 C 37 32 37 35 39 34 C 40 33 39 29 43 31 C 46 32 45 28 47 30 C 50 32 49 22 51 24 Q 53 26 55 24 C 56 23 56 25 57 26 C 58 27 59 28 60 28 C 63 28 66 17 67 16 C 68 15 69 17 70 16 C 71 15 71 13 74 13 C 76 13 76 14 77 15 C 79 17 80 18 82 18 C 83 18 83 17 84 17 C 87 17 89 24 91 24 C 93 24 95 20 96 17 C 97.6667 13.3333 98 9 101 6\"\n        stroke=\"#7645D9\"\n        strokeWidth=\"0.2\"\n        strokeDasharray=\"156\"\n        strokeDashoffset=\"156\"\n        fill=\"transparent\"\n        opacity=\"0.5\"\n        filter=\"url(#glow)\"\n      >\n        <animate\n          id=\"firstline\"\n          attributeName=\"stroke-dashoffset\"\n          dur=\"2s\"\n          from=\"156\"\n          to=\"-156\"\n          begin=\"0s;firstline.end+0.5s\"\n        />\n      </path>\n      <path\n        d=\"M 0 49 C 1 49 1 45 4 47 C 7 49 7 35 11 37 C 13 38 14 32 16 34 C 18 35.6667 20 40 22 39 C 24 38 24 34 26 34 C 27 34 29 39 32 36 C 33 35 34 32 35 32 C 37 32 37 35 39 34 C 40 33 39 29 43 31 C 46 32 45 28 47 30 C 50 32 49 22 51 24 Q 53 26 55 24 C 56 23 56 25 57 26 C 58 27 59 28 60 28 C 63 28 66 17 67 16 C 68 15 69 17 70 16 C 71 15 71 13 74 13 C 76 13 76 14 77 15 C 79 17 80 18 82 18 C 83 18 83 17 84 17 C 87 17 89 24 91 24 C 93 24 95 20 96 17 C 97.6667 13.3333 98 9 101 6\"\n        stroke=\"#7645D9\"\n        strokeWidth=\"0.2\"\n        strokeDasharray=\"156\"\n        strokeDashoffset=\"156\"\n        fill=\"transparent\"\n        opacity=\"0.5\"\n        filter=\"url(#glow)\"\n      >\n        <animate\n          id=\"secondline\"\n          attributeName=\"stroke-dashoffset\"\n          dur=\"2s\"\n          from=\"156\"\n          to=\"-156\"\n          begin=\"1.3s;secondline.end+0.5s\"\n        />\n      </path>\n      <defs>\n        <filter id=\"glow\">\n          <feGaussianBlur className=\"blur\" result=\"coloredBlur\" stdDeviation=\"4\" />\n          <feMerge>\n            <feMergeNode in=\"coloredBlur\" />\n            <feMergeNode in=\"coloredBlur\" />\n            <feMergeNode in=\"coloredBlur\" />\n            <feMergeNode in=\"SourceGraphic\" />\n          </feMerge>\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n\nexport default LineChartLoaderSVG\n","import React from 'react'\nimport { Svg, SvgProps } from '@glide-finance/uikit'\n\nconst BarChartLoaderSVG: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg width=\"100%\" height=\"100%\" viewBox=\"0 0 50 25\" preserveAspectRatio=\"none\" opacity=\"0.1\" {...props}>\n      <rect width=\"8%\" fill=\"#1FC7D4\">\n        <animate\n          attributeName=\"height\"\n          dur=\"0.9s\"\n          values=\"15%; 90%; 15%\"\n          keyTimes=\"0; 0.55; 1\"\n          repeatCount=\"indefinite\"\n          begin=\"-0.9s\"\n        />\n        <animate\n          attributeName=\"y\"\n          dur=\"0.9s\"\n          values=\"85%; 10%; 85%\"\n          keyTimes=\"0; 0.55; 1\"\n          repeatCount=\"indefinite\"\n          begin=\"-0.9s\"\n        />\n      </rect>\n      <rect x=\"10.222%\" width=\"8%\" fill=\"#1FC7D4\">\n        <animate\n          attributeName=\"height\"\n          dur=\"0.9s\"\n          values=\"15%; 90%; 15%\"\n          keyTimes=\"0; 0.55; 1\"\n          repeatCount=\"indefinite\"\n          begin=\"-0.8s\"\n        />\n        <animate\n          attributeName=\"y\"\n          dur=\"0.9s\"\n          values=\"85%; 10%; 85%\"\n          keyTimes=\"0; 0.55; 1\"\n          repeatCount=\"indefinite\"\n          begin=\"-0.8s\"\n        />\n      </rect>\n      <rect x=\"20.444%\" width=\"8%\" fill=\"#1FC7D4\">\n        <animate\n          attributeName=\"height\"\n          dur=\"0.9s\"\n          values=\"15%; 90%; 15%\"\n          keyTimes=\"0; 0.55; 1\"\n          repeatCount=\"indefinite\"\n          begin=\"-0.7s\"\n        />\n        <animate\n          attributeName=\"y\"\n          dur=\"0.9s\"\n          values=\"85%; 10%; 85%\"\n          keyTimes=\"0; 0.55; 1\"\n          repeatCount=\"indefinite\"\n          begin=\"-0.7s\"\n        />\n      </rect>\n      <rect x=\"30.666%\" width=\"8%\" fill=\"#1FC7D4\">\n        <animate\n          attributeName=\"height\"\n          dur=\"0.9s\"\n          values=\"15%; 90%; 15%\"\n          keyTimes=\"0; 0.55; 1\"\n          repeatCount=\"indefinite\"\n          begin=\"-0.6s\"\n        />\n        <animate\n          attributeName=\"y\"\n          dur=\"0.9s\"\n          values=\"85%; 10%; 85%\"\n          keyTimes=\"0; 0.55; 1\"\n          repeatCount=\"indefinite\"\n          begin=\"-0.6s\"\n        />\n      </rect>\n      <rect x=\"40.888%\" width=\"8%\" fill=\"#1FC7D4\">\n        <animate\n          attributeName=\"height\"\n          dur=\"0.9s\"\n          values=\"15%; 90%; 15%\"\n          keyTimes=\"0; 0.55; 1\"\n          repeatCount=\"indefinite\"\n          begin=\"-0.5s\"\n        />\n        <animate\n          attributeName=\"y\"\n          dur=\"0.9s\"\n          values=\"85%; 10%; 85%\"\n          keyTimes=\"0; 0.55; 1\"\n          repeatCount=\"indefinite\"\n          begin=\"-0.5s\"\n        />\n      </rect>\n      <rect x=\"51.11%\" width=\"8%\" fill=\"#1FC7D4\">\n        <animate\n          attributeName=\"height\"\n          dur=\"0.9s\"\n          values=\"15%; 90%; 15%\"\n          keyTimes=\"0; 0.55; 1\"\n          repeatCount=\"indefinite\"\n          begin=\"-0.4s\"\n        />\n        <animate\n          attributeName=\"y\"\n          dur=\"0.9s\"\n          values=\"85%; 10%; 85%\"\n          keyTimes=\"0; 0.55; 1\"\n          repeatCount=\"indefinite\"\n          begin=\"-0.4s\"\n        />\n      </rect>\n      <rect x=\"61.332%\" width=\"8%\" fill=\"#1FC7D4\">\n        <animate\n          attributeName=\"height\"\n          dur=\"0.9s\"\n          values=\"15%; 90%; 15%\"\n          keyTimes=\"0; 0.55; 1\"\n          repeatCount=\"indefinite\"\n          begin=\"-0.3s\"\n        />\n        <animate\n          attributeName=\"y\"\n          dur=\"0.9s\"\n          values=\"85%; 10%; 85%\"\n          keyTimes=\"0; 0.55; 1\"\n          repeatCount=\"indefinite\"\n          begin=\"-0.3s\"\n        />\n      </rect>\n      <rect x=\"71.554%\" width=\"8%\" fill=\"#1FC7D4\">\n        <animate\n          attributeName=\"height\"\n          dur=\"0.9s\"\n          values=\"15%; 90%; 15%\"\n          keyTimes=\"0; 0.55; 1\"\n          repeatCount=\"indefinite\"\n          begin=\"-0.2s\"\n        />\n        <animate\n          attributeName=\"y\"\n          dur=\"0.9s\"\n          values=\"85%; 10%; 85%\"\n          keyTimes=\"0; 0.55; 1\"\n          repeatCount=\"indefinite\"\n          begin=\"-0.2s\"\n        />\n      </rect>\n      <rect x=\"81.776%\" width=\"8%\" fill=\"#1FC7D4\">\n        <animate\n          attributeName=\"height\"\n          dur=\"0.9s\"\n          values=\"15%; 90%; 15%\"\n          keyTimes=\"0; 0.55; 1\"\n          repeatCount=\"indefinite\"\n          begin=\"-0.1s\"\n        />\n        <animate\n          attributeName=\"y\"\n          dur=\"0.9s\"\n          values=\"85%; 10%; 85%\"\n          keyTimes=\"0; 0.55; 1\"\n          repeatCount=\"indefinite\"\n          begin=\"-0.1s\"\n        />\n      </rect>\n      <rect x=\"91.998%\" width=\"8%\" fill=\"#1FC7D4\">\n        <animate\n          attributeName=\"height\"\n          dur=\"0.9s\"\n          values=\"15%; 90%; 15%\"\n          keyTimes=\"0; 0.55; 1\"\n          repeatCount=\"indefinite\"\n        />\n        <animate attributeName=\"y\" dur=\"0.9s\" values=\"85%; 10%; 85%\" keyTimes=\"0; 0.55; 1\" repeatCount=\"indefinite\" />\n      </rect>\n    </Svg>\n  )\n}\n\nexport default BarChartLoaderSVG\n","import React from 'react'\nimport { Svg, SvgProps } from '@glide-finance/uikit'\n\nconst CandleChartLoaderSVG: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg width=\"100%\" height=\"100%\" viewBox=\"0 0 100 50\" opacity=\"0.1\" {...props}>\n      <rect width=\"5%\" fill=\"#31D0AA\">\n        <animate\n          attributeName=\"height\"\n          dur=\"2s\"\n          values=\"0%; 40%; 40%; 10%; 10%\"\n          keyTimes=\"0; 0.125; 0.5; 0.625; 1\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"y\"\n          dur=\"2s\"\n          from=\"50%\"\n          to=\"30%\"\n          values=\"30%; 10%; 10%; 25%; 25%\"\n          keyTimes=\"0; 0.125; 0.5; 0.625; 1\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"rx\"\n          dur=\"2s\"\n          values=\"0%; 0%; 100%; 100%;\"\n          keyTimes=\"0; 0.6; 0.625; 1\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"x\"\n          dur=\"2s\"\n          values=\"32.5%; 32.5%; 47.5%; 47.5%;\"\n          keyTimes=\"0; 0.7; 0.8; 1\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"opacity\"\n          dur=\"2s\"\n          values=\"1; 1; 0; 0;\"\n          keyTimes=\"0; 0.75; 0.9; 1\"\n          repeatCount=\"indefinite\"\n        />\n      </rect>\n      <rect width=\"5%\" fill=\"#31D0AA\">\n        <animate\n          attributeName=\"height\"\n          dur=\"2s\"\n          values=\"0%; 0%; 20%; 20%; 10%; 10%\"\n          keyTimes=\"0; 0.125; 0.25; 0.5; 0.625; 1\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"y\"\n          dur=\"2s\"\n          values=\"15%; 15%; 5%; 5%; 25%; 25%\"\n          keyTimes=\"0; 0.125; 0.25; 0.5; 0.625; 1\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"rx\"\n          dur=\"2s\"\n          values=\"0%; 0%; 100%; 100%;\"\n          keyTimes=\"0; 0.6; 0.625; 1\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"x\"\n          dur=\"2s\"\n          values=\"42.5%; 42.5%; 47.5%; 47.5%;\"\n          keyTimes=\"0; 0.7; 0.8; 1\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"opacity\"\n          dur=\"2s\"\n          values=\"1; 1; 0; 0;\"\n          keyTimes=\"0; 0.75; 0.9; 1\"\n          repeatCount=\"indefinite\"\n        />\n      </rect>\n      <rect width=\"5%\" fill=\"#ED4B9E\">\n        <animate\n          attributeName=\"height\"\n          dur=\"2s\"\n          values=\"0%; 0%; 35%; 35%; 10%; 10%\"\n          keyTimes=\"0; 0.25; 0.375; 0.5; 0.625; 1\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"y\"\n          dur=\"2s\"\n          values=\"25%; 25%; 10%; 10%; 25%; 25%\"\n          keyTimes=\"0; 0.25; 0.375; 0.5; 0.625; 1\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"rx\"\n          dur=\"2s\"\n          values=\"0%; 0%; 100%; 100%;\"\n          keyTimes=\"0; 0.6; 0.625; 1\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"x\"\n          dur=\"2s\"\n          values=\"52.5%; 52.5%; 47.5%; 47.5%;\"\n          keyTimes=\"0; 0.7; 0.8; 1\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"opacity\"\n          dur=\"2s\"\n          values=\"1; 1; 0; 0;\"\n          keyTimes=\"0; 0.75; 0.9; 1\"\n          repeatCount=\"indefinite\"\n        />\n      </rect>\n      <rect width=\"5%\" fill=\"#31D0AA\">\n        <animate\n          attributeName=\"height\"\n          dur=\"2s\"\n          values=\"0%; 0%; 35%; 35%; 10%; 10%\"\n          keyTimes=\"0; 0.375; 0.5; 0.5; 0.625; 1\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"y\"\n          dur=\"2s\"\n          values=\"15%; 15%; 0%; 0%; 25%; 25%\"\n          keyTimes=\"0; 0.375; 0.5; 0.5; 0.625; 1\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"rx\"\n          dur=\"2s\"\n          values=\"0%; 0%; 100%; 100%;\"\n          keyTimes=\"0; 0.6; 0.625; 1\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"x\"\n          dur=\"2s\"\n          values=\"62.5%; 62.5%; 47.5%; 47.5%;\"\n          keyTimes=\"0; 0.7; 0.8; 1\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"opacity\"\n          dur=\"2s\"\n          values=\"1; 1; 0; 0;\"\n          keyTimes=\"0; 0.75; 0.9; 1\"\n          repeatCount=\"indefinite\"\n        />\n      </rect>\n    </Svg>\n  )\n}\n\nexport default CandleChartLoaderSVG\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Text } from '@glide-finance/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport LineChartLoaderSVG from './LineChartLoaderSVG'\nimport BarChartLoaderSVG from './BarChartLoaderSVG'\nimport CandleChartLoaderSVG from './CandleChartLoaderSVG'\n\nconst LoadingText = styled(Box)`\n  position: absolute;\n  margin-left: auto;\n  margin-right: auto;\n  top: 50%;\n  left: 0;\n  right: 0;\n  text-align: center;\n`\n\nconst LoadingIndicator = styled(Box)`\n  height: 100%;\n  position: relative;\n`\n\nexport const BarChartLoader: React.FC = () => {\n  const { t } = useTranslation()\n  return (\n    <LoadingIndicator>\n      <BarChartLoaderSVG />\n      <LoadingText>\n        <Text color=\"textSubtle\" fontSize=\"20px\">\n          {t('Loading chart data...')}\n        </Text>\n      </LoadingText>\n    </LoadingIndicator>\n  )\n}\n\nexport const LineChartLoader: React.FC = () => {\n  const { t } = useTranslation()\n  return (\n    <LoadingIndicator>\n      <LineChartLoaderSVG />\n      <LoadingText>\n        <Text color=\"textSubtle\" fontSize=\"20px\">\n          {t('Loading chart data...')}\n        </Text>\n      </LoadingText>\n    </LoadingIndicator>\n  )\n}\n\nexport const CandleChartLoader: React.FC = () => {\n  const { t } = useTranslation()\n  return (\n    <LoadingIndicator>\n      <CandleChartLoaderSVG />\n      <LoadingText>\n        <Text color=\"textSubtle\" fontSize=\"20px\">\n          {t('Loading chart data...')}\n        </Text>\n      </LoadingText>\n    </LoadingIndicator>\n  )\n}\n","import React, { useEffect, Dispatch, SetStateAction } from 'react'\nimport { format } from 'date-fns'\nimport { ResponsiveContainer, XAxis, YAxis, Tooltip, AreaChart, Area } from 'recharts'\nimport useTheme from 'hooks/useTheme'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { LineChartLoader } from 'views/Info/components/ChartLoaders'\n\nexport type LineChartProps = {\n  data: any[]\n  setHoverValue: Dispatch<SetStateAction<number | undefined>> // used for value on hover\n  setHoverDate: Dispatch<SetStateAction<string | undefined>> // used for label of value\n} & React.HTMLAttributes<HTMLDivElement>\n\n// Calls setHoverValue and setHoverDate when part of chart is hovered\n// Note: this NEEDs to be wrapped inside component and useEffect, if you plug it as is it will create big render problems (try and see console)\nconst HoverUpdater = ({ payload, setHoverValue, setHoverDate }) => {\n  useEffect(() => {\n    setHoverValue(payload.value)\n    setHoverDate(format(payload.time, 'MMM d, yyyy'))\n  }, [payload.value, payload.time, setHoverValue, setHoverDate])\n\n  return null\n}\n\n/**\n * Note: remember that it needs to be mounted inside the container with fixed height\n */\nconst LineChart = ({ data, setHoverValue, setHoverDate }: LineChartProps) => {\n  const { theme } = useTheme()\n  if (!data || data.length === 0) {\n    return <LineChartLoader />\n  }\n  return (\n    <ResponsiveContainer>\n      <AreaChart\n        data={data}\n        width={300}\n        height={308}\n        margin={{\n          top: 5,\n          right: 15,\n          left: 0,\n          bottom: 5,\n        }}\n        onMouseLeave={() => {\n          if (setHoverDate) setHoverDate(undefined)\n          if (setHoverValue) setHoverValue(undefined)\n        }}\n      >\n        <defs>\n          <linearGradient id=\"gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor={theme.colors.inputSecondary} stopOpacity={0.5} />\n            <stop offset=\"100%\" stopColor={theme.colors.secondary} stopOpacity={0} />\n          </linearGradient>\n        </defs>\n        <XAxis\n          dataKey=\"time\"\n          axisLine={false}\n          tickLine={false}\n          tickFormatter={(time) => format(time, 'dd')}\n          minTickGap={10}\n        />\n        <YAxis\n          dataKey=\"value\"\n          tickCount={6}\n          scale=\"linear\"\n          axisLine={false}\n          tickLine={false}\n          fontSize=\"12px\"\n          tickFormatter={(val) => `$${formatAmount(val)}`}\n          orientation=\"right\"\n          tick={{ dx: 10, fill: theme.colors.textSubtle }}\n        />\n        <Tooltip\n          cursor={{ stroke: theme.colors.secondary }}\n          contentStyle={{ display: 'none' }}\n          formatter={(tooltipValue, name, props) => (\n            <HoverUpdater payload={props.payload} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\n          )}\n        />\n        <Area dataKey=\"value\" type=\"monotone\" stroke={theme.colors.secondary} fill=\"url(#gradient)\" strokeWidth={2} />\n      </AreaChart>\n    </ResponsiveContainer>\n  )\n}\n\nexport default LineChart\n","import React from 'react'\nimport { Text, TextProps } from '@glide-finance/uikit'\n\nexport interface PercentProps extends TextProps {\n  value: number | undefined\n}\n\nconst Percent: React.FC<PercentProps> = ({ value, ...rest }) => {\n  if (!value || Number.isNaN(value)) {\n    return <Text {...rest}>-</Text>\n  }\n\n  const isNegative = value < 0\n\n  return (\n    <Text {...rest} color={isNegative ? 'failure' : 'success'}>\n      {isNegative ? '↓' : '↑'}\n      {Math.abs(value).toFixed(2)}%\n    </Text>\n  )\n}\n\nexport default Percent\n","import styled from 'styled-components'\nimport { Text, Flex } from '@glide-finance/uikit'\n\nexport const ClickableColumnHeader = styled(Text)`\n  cursor: pointer;\n`\n\nexport const TableWrapper = styled(Flex)`\n  width: 100%;\n  padding-top: 16px;\n  flex-direction: column;\n  gap: 16px;\n  background-color: ${({ theme }) => theme.card.background};\n  border-radius: ${({ theme }) => theme.radii.card};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nexport const PageButtons = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 0.2em;\n  margin-bottom: 1.2em;\n`\n\nexport const Arrow = styled.div`\n  color: ${({ theme }) => theme.colors.primary};\n  padding: 0 20px;\n  :hover {\n    cursor: pointer;\n  }\n`\n\nexport const Break = styled.div`\n  height: 1px;\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  width: 100%;\n`\n","import React, { useState, useMemo, useCallback, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Box, Skeleton, useMatchBreakpoints, ArrowBackIcon, ArrowForwardIcon } from '@glide-finance/uikit'\nimport { TokenData } from 'state/info/types'\nimport { Link } from 'react-router-dom'\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport { useTranslation } from 'contexts/Localization'\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\n\n/**\n *  Columns on different layouts\n *  6 = | # | Name | Price | Price Change | Volume 24H | TVL |\n *  5 = | # | Name | Price |              | Volume 24H | TVL |\n *  4 = | # | Name | Price |              | Volume 24H |     |\n *  2 = |   | Name |       |              | Volume 24H |     |\n *  On smallest screen Name is reduced to just symbol\n */\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n\n  padding: 0 24px;\n\n  grid-template-columns: 20px 3fr repeat(4, 1fr);\n\n  @media screen and (max-width: 900px) {\n    grid-template-columns: 20px 2fr repeat(3, 1fr);\n    & :nth-child(4) {\n      display: none;\n    }\n  }\n\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 20px 2fr repeat(2, 1fr);\n    & :nth-child(6) {\n      display: none;\n    }\n  }\n\n  @media screen and (max-width: 670px) {\n    grid-template-columns: 1fr 1fr;\n    > *:first-child {\n      display: none;\n    }\n    > *:nth-child(3) {\n      display: none;\n    }\n  }\n`\n\nconst LinkWrapper = styled(Link)`\n  text-decoration: none;\n  :hover {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n`\n\nconst ResponsiveLogo = styled(CurrencyLogo)`\n  @media screen and (max-width: 670px) {\n    width: 16px;\n    height: 16px;\n  }\n`\n\nconst TableLoader: React.FC = () => {\n  const loadingRow = (\n    <ResponsiveGrid>\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n    </ResponsiveGrid>\n  )\n  return (\n    <>\n      {loadingRow}\n      {loadingRow}\n      {loadingRow}\n    </>\n  )\n}\n\nconst DataRow: React.FC<{ tokenData: TokenData; index: number }> = ({ tokenData, index }) => {\n  const { isXs, isSm } = useMatchBreakpoints()\n  return (\n    <LinkWrapper to={`/info/token/${tokenData.address}`}>\n      <ResponsiveGrid>\n        <Flex>\n          <Text>{index + 1}</Text>\n        </Flex>\n        <Flex alignItems=\"center\">\n          <ResponsiveLogo address={tokenData.address} />\n          {(isXs || isSm) && <Text ml=\"8px\">{tokenData.symbol}</Text>}\n          {!isXs && !isSm && (\n            <Flex marginLeft=\"10px\">\n              <Text>{tokenData.name}</Text>\n              <Text ml=\"8px\">({tokenData.symbol})</Text>\n            </Flex>\n          )}\n        </Flex>\n        <Text fontWeight={400}>${formatAmount(tokenData.priceUSD, { notation: 'standard' })}</Text>\n        <Text fontWeight={400}>\n          <Percent value={tokenData.priceUSDChange} fontWeight={400} />\n        </Text>\n        <Text fontWeight={400}>${formatAmount(tokenData.volumeUSD)}</Text>\n        <Text fontWeight={400}>${formatAmount(tokenData.liquidityUSD)}</Text>\n      </ResponsiveGrid>\n    </LinkWrapper>\n  )\n}\n\nconst SORT_FIELD = {\n  name: 'name',\n  volumeUSD: 'volumeUSD',\n  tvlUSD: 'tvlUSD',\n  priceUSD: 'priceUSD',\n  priceUSDChange: 'priceUSDChange',\n  priceUSDChangeWeek: 'priceUSDChangeWeek',\n}\n\nconst MAX_ITEMS = 10\n\nconst TokenTable: React.FC<{\n  tokenDatas: TokenData[] | undefined\n  maxItems?: number\n}> = ({ tokenDatas, maxItems = MAX_ITEMS }) => {\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n\n  const { t } = useTranslation()\n\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n  useEffect(() => {\n    let extraPages = 1\n    if (tokenDatas) {\n      if (tokenDatas.length % maxItems === 0) {\n        extraPages = 0\n      }\n      setMaxPage(Math.floor(tokenDatas.length / maxItems) + extraPages)\n    }\n  }, [maxItems, tokenDatas])\n\n  const sortedTokens = useMemo(() => {\n    return tokenDatas\n      ? tokenDatas\n          .sort((a, b) => {\n            if (a && b) {\n              return a[sortField as keyof TokenData] > b[sortField as keyof TokenData]\n                ? (sortDirection ? -1 : 1) * 1\n                : (sortDirection ? -1 : 1) * -1\n            }\n            return -1\n          })\n          .slice(maxItems * (page - 1), page * maxItems)\n      : []\n  }, [tokenDatas, maxItems, page, sortDirection, sortField])\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  if (!tokenDatas) {\n    return <Skeleton />\n  }\n\n  return (\n    <TableWrapper>\n      <ResponsiveGrid>\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          #\n        </Text>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.name)}\n          textTransform=\"uppercase\"\n        >\n          {t('Name')} {arrow(SORT_FIELD.name)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.priceUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Price')} {arrow(SORT_FIELD.priceUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.priceUSDChange)}\n          textTransform=\"uppercase\"\n        >\n          {t('Price Change')} {arrow(SORT_FIELD.priceUSDChange)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.tvlUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Liquidity')} {arrow(SORT_FIELD.tvlUSD)}\n        </ClickableColumnHeader>\n      </ResponsiveGrid>\n\n      <Break />\n      {sortedTokens.length > 0 ? (\n        <>\n          {sortedTokens.map((data, i) => {\n            if (data) {\n              return (\n                <React.Fragment key={data.address}>\n                  <DataRow index={(page - 1) * MAX_ITEMS + i} tokenData={data} />\n                  <Break />\n                </React.Fragment>\n              )\n            }\n            return null\n          })}\n          <PageButtons>\n            <Arrow\n              onClick={() => {\n                setPage(page === 1 ? page : page - 1)\n              }}\n            >\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n            </Arrow>\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n            <Arrow\n              onClick={() => {\n                setPage(page === maxPage ? page : page + 1)\n              }}\n            >\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n            </Arrow>\n          </PageButtons>\n        </>\n      ) : (\n        <>\n          <TableLoader />\n          <Box />\n        </>\n      )}\n    </TableWrapper>\n  )\n}\n\nexport default TokenTable\n","import React, { useCallback, useState, useMemo, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport { Text, Flex, Box, Skeleton, ArrowBackIcon, ArrowForwardIcon } from '@glide-finance/uikit'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { PoolData } from 'state/info/types'\nimport { ITEMS_PER_INFO_TABLE_PAGE } from 'config/constants/info'\nimport { DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { useTranslation } from 'contexts/Localization'\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\n\n/**\n *  Columns on different layouts\n *  5 = | # | Pool | TVL | Volume 24H | Volume 7D |\n *  4 = | # | Pool |     | Volume 24H | Volume 7D |\n *  3 = | # | Pool |     | Volume 24H |           |\n *  2 = |   | Pool |     | Volume 24H |           |\n */\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n  grid-template-columns: 20px 3.5fr repeat(5, 1fr);\n\n  padding: 0 24px;\n  @media screen and (max-width: 900px) {\n    grid-template-columns: 20px 1.5fr repeat(3, 1fr);\n    & :nth-child(4),\n    & :nth-child(5) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 500px) {\n    grid-template-columns: 20px 1.5fr repeat(1, 1fr);\n    & :nth-child(4),\n    & :nth-child(5),\n    & :nth-child(6),\n    & :nth-child(7) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 480px) {\n    grid-template-columns: 2.5fr repeat(1, 1fr);\n    > *:nth-child(1) {\n      display: none;\n    }\n  }\n`\n\nconst LinkWrapper = styled(Link)`\n  text-decoration: none;\n  :hover {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n`\n\nconst SORT_FIELD = {\n  volumeUSD: 'volumeUSD',\n  tvlUSD: 'tvlUSD',\n  volumeUSDWeek: 'volumeUSDWeek',\n  lpFees24h: 'lpFees24h',\n  lpApr7d: 'lpApr7d',\n}\n\nconst LoadingRow: React.FC = () => (\n  <ResponsiveGrid>\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n  </ResponsiveGrid>\n)\n\nconst TableLoader: React.FC = () => (\n  <>\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n  </>\n)\n\nconst DataRow = ({ poolData, index }: { poolData: PoolData; index: number }) => {\n  return (\n    <LinkWrapper to={`/info/pool/${poolData.address}`}>\n      <ResponsiveGrid>\n        <Text>{index + 1}</Text>\n        <Flex>\n          <DoubleCurrencyLogo address0={poolData.token0.address} address1={poolData.token1.address} />\n          <Text ml=\"8px\">\n            {poolData.token0.symbol}/{poolData.token1.symbol}\n          </Text>\n        </Flex>\n        <Text>${formatAmount(poolData.volumeUSD)}</Text>\n        <Text>${formatAmount(poolData.volumeUSDWeek)}</Text>\n        <Text>${formatAmount(poolData.lpFees24h)}</Text>\n        <Text>{formatAmount(poolData.lpApr7d)}%</Text>\n        <Text>${formatAmount(poolData.liquidityUSD)}</Text>\n      </ResponsiveGrid>\n    </LinkWrapper>\n  )\n}\n\ninterface PoolTableProps {\n  poolDatas: PoolData[]\n  loading?: boolean // If true shows indication that SOME pools are loading, but the ones already fetched will be shown\n}\n\nconst PoolTable: React.FC<PoolTableProps> = ({ poolDatas, loading }) => {\n  // for sorting\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n  const { t } = useTranslation()\n\n  // pagination\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n  useEffect(() => {\n    let extraPages = 1\n    if (poolDatas.length % ITEMS_PER_INFO_TABLE_PAGE === 0) {\n      extraPages = 0\n    }\n    setMaxPage(Math.floor(poolDatas.length / ITEMS_PER_INFO_TABLE_PAGE) + extraPages)\n  }, [poolDatas])\n\n  const sortedPools = useMemo(() => {\n    return poolDatas\n      ? poolDatas\n          .sort((a, b) => {\n            if (a && b) {\n              return a[sortField as keyof PoolData] > b[sortField as keyof PoolData]\n                ? (sortDirection ? -1 : 1) * 1\n                : (sortDirection ? -1 : 1) * -1\n            }\n            return -1\n          })\n          .slice(ITEMS_PER_INFO_TABLE_PAGE * (page - 1), page * ITEMS_PER_INFO_TABLE_PAGE)\n      : []\n  }, [page, poolDatas, sortDirection, sortField])\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  return (\n    <TableWrapper>\n      <ResponsiveGrid>\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          #\n        </Text>\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Pool')}\n        </Text>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSDWeek)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 7D')} {arrow(SORT_FIELD.volumeUSDWeek)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.lpFees24h)}\n          textTransform=\"uppercase\"\n        >\n          {t('LP reward fees 24H')} {arrow(SORT_FIELD.lpFees24h)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.lpApr7d)}\n          textTransform=\"uppercase\"\n        >\n          {t('LP reward APR')} {arrow(SORT_FIELD.lpApr7d)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.tvlUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Liquidity')} {arrow(SORT_FIELD.tvlUSD)}\n        </ClickableColumnHeader>\n      </ResponsiveGrid>\n      <Break />\n      {sortedPools.length > 0 ? (\n        <>\n          {sortedPools.map((poolData, i) => {\n            if (poolData) {\n              return (\n                <React.Fragment key={poolData.address}>\n                  <DataRow index={(page - 1) * ITEMS_PER_INFO_TABLE_PAGE + i} poolData={poolData} />\n                  <Break />\n                </React.Fragment>\n              )\n            }\n            return null\n          })}\n          {loading && <LoadingRow />}\n          <PageButtons>\n            <Arrow\n              onClick={() => {\n                setPage(page === 1 ? page : page - 1)\n              }}\n            >\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n            </Arrow>\n\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n\n            <Arrow\n              onClick={() => {\n                setPage(page === maxPage ? page : page + 1)\n              }}\n            >\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n            </Arrow>\n          </PageButtons>\n        </>\n      ) : (\n        <>\n          <TableLoader />\n          {/* spacer */}\n          <Box />\n        </>\n      )}\n    </TableWrapper>\n  )\n}\n\nexport default PoolTable\n","import React, { useEffect, Dispatch, SetStateAction } from 'react'\nimport { format } from 'date-fns'\nimport { BarChart, ResponsiveContainer, XAxis, YAxis, Tooltip, Bar } from 'recharts'\nimport useTheme from 'hooks/useTheme'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { BarChartLoader } from 'views/Info/components/ChartLoaders'\n\nexport type LineChartProps = {\n  data: any[]\n  height?: string\n  chartHeight?: string\n  setHoverValue: Dispatch<SetStateAction<number | undefined>> // used for value on hover\n  setHoverDate: Dispatch<SetStateAction<string | undefined>> // used for label of value\n} & React.HTMLAttributes<HTMLDivElement>\n\nconst CustomBar = ({\n  x,\n  y,\n  width,\n  height,\n  fill,\n}: {\n  x: number\n  y: number\n  width: number\n  height: number\n  fill: string\n}) => {\n  return (\n    <g>\n      <rect x={x} y={y} fill={fill} width={width} height={height} rx=\"2\" />\n    </g>\n  )\n}\n\n// Calls setHoverValue and setHoverDate when part of chart is hovered\n// Note: this NEEDs to be wrapped inside component and useEffect, if you plug it as is it will create big render problems (try and see console)\nconst HoverUpdater = ({ payload, setHoverValue, setHoverDate }) => {\n  useEffect(() => {\n    setHoverValue(payload.value)\n    setHoverDate(format(payload.time, 'MMM d, yyyy'))\n  }, [payload.value, payload.time, setHoverValue, setHoverDate])\n\n  return null\n}\n\nconst Chart = ({ data, setHoverValue, setHoverDate }: LineChartProps) => {\n  const { theme } = useTheme()\n  if (!data || data.length === 0) {\n    return <BarChartLoader />\n  }\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart\n        data={data}\n        margin={{\n          top: 5,\n          right: 15,\n          left: 0,\n          bottom: 5,\n        }}\n        onMouseLeave={() => {\n          setHoverDate(undefined)\n          setHoverValue(undefined)\n        }}\n      >\n        <XAxis\n          dataKey=\"time\"\n          axisLine={false}\n          tickLine={false}\n          tickFormatter={(time) => format(time, 'dd')}\n          minTickGap={10}\n        />\n        <YAxis\n          dataKey=\"value\"\n          tickCount={6}\n          scale=\"linear\"\n          axisLine={false}\n          tickLine={false}\n          color={theme.colors.textSubtle}\n          fontSize=\"12px\"\n          tickFormatter={(val) => `$${formatAmount(val)}`}\n          orientation=\"right\"\n          tick={{ dx: 10, fill: theme.colors.textSubtle }}\n        />\n        <Tooltip\n          cursor={{ fill: theme.colors.backgroundDisabled }}\n          contentStyle={{ display: 'none' }}\n          formatter={(tooltipValue, name, props) => (\n            <HoverUpdater payload={props.payload} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\n          )}\n        />\n        <Bar\n          dataKey=\"value\"\n          fill={theme.colors.primary}\n          shape={(props) => (\n            <CustomBar height={props.height} width={props.width} x={props.x} y={props.y} fill={theme.colors.primary} />\n          )}\n        />\n      </BarChart>\n    </ResponsiveContainer>\n  )\n}\n\nexport default Chart\n","/**\n * Truncate a transaction or address hash\n */\nconst truncateHash = (address: string, startLength = 4, endLength = 4) => {\n  return `${address.substring(0, startLength)}...${address.substring(address.length - endLength)}`\n}\n\nexport default truncateHash\n","// TODO PCS refactor ternaries\n/* eslint-disable no-nested-ternary */\nimport React, { useCallback, useState, useMemo, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { formatDistanceToNowStrict } from 'date-fns'\nimport { Text, Flex, Box, Radio, Skeleton, LinkExternal, ArrowForwardIcon, ArrowBackIcon } from '@glide-finance/uikit'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { getBscScanLink } from 'utils'\nimport truncateHash from 'utils/truncateHash'\nimport { Transaction, TransactionType } from 'state/info/types'\nimport { ITEMS_PER_INFO_TABLE_PAGE } from 'config/constants/info'\nimport { useTranslation } from 'contexts/Localization'\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\n\nconst Wrapper = styled.div`\n  width: 100%;\n`\n\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n  grid-template-columns: 2fr 0.8fr repeat(4, 1fr);\n  padding: 0 24px;\n  @media screen and (max-width: 940px) {\n    grid-template-columns: 2fr repeat(4, 1fr);\n    & > *:nth-child(5) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 2fr repeat(2, 1fr);\n    & > *:nth-child(5) {\n      display: none;\n    }\n    & > *:nth-child(3) {\n      display: none;\n    }\n    & > *:nth-child(4) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 500px) {\n    grid-template-columns: 2fr 1fr;\n    & > *:nth-child(5) {\n      display: none;\n    }\n    & > *:nth-child(3) {\n      display: none;\n    }\n    & > *:nth-child(4) {\n      display: none;\n    }\n    & > *:nth-child(2) {\n      display: none;\n    }\n  }\n`\n\nconst RadioGroup = styled(Flex)`\n  align-items: center;\n  margin-right: 16px;\n  margin-top: 8px;\n  cursor: pointer;\n`\n\nconst SORT_FIELD = {\n  amountUSD: 'amountUSD',\n  timestamp: 'timestamp',\n  sender: 'sender',\n  amountToken0: 'amountToken0',\n  amountToken1: 'amountToken1',\n}\n\nconst TableLoader: React.FC = () => {\n  const loadingRow = (\n    <ResponsiveGrid>\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n    </ResponsiveGrid>\n  )\n  return (\n    <>\n      {loadingRow}\n      {loadingRow}\n      {loadingRow}\n    </>\n  )\n}\n\nconst DataRow: React.FC<{ transaction: Transaction }> = ({ transaction }) => {\n  const { t } = useTranslation()\n  const abs0 = Math.abs(transaction.amountToken0)\n  const abs1 = Math.abs(transaction.amountToken1)\n  const outputTokenSymbol = transaction.amountToken0 < 0 ? transaction.token0Symbol : transaction.token1Symbol\n  const inputTokenSymbol = transaction.amountToken1 < 0 ? transaction.token0Symbol : transaction.token1Symbol\n\n  return (\n    <ResponsiveGrid>\n      <LinkExternal href={getBscScanLink(transaction.hash, 'transaction')}>\n        <Text>\n          {transaction.type === TransactionType.MINT\n            ? t('Add %token0% and %token1%', { token0: transaction.token0Symbol, token1: transaction.token1Symbol })\n            : transaction.type === TransactionType.SWAP\n            ? t('Swap %token0% for %token1%', { token0: inputTokenSymbol, token1: outputTokenSymbol })\n            : t('Remove %token0% and %token1%', { token0: transaction.token0Symbol, token1: transaction.token1Symbol })}\n        </Text>\n      </LinkExternal>\n      <Text>${formatAmount(transaction.amountUSD)}</Text>\n      <Text>\n        <Text>{`${formatAmount(abs0)} ${transaction.token0Symbol}`}</Text>\n      </Text>\n      <Text>\n        <Text>{`${formatAmount(abs1)} ${transaction.token1Symbol}`}</Text>\n      </Text>\n      <LinkExternal href={getBscScanLink(transaction.sender, 'address')}>\n        {truncateHash(transaction.sender)}\n      </LinkExternal>\n      <Text>{formatDistanceToNowStrict(parseInt(transaction.timestamp, 10) * 1000)}</Text>\n    </ResponsiveGrid>\n  )\n}\n\nconst TransactionTable: React.FC<{\n  transactions: Transaction[]\n}> = ({ transactions }) => {\n  const [sortField, setSortField] = useState(SORT_FIELD.timestamp)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n\n  const { t } = useTranslation()\n\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n\n  const [txFilter, setTxFilter] = useState<TransactionType | undefined>(undefined)\n\n  const sortedTransactions = useMemo(() => {\n    return transactions\n      ? transactions\n          .slice()\n          .sort((a, b) => {\n            if (a && b) {\n              return a[sortField as keyof Transaction] > b[sortField as keyof Transaction]\n                ? (sortDirection ? -1 : 1) * 1\n                : (sortDirection ? -1 : 1) * -1\n            }\n            return -1\n          })\n          .filter((x) => {\n            return txFilter === undefined || x.type === txFilter\n          })\n          .slice(ITEMS_PER_INFO_TABLE_PAGE * (page - 1), page * ITEMS_PER_INFO_TABLE_PAGE)\n      : []\n  }, [transactions, page, sortField, sortDirection, txFilter])\n\n  // Update maxPage based on amount of items & applied filtering\n  useEffect(() => {\n    if (transactions) {\n      const filteredTransactions = transactions.filter((tx) => {\n        return txFilter === undefined || tx.type === txFilter\n      })\n      if (filteredTransactions.length % ITEMS_PER_INFO_TABLE_PAGE === 0) {\n        setMaxPage(Math.floor(filteredTransactions.length / ITEMS_PER_INFO_TABLE_PAGE))\n      } else {\n        setMaxPage(Math.floor(filteredTransactions.length / ITEMS_PER_INFO_TABLE_PAGE) + 1)\n      }\n    }\n  }, [transactions, txFilter])\n\n  const handleFilter = useCallback(\n    (newFilter: TransactionType) => {\n      if (newFilter !== txFilter) {\n        setTxFilter(newFilter)\n        setPage(1)\n      }\n    },\n    [txFilter],\n  )\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  return (\n    <Wrapper>\n      <Flex mb=\"16px\">\n        <Flex flexDirection={['column', 'row']}>\n          <RadioGroup onClick={() => handleFilter(undefined)}>\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === undefined} />\n            <Text ml=\"8px\">{t('All')}</Text>\n          </RadioGroup>\n\n          <RadioGroup onClick={() => handleFilter(TransactionType.SWAP)}>\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === TransactionType.SWAP} />\n            <Text ml=\"8px\">{t('Swaps')}</Text>\n          </RadioGroup>\n        </Flex>\n\n        <Flex flexDirection={['column', 'row']}>\n          <RadioGroup onClick={() => handleFilter(TransactionType.MINT)}>\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === TransactionType.MINT} />\n            <Text ml=\"8px\">{t('Adds')}</Text>\n          </RadioGroup>\n\n          <RadioGroup onClick={() => handleFilter(TransactionType.BURN)}>\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === TransactionType.BURN} />\n            <Text ml=\"8px\">{t('Removes')}</Text>\n          </RadioGroup>\n        </Flex>\n      </Flex>\n      <TableWrapper>\n        <ResponsiveGrid>\n          <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n            {t('Action')}\n          </Text>\n          <ClickableColumnHeader\n            color=\"secondary\"\n            fontSize=\"12px\"\n            bold\n            onClick={() => handleSort(SORT_FIELD.amountUSD)}\n            textTransform=\"uppercase\"\n          >\n            {t('Total Value')} {arrow(SORT_FIELD.amountUSD)}\n          </ClickableColumnHeader>\n          <ClickableColumnHeader\n            color=\"secondary\"\n            fontSize=\"12px\"\n            bold\n            onClick={() => handleSort(SORT_FIELD.amountToken0)}\n            textTransform=\"uppercase\"\n          >\n            {t('Token Amount')} {arrow(SORT_FIELD.amountToken0)}\n          </ClickableColumnHeader>\n          <ClickableColumnHeader\n            color=\"secondary\"\n            fontSize=\"12px\"\n            bold\n            onClick={() => handleSort(SORT_FIELD.amountToken1)}\n            textTransform=\"uppercase\"\n          >\n            {t('Token Amount')} {arrow(SORT_FIELD.amountToken1)}\n          </ClickableColumnHeader>\n          <ClickableColumnHeader\n            color=\"secondary\"\n            fontSize=\"12px\"\n            bold\n            onClick={() => handleSort(SORT_FIELD.sender)}\n            textTransform=\"uppercase\"\n          >\n            {t('Account')} {arrow(SORT_FIELD.sender)}\n          </ClickableColumnHeader>\n          <ClickableColumnHeader\n            color=\"secondary\"\n            fontSize=\"12px\"\n            bold\n            onClick={() => handleSort(SORT_FIELD.timestamp)}\n            textTransform=\"uppercase\"\n          >\n            {t('Time')} {arrow(SORT_FIELD.timestamp)}\n          </ClickableColumnHeader>\n        </ResponsiveGrid>\n        <Break />\n\n        {transactions ? (\n          <>\n            {sortedTransactions.map((transaction, index) => {\n              if (transaction) {\n                return (\n                  // eslint-disable-next-line react/no-array-index-key\n                  <React.Fragment key={index}>\n                    <DataRow transaction={transaction} />\n                    <Break />\n                  </React.Fragment>\n                )\n              }\n              return null\n            })}\n            {sortedTransactions.length === 0 ? (\n              <Flex justifyContent=\"center\">\n                <Text>{t('No Transactions')}</Text>\n              </Flex>\n            ) : undefined}\n            <PageButtons>\n              <Arrow\n                onClick={() => {\n                  setPage(page === 1 ? page : page - 1)\n                }}\n              >\n                <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n              </Arrow>\n\n              <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n              <Arrow\n                onClick={() => {\n                  setPage(page === maxPage ? page : page + 1)\n                }}\n              >\n                <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n              </Arrow>\n            </PageButtons>\n          </>\n        ) : (\n          <>\n            <TableLoader />\n            {/* spacer */}\n            <Box />\n          </>\n        )}\n      </TableWrapper>\n    </Wrapper>\n  )\n}\n\nexport default TransactionTable\n","import React, { useState, useMemo, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Box, Text, Heading, Card, Skeleton } from '@glide-finance/uikit'\nimport { format, fromUnixTime } from 'date-fns'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/Layout/Page'\nimport LineChart from 'views/Info/components/InfoCharts/LineChart'\nimport TokenTable from 'views/Info/components/InfoTables/TokensTable'\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport BarChart from 'views/Info/components/InfoCharts/BarChart'\nimport {\n  useAllPoolData,\n  useAllTokenData,\n  useProtocolChartData,\n  useProtocolData,\n  useProtocolTransactions,\n} from 'state/info/hooks'\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\n\nexport const ChartCardsContainer = styled(Flex)`\n  justify-content: space-between;\n  flex-direction: column;\n  width: 100%;\n  padding: 0;\n  gap: 1em;\n\n  & > * {\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  } ;\n`\n\nconst Overview: React.FC = () => {\n  const { t } = useTranslation()\n  const [liquidityHover, setLiquidityHover] = useState<number | undefined>()\n  const [liquidityDateHover, setLiquidityDateHover] = useState<string | undefined>()\n  const [volumeHover, setVolumeHover] = useState<number | undefined>()\n  const [volumeDateHover, setVolumeDateHover] = useState<string | undefined>()\n\n  const [protocolData] = useProtocolData()\n  const [chartData] = useProtocolChartData()\n  const [transactions] = useProtocolTransactions()\n\n  const currentDate = format(new Date(), 'MMM d, yyyy')\n\n  // Getting latest liquidity and volumeUSD to display on top of chart when not hovered\n  useEffect(() => {\n    if (volumeHover == null && protocolData) {\n      setVolumeHover(protocolData.volumeUSD)\n    }\n  }, [protocolData, volumeHover])\n  useEffect(() => {\n    if (liquidityHover == null && protocolData) {\n      setLiquidityHover(protocolData.liquidityUSD)\n    }\n  }, [liquidityHover, protocolData])\n\n  const formattedLiquidityData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.liquidityUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n\n  const formattedVolumeData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.volumeUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n\n  const allTokens = useAllTokenData()\n\n  const formattedTokens = useMemo(() => {\n    return Object.values(allTokens)\n      .map((token) => token.data)\n      .filter((token) => token)\n  }, [allTokens])\n\n  const allPoolData = useAllPoolData()\n  const poolDatas = useMemo(() => {\n    return Object.values(allPoolData)\n      .map((pool) => pool.data)\n      .filter((pool) => pool)\n  }, [allPoolData])\n\n  const somePoolsAreLoading = useMemo(() => {\n    return Object.values(allPoolData).some((pool) => !pool.data)\n  }, [allPoolData])\n\n  return (\n    <Page>\n      <Heading scale=\"lg\" mb=\"16px\" id=\"info-overview-title\">\n        {t('Glide Info & Analytics')}\n      </Heading>\n      <ChartCardsContainer>\n        <Card>\n          <Box p={['16px', '16px', '24px']}>\n            <Text bold color=\"secondary\">\n              {t('Liquidity')}\n            </Text>\n            {liquidityHover > 0 ? (\n              <Text bold fontSize=\"24px\">\n                ${formatAmount(liquidityHover)}\n              </Text>\n            ) : (\n              <Skeleton width=\"128px\" height=\"36px\" />\n            )}\n            <Text>{liquidityDateHover ?? currentDate}</Text>\n            <Box height=\"250px\">\n              <LineChart\n                data={formattedLiquidityData}\n                setHoverValue={setLiquidityHover}\n                setHoverDate={setLiquidityDateHover}\n              />\n            </Box>\n          </Box>\n        </Card>\n        <Card>\n          <Box p={['16px', '16px', '24px']}>\n            <Text bold color=\"secondary\">\n              {t('Volume 24H')}\n            </Text>\n            {volumeHover > 0 ? (\n              <Text bold fontSize=\"24px\">\n                ${formatAmount(volumeHover)}\n              </Text>\n            ) : (\n              <Skeleton width=\"128px\" height=\"36px\" />\n            )}\n            <Text>{volumeDateHover ?? currentDate}</Text>\n            <Box height=\"250px\">\n              <BarChart data={formattedVolumeData} setHoverValue={setVolumeHover} setHoverDate={setVolumeDateHover} />\n            </Box>\n          </Box>\n        </Card>\n      </ChartCardsContainer>\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Top Tokens')}\n      </Heading>\n      <TokenTable tokenDatas={formattedTokens} />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Top Pools')}\n      </Heading>\n      <PoolTable poolDatas={poolDatas} loading={somePoolsAreLoading} />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Transactions')}\n      </Heading>\n      <TransactionTable transactions={transactions} />\n    </Page>\n  )\n}\n\nexport default Overview\n","import React, { useMemo } from 'react'\nimport { Text, Heading, Card } from '@glide-finance/uikit'\nimport Page from 'components/Layout/Page'\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\nimport { useAllPoolData, usePoolDatas } from 'state/info/hooks'\nimport { useWatchlistPools } from 'state/user/hooks'\nimport { useTranslation } from 'contexts/Localization'\n\nconst PoolsOverview: React.FC = () => {\n  const { t } = useTranslation()\n\n  // get all the pool datas that exist\n  const allPoolData = useAllPoolData()\n  const poolDatas = useMemo(() => {\n    return Object.values(allPoolData)\n      .map((pool) => pool.data)\n      .filter((pool) => pool)\n  }, [allPoolData])\n\n  const [savedPools] = useWatchlistPools()\n  const watchlistPools = usePoolDatas(savedPools)\n\n  return (\n    <Page>\n      <Heading scale=\"lg\" mb=\"16px\">\n        {t('Your Watchlist')}\n      </Heading>\n      <Card>\n        {watchlistPools.length > 0 ? (\n          <PoolTable poolDatas={watchlistPools} />\n        ) : (\n          <Text px=\"24px\" py=\"16px\">\n            {t('Saved pools will appear here')}\n          </Text>\n        )}\n      </Card>\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\" id=\"info-pools-title\">\n        {t('All Pools')}\n      </Heading>\n      <PoolTable poolDatas={poolDatas} />\n    </Page>\n  )\n}\n\nexport default PoolsOverview\n","import { ChainId, Currency, currencyEquals, JSBI, Price, WETH } from '@glide-finance/sdk'\nimport { useMemo } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { USDC, GLIDE } from '../config/constants/tokens'\nimport { PairState, usePairs } from './usePairs'\nimport { wrappedCurrency } from '../utils/wrappedCurrency'\n\nconst USDC_MAINNET = USDC[ChainId.MAINNET]\n\n/**\n * Returns the price in USDC of the input currency\n * @param currency currency to compute the USDC price of\n */\nexport default function useUSDCPrice(currency?: Currency): Price | undefined {\n  const { chainId } = useActiveWeb3React()\n  const wrapped = wrappedCurrency(currency, chainId)\n  const tokenPairs: [Currency | undefined, Currency | undefined][] = useMemo(\n    () => [\n      [\n        chainId && wrapped && currencyEquals(WETH[chainId], wrapped) ? undefined : currency,\n        chainId ? WETH[chainId] : undefined,\n      ],\n      [wrapped?.equals(USDC_MAINNET) ? undefined : wrapped, chainId === ChainId.MAINNET ? USDC_MAINNET : undefined],\n      [chainId ? WETH[chainId] : undefined, chainId === ChainId.MAINNET ? USDC_MAINNET : undefined],\n    ],\n    [chainId, currency, wrapped],\n  )\n  const [[ethPairState, ethPair], [usdcPairState, usdcPair], [usdcEthPairState, usdcEthPair]] = usePairs(tokenPairs)\n\n  return useMemo(() => {\n    if (!currency || !wrapped || !chainId) {\n      return undefined\n    }\n    // handle weth/eth\n    if (wrapped.equals(WETH[chainId])) {\n      if (usdcPair) {\n        const price = usdcPair.priceOf(WETH[chainId])\n        return new Price(currency, USDC_MAINNET, price.denominator, price.numerator)\n      }\n      return undefined\n    }\n    // handle usdc\n    if (wrapped.equals(USDC_MAINNET)) {\n      return new Price(USDC_MAINNET, USDC_MAINNET, '1', '1')\n    }\n\n    const ethPairETHAmount = ethPair?.reserveOf(WETH[chainId])\n    const ethPairETHUSDCValue: JSBI =\n      ethPairETHAmount && usdcEthPair ? usdcEthPair.priceOf(WETH[chainId]).quote(ethPairETHAmount).raw : JSBI.BigInt(0)\n\n    // all other tokens\n    // first try the usdc pair\n    if (\n      usdcPairState === PairState.EXISTS &&\n      usdcPair &&\n      usdcPair.reserveOf(USDC_MAINNET).greaterThan(ethPairETHUSDCValue)\n    ) {\n      const price = usdcPair.priceOf(wrapped)\n      return new Price(currency, USDC_MAINNET, price.denominator, price.numerator)\n    }\n    if (ethPairState === PairState.EXISTS && ethPair && usdcEthPairState === PairState.EXISTS && usdcEthPair) {\n      if (usdcEthPair.reserveOf(USDC_MAINNET).greaterThan('0') && ethPair.reserveOf(WETH[chainId]).greaterThan('0')) {\n        const ethUsdcPrice = usdcEthPair.priceOf(USDC_MAINNET)\n        const currencyEthPrice = ethPair.priceOf(WETH[chainId])\n        const usdcPrice = ethUsdcPrice.multiply(currencyEthPrice).invert()\n        return new Price(currency, USDC_MAINNET, usdcPrice.denominator, usdcPrice.numerator)\n      }\n    }\n    return undefined\n  }, [chainId, currency, ethPair, ethPairState, usdcEthPair, usdcEthPairState, usdcPair, usdcPairState, wrapped])\n}\n\nexport const useCakeUsdcPrice = (): Price | undefined => {\n  const { chainId } = useActiveWeb3React()\n  const currentChaindId = chainId || ChainId.MAINNET\n  const glideUsdcPrice = useUSDCPrice(GLIDE[currentChaindId])\n  return glideUsdcPrice\n}\n","import React, { useMemo, useState } from 'react'\nimport { Text, Box, Card, Flex, Skeleton } from '@glide-finance/uikit'\nimport LineChart from 'views/Info/components/InfoCharts/LineChart'\nimport BarChart from 'views/Info/components/InfoCharts/BarChart'\nimport CandleChart from 'views/Info/components/InfoCharts/CandleChart'\nimport { TabToggleGroup, TabToggle } from 'components/TabToggle'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { ChartEntry, TokenData, PriceChartEntry } from 'state/info/types'\nimport { format, fromUnixTime } from 'date-fns'\n\nenum ChartView {\n  LIQUIDITY,\n  VOLUME,\n  PRICE,\n}\n\ninterface ChartCardProps {\n  variant: 'pool' | 'token'\n  chartData: ChartEntry[]\n  tokenData?: TokenData\n  tokenPriceData?: PriceChartEntry[]\n}\n\nconst ChartCard: React.FC<ChartCardProps> = ({ variant, chartData, tokenData, tokenPriceData }) => {\n  const [view, setView] = useState(ChartView.PRICE)\n  const [hoverValue, setHoverValue] = useState<number | undefined>()\n  const [hoverDate, setHoverDate] = useState<string | undefined>()\n  const { t } = useTranslation()\n\n  const currentDate = format(new Date(), 'MMM d, yyyy')\n\n  const formattedTvlData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.liquidityUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n  const formattedVolumeData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.volumeUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n\n  const getLatestValueDisplay = () => {\n    let valueToDisplay = null\n    if (hoverValue) {\n      valueToDisplay = formatAmount(hoverValue)\n    } else if (view === ChartView.VOLUME && formattedVolumeData.length > 0) {\n      valueToDisplay = formatAmount(formattedVolumeData[formattedVolumeData.length - 1]?.value)\n    } else if (view === ChartView.LIQUIDITY && formattedTvlData.length > 0) {\n      valueToDisplay = formatAmount(formattedTvlData[formattedTvlData.length - 1]?.value)\n    } else if (view === ChartView.PRICE && tokenData?.priceUSD) {\n      valueToDisplay = formatAmount(tokenData.priceUSD)\n    }\n\n    return valueToDisplay ? (\n      <Text fontSize=\"24px\" bold>\n        ${valueToDisplay}\n      </Text>\n    ) : (\n      <Skeleton height=\"36px\" width=\"128px\" />\n    )\n  }\n\n  return (\n    <Card>\n      <TabToggleGroup>\n       {variant === 'token' && (\n          <TabToggle isActive={view === ChartView.PRICE} onClick={() => setView(ChartView.PRICE)}>\n            <Text>{t('Price')}</Text>\n          </TabToggle>\n        )}\n        <TabToggle isActive={view === ChartView.VOLUME} onClick={() => setView(ChartView.VOLUME)}>\n          <Text>{t('Volume')}</Text>\n        </TabToggle>\n        <TabToggle isActive={view === ChartView.LIQUIDITY} onClick={() => setView(ChartView.LIQUIDITY)}>\n          <Text>{t('Liquidity')}</Text>\n        </TabToggle>\n       \n      </TabToggleGroup>\n\n      <Flex flexDirection=\"column\" px=\"24px\" pt=\"24px\">\n        {getLatestValueDisplay()}\n        <Text small color=\"secondary\">\n          {hoverDate || currentDate}\n        </Text>\n      </Flex>\n\n      <Box px=\"24px\" height={variant === 'token' ? '250px' : '335px'}>\n        {view === ChartView.LIQUIDITY ? (\n          <LineChart data={formattedTvlData} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\n        ) : view === ChartView.VOLUME ? (\n          <BarChart data={formattedVolumeData} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\n        ) : view === ChartView.PRICE ? (\n          <CandleChart data={tokenPriceData} setValue={setHoverValue} setLabel={setHoverDate} />\n        ) : null}\n      </Box>\n    </Card>\n  )\n}\n\nexport default ChartCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Helmet } from 'react-helmet-async'\nimport { useLocation } from 'react-router'\nimport { DEFAULT_META, getCustomMeta } from 'config/constants/meta'\nimport { useCakeUsdcPrice } from 'hooks/useUSDCPrice'\nimport Container from './Container'\n\nconst StyledPage = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport const PageMeta: React.FC<{ symbol?: string }> = ({ symbol }) => {\n  const { t } = useTranslation()\n  const { pathname } = useLocation()\n  const cakePriceUsd = useCakeUsdcPrice()\n  const cakePriceUsdDisplay = cakePriceUsd ? `$${cakePriceUsd.toFixed(3)}` : '...'\n\n  const pageMeta = getCustomMeta(pathname, t) || {}\n  const { title, description, image } = { ...DEFAULT_META, ...pageMeta }\n  let pageTitle = cakePriceUsdDisplay ? [title, cakePriceUsdDisplay].join(' - ') : title\n  if (symbol) {\n    pageTitle = [symbol, title].join(' - ')\n  }\n\n  return (\n    <Helmet>\n      <title>{pageTitle}</title>\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:image\" content={image} />\n    </Helmet>\n  )\n}\n\ninterface PageProps extends React.HTMLAttributes<HTMLDivElement> {\n  symbol?: string\n}\n\nconst Page1: React.FC<PageProps> = ({ children, symbol, ...props }) => {\n  return (\n    <>\n      <PageMeta symbol={symbol} />\n      <StyledPage {...props}>{children}</StyledPage>\n    </>\n  )\n}\n\nexport default Page1\n","import React, { useRef, useState, useEffect, useCallback, Dispatch, SetStateAction } from 'react'\nimport { createChart, IChartApi } from 'lightweight-charts'\nimport { format } from 'date-fns'\nimport useTheme from 'hooks/useTheme'\nimport { CandleChartLoader } from 'views/Info/components/ChartLoaders'\n\nconst CANDLE_CHART_HEIGHT = 250\n\nexport type LineChartProps = {\n  data: any[]\n  setValue?: Dispatch<SetStateAction<number | undefined>> // used for value on hover\n  setLabel?: Dispatch<SetStateAction<string | undefined>> // used for value label on hover\n} & React.HTMLAttributes<HTMLDivElement>\n\nconst CandleChart = ({ data, setValue, setLabel, ...rest }: LineChartProps) => {\n  const { theme } = useTheme()\n  const chartRef = useRef<HTMLDivElement>(null)\n  const [chartCreated, setChart] = useState<IChartApi | undefined>()\n\n  const handleResize = useCallback(() => {\n    if (chartCreated && chartRef?.current?.parentElement) {\n      chartCreated.resize(chartRef.current.parentElement.clientWidth - 32, CANDLE_CHART_HEIGHT)\n      chartCreated.timeScale().fitContent()\n      chartCreated.timeScale().scrollToPosition(0, false)\n    }\n  }, [chartCreated, chartRef])\n\n  // add event listener for resize\n  const isClient = typeof window === 'object'\n  useEffect(() => {\n    if (!isClient) {\n      return null\n    }\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [isClient, chartRef, handleResize]) // Empty array ensures that effect is only run on mount and unmount\n\n  // if chart not instantiated in canvas, create it\n  useEffect(() => {\n    if (!chartCreated && data && !!chartRef?.current?.parentElement) {\n      const chart = createChart(chartRef.current, {\n        height: CANDLE_CHART_HEIGHT,\n        width: chartRef.current.parentElement.clientWidth - 32,\n        layout: {\n          backgroundColor: 'transparent',\n          textColor: theme.colors.textSubtle,\n          fontFamily: 'Kanit, sans-serif',\n          fontSize: 12,\n        },\n        rightPriceScale: {\n          scaleMargins: {\n            top: 0.1,\n            bottom: 0.1,\n          },\n          borderVisible: false,\n        },\n        timeScale: {\n          borderVisible: false,\n          secondsVisible: true,\n          tickMarkFormatter: (unixTime: number) => {\n            return format(unixTime * 1000, 'MM/dd h:mm a')\n          },\n        },\n        watermark: {\n          visible: false,\n        },\n        grid: {\n          horzLines: {\n            visible: false,\n          },\n          vertLines: {\n            visible: false,\n          },\n        },\n        crosshair: {\n          horzLine: {\n            visible: false,\n            labelVisible: false,\n          },\n          mode: 1,\n          vertLine: {\n            visible: true,\n            labelVisible: false,\n            style: 3,\n            width: 1,\n            color: theme.colors.textSubtle,\n            labelBackgroundColor: theme.colors.primary,\n          },\n        },\n      })\n\n      chart.timeScale().fitContent()\n      setChart(chart)\n    }\n  }, [chartCreated, data, setValue, theme])\n\n  useEffect(() => {\n    if (chartCreated && data) {\n      const series = chartCreated.addCandlestickSeries({\n        upColor: theme.colors.success,\n        downColor: theme.colors.failure,\n        borderDownColor: theme.colors.failure,\n        borderUpColor: theme.colors.success,\n        wickDownColor: theme.colors.failure,\n        wickUpColor: theme.colors.success,\n      })\n\n      series.setData(data)\n\n      // update the title when hovering on the chart\n      chartCreated.subscribeCrosshairMove((param) => {\n        if (\n          chartRef?.current &&\n          (param === undefined ||\n            param.time === undefined ||\n            (param && param.point && param.point.x < 0) ||\n            (param && param.point && param.point.x > chartRef.current.clientWidth) ||\n            (param && param.point && param.point.y < 0) ||\n            (param && param.point && param.point.y > CANDLE_CHART_HEIGHT))\n        ) {\n          // reset values\n          if (setValue) setValue(undefined)\n          if (setLabel) setLabel(undefined)\n        } else if (series && param) {\n          const timestamp = param.time as number\n          const now = new Date(timestamp * 1000)\n          const utc = new Date(now.getTime() + now.getTimezoneOffset() * 60000)\n          const time = `${format(utc, 'MMM d, yyyy h:mm a')} (UTC)`\n          const parsed = param.seriesPrices.get(series) as { open: number } | undefined\n          if (setValue) setValue(parsed?.open)\n          if (setLabel) setLabel(time)\n        }\n      })\n    }\n  }, [chartCreated, data, setValue, setLabel, theme])\n\n  return (\n    <>\n      {!chartCreated && <CandleChartLoader />}\n      <div ref={chartRef} id=\"candle-chart\" {...rest} />\n    </>\n  )\n}\n\nexport default CandleChart\n","import React from 'react'\nimport { Flex } from '@glide-finance/uikit'\nimport styled from 'styled-components'\n\nconst Wrapper = styled(Flex)`\n  overflow-x: scroll;\n  padding: 0;\n  border-radius: 24px 24px 0 0;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n  scrollbar-width: none; /* Firefox */\n`\n\nconst Inner = styled(Flex)`\n  justify-content: space-between;\n  background-color: ${({ theme }) => theme.colors.input};\n  width: 100%;\n`\n\ninterface TabProps {\n  isActive?: boolean\n  onClick?: () => void\n}\n\nexport const TabToggle = styled.button<TabProps>`\n  display: inline-flex;\n  justify-content: center;\n  cursor: pointer;\n  flex: 1;\n  border: 0;\n  outline: 0;\n  padding: 16px;\n  margin: 0;\n  border-radius: 24px 24px 0 0;\n  font-size: 16px;\n  font-weight: 600;\n  color: ${({ theme, isActive }) => (isActive ? theme.colors.text : theme.colors.textSubtle)};\n  background-color: ${({ theme, isActive }) => (isActive ? theme.card.background : theme.colors.input)};\n`\n\ninterface TabToggleGroupProps {\n  children: React.ReactElement[]\n}\n\nexport const TabToggleGroup: React.FC<TabToggleGroupProps> = ({ children }) => {\n  return (\n    <Wrapper p={['0 4px', '0 16px']}>\n      <Inner>{children}</Inner>\n    </Wrapper>\n  )\n}\n","/* eslint-disable no-nested-ternary */\nimport React, { useEffect, useState } from 'react'\nimport { RouteComponentProps, Link } from 'react-router-dom'\nimport {\n  Text,\n  Flex,\n  Box,\n  Button,\n  Card,\n  Breadcrumbs,\n  Heading,\n  ButterflyLoader,\n  LinkExternal,\n  useMatchBreakpoints,\n  ButtonMenu,\n  ButtonMenuItem,\n  HelpIcon,\n  useTooltip,\n} from '@glide-finance/uikit'\nimport styled from 'styled-components'\nimport Page1 from 'components/Layout/Page1'\nimport { getBscScanLink } from 'utils'\nimport { CurrencyLogo, DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport SaveIcon from 'views/Info/components/SaveIcon'\nimport { usePoolDatas, usePoolChartData, usePoolTransactions } from 'state/info/hooks'\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\nimport { useWatchlistPools } from 'state/user/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport ChartCard from 'views/Info/components/InfoCharts/ChartCard'\n\nconst ContentLayout = styled.div`\n  display: grid;\n  grid-template-columns: 300px 1fr;\n  grid-gap: 1em;\n  margin-top: 16px;\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr 1fr;\n  }\n`\n\nconst TokenButton = styled(Flex)`\n  padding: 8px 0px;\n  margin-right: 16px;\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst LockedTokensContainer = styled(Flex)`\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  background-color: ${({ theme }) => theme.colors.background};\n  padding: 16px;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: 8px;\n  border-radius: 16px;\n  max-width: 280px;\n`\n\nconst PoolPage: React.FC<RouteComponentProps<{ address: string }>> = ({\n  match: {\n    params: { address: routeAddress },\n  },\n}) => {\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { t } = useTranslation()\n  const [showWeeklyData, setShowWeeklyData] = useState(0)\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(\n    t(`Based on last 7 days' performance. Does not account for impermanent loss`),\n    {},\n  )\n\n  // Needed to scroll up if user comes to this page by clicking on entry in the table\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [])\n\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\n  const address = routeAddress.toLowerCase()\n\n  const poolData = usePoolDatas([address])[0]\n  const chartData = usePoolChartData(address)\n  const transactions = usePoolTransactions(address)\n\n  const [watchlistPools, addPoolToWatchlist] = useWatchlistPools()\n\n  return (\n    <Page1 symbol={poolData ? `${poolData?.token0.symbol} / ${poolData?.token1.symbol}` : null}>\n      {poolData ? (\n        <>\n          <Flex justifyContent=\"space-between\" mb=\"16px\" flexDirection={['column', 'column', 'row']}>\n            <Breadcrumbs mb=\"32px\">\n              <Link to=\"/info\">\n                <Text color=\"primary\">{t('Info')}</Text>\n              </Link>\n              <Link to=\"/info/pools\">\n                <Text color=\"primary\">{t('Pools')}</Text>\n              </Link>\n              <Flex>\n                <Text mr=\"8px\">{`${poolData.token0.symbol} / ${poolData.token1.symbol}`}</Text>\n              </Flex>\n            </Breadcrumbs>\n            <Flex justifyContent={[null, null, 'flex-end']} mt={['8px', '8px', 0]}>\n              <LinkExternal mr=\"8px\" href={getBscScanLink(address, 'address')}>\n                {t('View on explorer')}\n              </LinkExternal>\n              <SaveIcon fill={watchlistPools.includes(address)} onClick={() => addPoolToWatchlist(address)} />\n            </Flex>\n          </Flex>\n          <Flex flexDirection=\"column\">\n            <Flex alignItems=\"center\" mb={['8px', null]}>\n              <DoubleCurrencyLogo address0={poolData.token0.address} address1={poolData.token1.address} size={32} />\n              <Text\n                ml=\"38px\"\n                bold\n                fontSize={isXs || isSm ? '24px' : '40px'}\n                id=\"info-pool-pair-title\"\n              >{`${poolData.token0.symbol} / ${poolData.token1.symbol}`}</Text>\n            </Flex>\n            <Flex justifyContent=\"space-between\" flexDirection={['column', 'column', 'column', 'row']}>\n              <Flex flexDirection={['column', 'column', 'row']} mb={['8px', '8px', null]}>\n                <Link to={`/info/token/${poolData.token0.address}`}>\n                  <TokenButton>\n                    <CurrencyLogo address={poolData.token0.address} size=\"24px\" />\n                    <Text fontSize=\"16px\" ml=\"4px\" style={{ whiteSpace: 'nowrap' }} width=\"fit-content\">\n                      {`1 ${poolData.token0.symbol} =  ${formatAmount(poolData.token1Price, {\n                        notation: 'standard',\n                        displayThreshold: 0.001,\n                        tokenPrecision: true,\n                      })} ${poolData.token1.symbol}`}\n                    </Text>\n                  </TokenButton>\n                </Link>\n                <Link to={`/info/token/${poolData.token1.address}`}>\n                  <TokenButton ml={[null, null, '10px']}>\n                    <CurrencyLogo address={poolData.token1.address} size=\"24px\" />\n                    <Text fontSize=\"16px\" ml=\"4px\" style={{ whiteSpace: 'nowrap' }} width=\"fit-content\">\n                      {`1 ${poolData.token1.symbol} =  ${formatAmount(poolData.token0Price, {\n                        notation: 'standard',\n                        displayThreshold: 0.001,\n                        tokenPrecision: true,\n                      })} ${poolData.token0.symbol}`}\n                    </Text>\n                  </TokenButton>\n                </Link>\n              </Flex>\n              <Flex>\n                <Link to={`/add/${poolData.token0.address}/${poolData.token1.address}`}>\n                  <Button mr=\"8px\" variant=\"secondary\">\n                    {t('Add Liquidity')}\n                  </Button>\n                </Link>\n                <Link to={`/swap?inputCurrency=${poolData.token0.address}&outputCurrency=${poolData.token1.address}`}>\n                  <Button>{t('Trade')}</Button>\n                </Link>\n              </Flex>\n            </Flex>\n          </Flex>\n          <ContentLayout>\n            <Box>\n              <Card>\n                <Box p=\"24px\">\n                  <Flex justifyContent=\"space-between\">\n                    <Flex flex=\"1\" flexDirection=\"column\">\n                      <Text color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\n                        {t('Liquidity')}\n                      </Text>\n                      <Text fontSize=\"24px\" bold>\n                        ${formatAmount(poolData.liquidityUSD)}\n                      </Text>\n                      <Percent value={poolData.liquidityUSDChange} />\n                    </Flex>\n                    <Flex flex=\"1\" flexDirection=\"column\">\n                      <Text color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\n                        {t('LP reward APR')}\n                      </Text>\n                      <Text fontSize=\"24px\" bold>\n                        {formatAmount(poolData.lpApr7d)}%\n                      </Text>\n                      <Flex alignItems=\"center\">\n                        <span ref={targetRef}>\n                          <HelpIcon color=\"textSubtle\" />\n                        </span>\n                        <Text ml=\"4px\" fontSize=\"12px\" color=\"textSubtle\">\n                          {t('7D performance')}\n                        </Text>\n                        {tooltipVisible && tooltip}\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                  <Text color=\"secondary\" bold mt=\"24px\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Total Tokens Locked')}\n                  </Text>\n                  <LockedTokensContainer>\n                    <Flex justifyContent=\"space-between\">\n                      <Flex>\n                        <CurrencyLogo address={poolData.token0.address} size=\"24px\" />\n                        <Text small color=\"textSubtle\" ml=\"8px\">\n                          {poolData.token0.symbol}\n                        </Text>\n                      </Flex>\n                      <Text small>{formatAmount(poolData.liquidityToken0)}</Text>\n                    </Flex>\n                    <Flex justifyContent=\"space-between\">\n                      <Flex>\n                        <CurrencyLogo address={poolData.token1.address} size=\"24px\" />\n                        <Text small color=\"textSubtle\" ml=\"8px\">\n                          {poolData.token1.symbol}\n                        </Text>\n                      </Flex>\n                      <Text small>{formatAmount(poolData.liquidityToken1)}</Text>\n                    </Flex>\n                  </LockedTokensContainer>\n                </Box>\n              </Card>\n              <Card mt=\"16px\">\n                <Flex flexDirection=\"column\" p=\"24px\">\n                  <ButtonMenu\n                    activeIndex={showWeeklyData}\n                    onItemClick={(index) => setShowWeeklyData(index)}\n                    scale=\"sm\"\n                    variant=\"subtle\"\n                  >\n                    <ButtonMenuItem width=\"100%\">{t('24H')}</ButtonMenuItem>\n                    <ButtonMenuItem width=\"100%\">{t('7D')}</ButtonMenuItem>\n                  </ButtonMenu>\n                  <Flex mt=\"24px\">\n                    <Flex flex=\"1\" flexDirection=\"column\">\n                      <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n                        {showWeeklyData ? t('Volume 7D') : t('Volume 24H')}\n                      </Text>\n                      <Text fontSize=\"24px\" bold>\n                        ${showWeeklyData ? formatAmount(poolData.volumeUSDWeek) : formatAmount(poolData.volumeUSD)}\n                      </Text>\n                      <Percent value={showWeeklyData ? poolData.volumeUSDChangeWeek : poolData.volumeUSDChange} />\n                    </Flex>\n                    <Flex flex=\"1\" flexDirection=\"column\">\n                      <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n                        {showWeeklyData ? t('LP reward fees 7D') : t('LP reward fees 24H')}\n                      </Text>\n                      <Text fontSize=\"24px\" bold>\n                        ${showWeeklyData ? formatAmount(poolData.lpFees7d) : formatAmount(poolData.lpFees24h)}\n                      </Text>\n                      <Text color=\"textSubtle\" fontSize=\"12px\">\n                        {t('out of $%totalFees% total fees', {\n                          totalFees: showWeeklyData\n                            ? formatAmount(poolData.totalFees7d)\n                            : formatAmount(poolData.totalFees24h),\n                        })}\n                      </Text>\n                    </Flex>\n                  </Flex>\n                </Flex>\n              </Card>\n            </Box>\n            <ChartCard variant=\"pool\" chartData={chartData} />\n          </ContentLayout>\n          <Heading mb=\"16px\" mt=\"40px\" scale=\"lg\">\n            {t('Transactions')}\n          </Heading>\n          <TransactionTable transactions={transactions} />\n        </>\n      ) : (\n        <Flex mt=\"80px\" justifyContent=\"center\">\n          <ButterflyLoader />\n        </Flex>\n      )}\n    </Page1>\n  )\n}\n\nexport default PoolPage\n","import React, { useMemo, useRef, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Box, Card } from '@glide-finance/uikit'\nimport { Link } from 'react-router-dom'\nimport { useAllTokenData } from 'state/info/hooks'\nimport { TokenData } from 'state/info/types'\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport { useTranslation } from 'contexts/Localization'\n\nconst CardWrapper = styled(Link)`\n  display: inline-block;\n  min-width: 190px;\n  margin-left: 16px;\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst TopMoverCard = styled(Box)`\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: ${({ theme }) => theme.radii.card};\n  padding: 16px;\n`\n\nexport const ScrollableRow = styled.div`\n  width: 100%;\n  overflow-x: auto;\n  padding: 16px 0;\n  white-space: nowrap;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst DataCard = ({ tokenData }: { tokenData: TokenData }) => {\n  return (\n    <CardWrapper to={`/info/token/${tokenData.address}`}>\n      <TopMoverCard>\n        <Flex>\n          <Box width=\"32px\" height=\"32px\">\n            {/* wrapped in a box because of alignment issues between img and svg */}\n            <CurrencyLogo address={tokenData.address} size=\"32px\" />\n          </Box>\n          <Box ml=\"16px\">\n            <Text>{tokenData.symbol}</Text>\n            <Flex alignItems=\"center\">\n              <Text fontSize=\"14px\" mr=\"6px\" lineHeight=\"16px\">\n                ${formatAmount(tokenData.priceUSD)}\n              </Text>\n              <Percent fontSize=\"14px\" value={tokenData.priceUSDChange} />\n            </Flex>\n          </Box>\n        </Flex>\n      </TopMoverCard>\n    </CardWrapper>\n  )\n}\n\nconst TopTokenMovers: React.FC = () => {\n  const allTokens = useAllTokenData()\n  const { t } = useTranslation()\n\n  const topPriceIncrease = useMemo(() => {\n    return Object.values(allTokens)\n      .sort(({ data: a }, { data: b }) => {\n        // eslint-disable-next-line no-nested-ternary\n        return a && b ? (Math.abs(a?.priceUSDChange) > Math.abs(b?.priceUSDChange) ? -1 : 1) : -1\n      })\n      .slice(0, Math.min(20, Object.values(allTokens).length))\n  }, [allTokens])\n\n  const increaseRef = useRef<HTMLDivElement>(null)\n  const moveLeftRef = useRef<boolean>(true)\n\n  useEffect(() => {\n    const scrollInterval = setInterval(() => {\n      if (increaseRef.current) {\n        if (increaseRef.current.scrollLeft === increaseRef.current.scrollWidth - increaseRef.current.clientWidth) {\n          moveLeftRef.current = false\n        } else if (increaseRef.current.scrollLeft === 0) {\n          moveLeftRef.current = true\n        }\n        increaseRef.current.scrollTo(\n          moveLeftRef.current ? increaseRef.current.scrollLeft + 1 : increaseRef.current.scrollLeft - 1,\n          0,\n        )\n      }\n    }, 30)\n\n    return () => {\n      clearInterval(scrollInterval)\n    }\n  }, [])\n\n  if (topPriceIncrease.length === 0 || !topPriceIncrease.some((entry) => entry.data)) {\n    return null\n  }\n\n  return (\n    <Card my=\"16px\">\n      <Text ml=\"16px\" mt=\"8px\">\n        {t('Top Movers')}\n      </Text>\n      <ScrollableRow ref={increaseRef}>\n        {topPriceIncrease.map((entry) =>\n          entry.data ? <DataCard key={`top-card-token-${entry.data?.address}`} tokenData={entry.data} /> : null,\n        )}\n      </ScrollableRow>\n    </Card>\n  )\n}\n\nexport default TopTokenMovers\n","import React, { useMemo, useEffect } from 'react'\nimport { Text, Heading, Card } from '@glide-finance/uikit'\nimport Page from 'components/Layout/Page'\nimport TokenTable from 'views/Info/components/InfoTables/TokensTable'\nimport { useAllTokenData, useTokenDatas } from 'state/info/hooks'\nimport { useWatchlistTokens } from 'state/user/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport TopTokenMovers from 'views/Info/components/TopTokenMovers'\n\nconst TokensOverview: React.FC = () => {\n  const { t } = useTranslation()\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [])\n\n  const allTokens = useAllTokenData()\n\n  const formattedTokens = useMemo(() => {\n    return Object.values(allTokens)\n      .map((token) => token.data)\n      .filter((token) => token)\n  }, [allTokens])\n\n  const [savedTokens] = useWatchlistTokens()\n  const watchListTokens = useTokenDatas(savedTokens)\n\n  return (\n    <Page>\n      <Heading scale=\"lg\" mb=\"16px\">\n        {t('Your Watchlist')}\n      </Heading>\n      {savedTokens.length > 0 ? (\n        <TokenTable tokenDatas={watchListTokens} />\n      ) : (\n        <Card>\n          <Text py=\"16px\" px=\"24px\">\n            {t('Saved tokens will appear here')}\n          </Text>\n        </Card>\n      )}\n      <TopTokenMovers />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\" id=\"info-tokens-title\">\n        {t('All Tokens')}\n      </Heading>\n      <TokenTable tokenDatas={formattedTokens} />\n    </Page>\n  )\n}\n\nexport default TokensOverview\n","import { useState, useEffect } from 'react'\n\n// endpoint to check asset exists and get url to CMC page\n// returns 400 status code if token is not on CMC\nconst CMC_ENDPOINT = 'https://3rdparty-apis.coinmarketcap.com/v1/cryptocurrency/contract?address='\n\n/**\n * Check if asset exists on CMC, if exists\n * return  url, if not return undefined\n * @param address token address (all lowercase, checksummed are not supported by CMC)\n */\nconst useCMCLink = (address: string): string | undefined => {\n  const [cmcPageUrl, setCMCPageUrl] = useState<string | undefined>(undefined)\n\n  useEffect(() => {\n    const fetchLink = async () => {\n      const result = await fetch(`${CMC_ENDPOINT}${address}`)\n      // if link exists, format the url\n      if (result.status === 200) {\n        result.json().then(({ data }) => {\n          setCMCPageUrl(data.url)\n        })\n      }\n    }\n    if (address) {\n      fetchLink()\n    }\n  }, [address])\n\n  return cmcPageUrl\n}\n\nexport default useCMCLink\n","/* eslint-disable no-nested-ternary */\nimport React, { useEffect, useMemo } from 'react'\nimport { RouteComponentProps, Link } from 'react-router-dom'\nimport { Duration } from 'date-fns'\nimport styled from 'styled-components'\nimport {\n  Text,\n  Box,\n  Heading,\n  Button,\n  Card,\n  Flex,\n  Breadcrumbs,\n  Link as UIKitLink,\n  LinkExternal,\n  ButterflyLoader,\n  Image,\n  useMatchBreakpoints,\n} from '@glide-finance/uikit'\nimport Page1 from 'components/Layout/Page1'\nimport { getBscScanLink } from 'utils'\nimport truncateHash from 'utils/truncateHash'\nimport useCMCLink from 'views/Info/hooks/useCMCLink'\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport SaveIcon from 'views/Info/components/SaveIcon'\nimport {\n  usePoolDatas,\n  useTokenData,\n  usePoolsForToken,\n  useTokenChartData,\n  useTokenPriceData,\n  useTokenTransactions,\n} from 'state/info/hooks'\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\nimport { useWatchlistTokens } from 'state/user/hooks'\nimport { ONE_HOUR_SECONDS } from 'config/constants/info'\nimport { useTranslation } from 'contexts/Localization'\nimport ChartCard from 'views/Info/components/InfoCharts/ChartCard'\n\nconst ContentLayout = styled.div`\n  margin-top: 16px;\n  display: grid;\n  grid-template-columns: 260px 1fr;\n  grid-gap: 1em;\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr 1fr;\n  }\n`\n\nconst StyledCMCLink = styled(UIKitLink)`\n  width: 24px;\n  height: 24px;\n  margin-right: 8px;\n\n  & :hover {\n    opacity: 0.8;\n  }\n`\nconst DEFAULT_TIME_WINDOW: Duration = { weeks: 4 }\n\nconst TokenPage: React.FC<RouteComponentProps<{ address: string }>> = ({\n  match: {\n    params: { address: routeAddress },\n  },\n}) => {\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { t } = useTranslation()\n\n  // Needed to scroll up if user comes to this page by clicking on entry in the table\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [])\n\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\n  const address = routeAddress.toLowerCase()\n\n  const cmcLink = useCMCLink(address)\n\n  const tokenData = useTokenData(address)\n  const poolsForToken = usePoolsForToken(address)\n  const poolDatas = usePoolDatas(poolsForToken ?? [])\n  const transactions = useTokenTransactions(address)\n  const chartData = useTokenChartData(address)\n\n  // pricing data\n  const priceData = useTokenPriceData(address, ONE_HOUR_SECONDS, DEFAULT_TIME_WINDOW)\n  const adjustedPriceData = useMemo(() => {\n    // Include latest available price\n    if (priceData && tokenData && priceData.length > 0) {\n      return [\n        ...priceData,\n        {\n          time: new Date().getTime() / 1000,\n          open: priceData[priceData.length - 1].close,\n          close: tokenData?.priceUSD,\n          high: tokenData?.priceUSD,\n          low: priceData[priceData.length - 1].close,\n        },\n      ]\n    }\n    return undefined\n  }, [priceData, tokenData])\n\n  const [watchlistTokens, addWatchlistToken] = useWatchlistTokens()\n\n  return (\n    <Page1 symbol={tokenData?.symbol}>\n      {tokenData ? (\n        !tokenData.exists ? (\n          <Card>\n            <Box p=\"16px\">\n              <Text>\n                {t('No pool has been created with this token yet. Create one')}\n                <Link style={{ display: 'inline', marginLeft: '6px' }} to={`/add/${address}`}>\n                  {t('here.')}\n                </Link>\n              </Text>\n            </Box>\n          </Card>\n        ) : (\n          <>\n            {/* Stuff on top */}\n            <Flex justifyContent=\"space-between\" mb=\"24px\" flexDirection={['column', 'column', 'row']}>\n              <Breadcrumbs mb=\"32px\">\n                <Link to=\"/info\">\n                  <Text color=\"primary\">{t('Info')}</Text>\n                </Link>\n                <Link to=\"/info/tokens\">\n                  <Text color=\"primary\">{t('Tokens')}</Text>\n                </Link>\n                <Flex>\n                  <Text mr=\"8px\">{tokenData.symbol}</Text>\n                  <Text>{`(${truncateHash(address)})`}</Text>\n                </Flex>\n              </Breadcrumbs>\n              <Flex justifyContent={[null, null, 'flex-end']} mt={['8px', '8px', 0]}>\n                <LinkExternal mr=\"8px\" color=\"primary\" href={getBscScanLink(address, 'address')}>\n                  {t('View on explorer')}\n                </LinkExternal>\n                {cmcLink && (\n                  <StyledCMCLink href={cmcLink} rel=\"noopener noreferrer nofollow\" target=\"_blank\">\n                    <Image src=\"/images/CMC-logo.svg\" height={22} width={22} alt={t('View token on CoinMarketCap')} />\n                  </StyledCMCLink>\n                )}\n                <SaveIcon fill={watchlistTokens.includes(address)} onClick={() => addWatchlistToken(address)} />\n              </Flex>\n            </Flex>\n            <Flex justifyContent=\"space-between\" flexDirection={['column', 'column', 'column', 'row']}>\n              <Flex flexDirection=\"column\" mb={['8px', null]}>\n                <Flex alignItems=\"center\">\n                  <CurrencyLogo size=\"32px\" address={address} />\n                  <Text\n                    ml=\"12px\"\n                    bold\n                    lineHeight=\"0.7\"\n                    fontSize={isXs || isSm ? '24px' : '40px'}\n                    id=\"info-token-name-title\"\n                  >\n                    {tokenData.name}\n                  </Text>\n                  <Text ml=\"12px\" lineHeight=\"1\" color=\"textSubtle\" fontSize={isXs || isSm ? '14px' : '20px'}>\n                    ({tokenData.symbol})\n                  </Text>\n                </Flex>\n                <Flex mt=\"8px\" ml=\"46px\" alignItems=\"center\">\n                  <Text mr=\"16px\" bold fontSize=\"24px\">\n                    ${formatAmount(tokenData.priceUSD, { notation: 'standard' })}\n                  </Text>\n                  <Percent value={tokenData.priceUSDChange} fontWeight={600} />\n                </Flex>\n              </Flex>\n              <Flex>\n                <Link to={`/add/${address}`}>\n                  <Button mr=\"8px\" variant=\"secondary\">\n                    {t('Add Liquidity')}\n                  </Button>\n                </Link>\n                <Link to={`/swap?inputCurrency=${address}`}>\n                  <Button>{t('Trade')}</Button>\n                </Link>\n              </Flex>\n            </Flex>\n\n            {/* data on the right side of chart */}\n            <ContentLayout>\n              <Card>\n                <Box p=\"24px\">\n                  <Text bold small color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Liquidity')}\n                  </Text>\n                  <Text bold fontSize=\"24px\">\n                    ${formatAmount(tokenData.liquidityUSD)}\n                  </Text>\n                  <Percent value={tokenData.liquidityUSDChange} />\n\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Volume 24H')}\n                  </Text>\n                  <Text bold fontSize=\"24px\" textTransform=\"uppercase\">\n                    ${formatAmount(tokenData.volumeUSD)}\n                  </Text>\n                  <Percent value={tokenData.volumeUSDChange} />\n\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Volume 7D')}\n                  </Text>\n                  <Text bold fontSize=\"24px\">\n                    ${formatAmount(tokenData.volumeUSDWeek)}\n                  </Text>\n\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Transactions 24H')}\n                  </Text>\n                  <Text bold fontSize=\"24px\">\n                    {formatAmount(tokenData.txCount, { isInteger: true })}\n                  </Text>\n                </Box>\n              </Card>\n              {/* charts card */}\n              <ChartCard\n                variant=\"token\"\n                chartData={chartData}\n                tokenData={tokenData}\n                tokenPriceData={adjustedPriceData}\n              />\n            </ContentLayout>\n\n            {/* pools and transaction tables */}\n            <Heading scale=\"lg\" mb=\"16px\" mt=\"40px\">\n              {t('Pools')}\n            </Heading>\n\n            <PoolTable poolDatas={poolDatas} />\n\n            <Heading scale=\"lg\" mb=\"16px\" mt=\"40px\">\n              {t('Transactions')}\n            </Heading>\n\n            <TransactionTable transactions={transactions} />\n          </>\n        )\n      ) : (\n        <Flex mt=\"80px\" justifyContent=\"center\">\n          <ButterflyLoader />\n        </Flex>\n      )}\n    </Page1>\n  )\n}\n\nexport default TokenPage\n","import React from 'react'\nimport { Redirect, RouteComponentProps } from 'react-router-dom'\nimport { isAddress } from 'ethers/lib/utils'\nimport TokenPage from './TokenPage'\n\nconst RedirectInvalidToken = (props: RouteComponentProps<{ address: string }>) => {\n  const {\n    match: {\n      params: { address },\n    },\n  } = props\n\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\n  if (!isAddress(address.toLowerCase())) {\n    return <Redirect to=\"/\" />\n  }\n  return <TokenPage {...props} />\n}\n\nexport default RedirectInvalidToken\n","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport { PoolUpdater, ProtocolUpdater, TokenUpdater } from 'state/info/updaters'\nimport InfoNav from './components/InfoNav'\nimport Overview from './Overview'\nimport Pools from './Pools'\nimport PoolPage from './Pools/PoolPage'\nimport Tokens from './Tokens'\nimport RedirectInvalidToken from './Tokens/redirects'\n\nconst Info: React.FC = () => {\n  return (\n    <>\n      <ProtocolUpdater />\n      <PoolUpdater />\n      <TokenUpdater />\n      <InfoNav />\n      <Route path=\"/info\" exact>\n        <Overview />\n      </Route>\n      <Route path=\"/info/pools\" exact>\n        <Pools />\n      </Route>\n      <Route path=\"/info/tokens\" exact>\n        <Tokens />\n      </Route>\n      <Route exact path={['/info/tokens/:address', '/info/token/:address']} component={RedirectInvalidToken} />\n      <Route exact path={['/info/pools/:address', '/info/pool/:address', '/info/pair/:address']} component={PoolPage} />\n    </>\n  )\n}\n\nexport default Info\n","export const GRAPH_API_PROFILE = process.env.REACT_APP_GRAPH_API_PROFILE\nexport const GRAPH_API_PREDICTION = process.env.REACT_APP_GRAPH_API_PREDICTION\nexport const GRAPH_API_LOTTERY = process.env.REACT_APP_GRAPH_API_LOTTERY\nexport const SNAPSHOT_VOTING_API = process.env.REACT_APP_SNAPSHOT_VOTING_API\nexport const SNAPSHOT_BASE_URL = process.env.REACT_APP_SNAPSHOT_BASE_URL\nexport const SNAPSHOT_API = `${SNAPSHOT_BASE_URL}/graphql`\nexport const SNAPSHOT_HUB_API = `${SNAPSHOT_BASE_URL}/api/message`\nexport const BITQUERY_API = 'https://graphql.bitquery.io'\n\nexport const BRIDGE_FAUCET_API = 'https://api.glidefinance.io'\n\nexport const INFO_CLIENT = 'https://api.glidefinance.io/subgraphs/name/glide/exchange'\nexport const BLOCKS_CLIENT = 'https://api.glidefinance.io/subgraphs/name/glide/blocks'\n// export const BLOCKS_CLIENT = 'https://elastos-graph.elk.finance/subgraphs/name/elkfinance/elastos-blocks'\n"],"sourceRoot":""}