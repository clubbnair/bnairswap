{"version":3,"sources":["utils/latinise.ts","components/SearchInput/SearchInput.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","hooks/useDelayedUnmount.ts","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/CountdownCard.tsx","views/Farms/Farms.tsx"],"names":["Latinise","latin_map","τ","Τ","latinise","input","replace","x","StyledInput","styled","Input","InputWrapper","div","theme","mediaQueries","sm","Container","SearchInput","onChangeCallback","onChange","placeholder","useState","toggled","setToggled","searchText","setSearchText","t","useTranslation","debouncedOnChange","useMemo","debounce","e","value","target","onBlur","Wrapper","colors","primary","ExpandableSectionButton","onClick","expanded","role","color","bold","defaultProps","ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","variant","primaryToken","secondaryToken","flexDirection","split","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","isWarning","shadows","warning","inset","text","xs","StyledErrorMessage","Text","ModalInput","max","onSelectMax","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceBigNumber","BigNumber","gt","lt","toLocaleString","toFixed","ROUND_DOWN","displayBalance","pattern","inputMode","step","min","scale","mr","external","spinnerIcon","spin","DepositModal","onConfirm","onDismiss","tokenName","val","setVal","useTheme","useToast","toastSuccess","toastError","pendingTx","setPendingTx","chainId","useActiveWeb3React","fullBalance","getFullDisplayBalance","valNumber","fullBalanceNumber","handleChange","useCallback","currentTarget","validity","valid","handleSelectMax","title","headerBackground","gradients","cardHeader","disabled","isFinite","eq","isLoading","endIcon","undefined","a","console","error","alignSelf","WithdrawModal","useUnstakeFarms","pid","masterChefContract","useMasterchef","onUnstake","amount","unstakeFarm","useStakeFarms","onStake","stakeFarm","txHash","info","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","location","useLocation","dispatch","useAppDispatch","useWeb3React","account","lpPrice","useLpTokenPrice","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","useModal","onPresentDeposit","onPresentWithdraw","Balance","getBalanceNumber","times","unit","prefix","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","cakePrice","usePriceCakeUsdc","rawEarningsBalance","BIG_ZERO","earningsUsdc","multipliedBy","toNumber","useApproveFarm","lpContract","onApprove","approve","address","ethers","constants","MaxUint256","tx","wait","receipt","status","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","mt","ConnectWalletButton","ApyButton","apr","displayApr","ApyCalculatorModal","linkLabel","tokenPrice","linkHref","isFarm","onPresentApyModal","event","stopPropagation","ml","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","maximumFractionDigits","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","isPromotedFarm","isActive","isCommunity","display","CardActionsContainer","getBscScanLink","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","useEffect","timeoutId","setTimeout","clearTimeout","textSubtle","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","label","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","keyframes","collapseAnimation","css","dropdownDeep","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isXs","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","CountdownCard","currentBlock","targetBlock","blocksToGo","timeRemaining","ESC_BLOCK_TIME","days","Math","floor","hours","minutes","seconds","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","ConnectContainer","getDisplayApr","glideRewardsApr","lpRewardsApr","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","usePersistState","TABLE","localStorageKey","viewMode","library","sortOption","setSortOption","chosenFarmsLength","isArchived","isInactive","useBlock","usePollFarmsData","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","usdcPrice","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","Page","PageHeader","flex","CLUBBNAIR_START_BLOCK","toString","checked","Select","options","option","marginLeft","setupNetwork","sort","b","exact","renderContent","Loading"],"mappings":"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","file":"static/js/11.08571946.chunk.js","sourcesContent":["export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import React, { useState, useMemo } from 'react'\nimport { Input } from '@glide-finance/uikit'\nimport styled from 'styled-components'\nimport debounce from 'lodash/debounce'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledInput = styled(Input)`\n  border-radius: 16px;\n  margin-left: auto;\n`\n\nconst InputWrapper = styled.div`\n  position: relative;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: block;\n  }\n`\n\nconst Container = styled.div<{ toggled: boolean }>``\n\ninterface Props {\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n  placeholder?: string\n}\n\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback, placeholder = 'Search' }) => {\n  const [toggled, setToggled] = useState(false)\n  const [searchText, setSearchText] = useState('')\n\n  const { t } = useTranslation()\n\n  const debouncedOnChange = useMemo(\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\n    [onChangeCallback],\n  )\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchText(e.target.value)\n    debouncedOnChange(e)\n  }\n\n  return (\n    <Container toggled={toggled}>\n      <InputWrapper>\n        <StyledInput\n          value={searchText}\n          onChange={onChange}\n          placeholder={t(placeholder)}\n          onBlur={() => setToggled(false)}\n        />\n      </InputWrapper>\n    </Container>\n  )\n}\n\nexport default SearchInput\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@glide-finance/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\n  const firstPart =\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'ELA' : quoteTokenAddressString\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'ELA' : tokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@glide-finance/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading } from '@glide-finance/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { Token } from 'config/constants/types'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  token: Token\n  quoteToken: Token\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\nimport Spacer from './Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@glide-finance/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BigNumber } from 'bignumber.js'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n  margin-bottom: 12px;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n  border: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -12px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n    const balanceBigNumber = new BigNumber(balance)\n    if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n      return balanceBigNumber.toLocaleString()\n    }\n    return balanceBigNumber.toFixed(6, BigNumber.ROUND_DOWN)\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, LinkExternal, AutoRenewIcon } from '@glide-finance/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport useTheme from 'hooks/useTheme'\nimport useActiveWeb3React from '../../../hooks/useActiveWeb3React'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const { theme } = useTheme()\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const { chainId } = useActiveWeb3React()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={\n            pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber) || chainId !== 20\n          }\n          isLoading={pendingTx}\n          endIcon={pendingTx ? spinnerIcon : undefined}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Staked!'), t('Your tokens have been staked in the farm'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get %symbol%', { symbol: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, AutoRenewIcon } from '@glide-finance/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport useActiveWeb3React from '../../../hooks/useActiveWeb3React'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const { theme } = useTheme()\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const { chainId } = useActiveWeb3React()\n\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={\n            pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber) || chainId !== 20\n          }\n          isLoading={pendingTx}\n          endIcon={pendingTx ? spinnerIcon : undefined}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import { useCallback } from 'react'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useUnstakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      await unstakeFarm(masterChefContract, pid, amount)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakeFarms\n","import { useCallback } from 'react'\nimport { stakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useStakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\n      console.info(txHash)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakeFarms\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@glide-finance/uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\nimport useStakeFarms from '../../hooks/useStakeFarms'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account, chainId } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\n    }\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item)) || chainId !== 20}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        )}\n      </Flex>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { harvestFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useHarvestFarm = (farmPid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    await harvestFarm(masterChefContract, farmPid)\n  }, [farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestFarm\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@glide-finance/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport useToast from 'hooks/useToast'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePriceCakeUsdc } from 'state/farms/hooks'\nimport Balance from 'components/Balance'\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account, chainId } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const cakePrice = usePriceCakeUsdc()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\n  const earningsUsdc = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n        {earningsUsdc > 0 && (\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsUsdc} unit=\" USD\" prefix=\"~\" />\n        )}\n      </Flex>\n      <Button\n        disabled={rawEarningsBalance.eq(0) || pendingTx || chainId !== 20}\n        onClick={async () => {\n          setPendingTx(true)\n          try {\n            await onReward()\n            toastSuccess(\n              `${t('Harvested')}!`,\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CLUBBNAIR' }),\n            )\n          } catch (e) {\n            toastError(\n              t('Error'),\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n            )\n            console.error(e)\n          } finally {\n            setPendingTx(false)\n          }\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n        }}\n      >\n        {t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useApproveFarm = (lpContract: Contract) => {\n  const masterChefContract = useMasterchef()\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await lpContract.approve(masterChefContract.address, ethers.constants.MaxUint256)\n      const receipt = await tx.wait()\n      return receipt.status\n    } catch (e) {\n      return false\n    }\n  }, [lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveFarm\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Text } from '@glide-finance/uikit'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\nimport useApproveFarm from '../../hooks/useApproveFarm'\nimport useActiveWeb3React from '../../../../hooks/useActiveWeb3React'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const { chainId } = useActiveWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n  } = farm.userData || {}\n  const allowance = new BigNumber(allowanceAsString)\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n  const earnings = new BigNumber(earningsAsString)\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20(lpAddress)\n\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval || chainId !== 20} onClick={handleApprove}>\n        {t('Enable Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          CLUBBNAIR\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {farm.lpSymbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { IconButton, useModal, CalculateIcon } from '@glide-finance/uikit'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, displayApr, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      tokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      displayApr={displayApr}\n      linkHref={addLiquidityUrl}\n      isFarm\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Card, Flex, Text, Skeleton } from '@glide-finance/uikit'\nimport { Farm } from 'state/types'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  lpRewardsApr?: number\n  liquidity?: BigNumber\n}\n\nconst StyledCard = styled(Card)`\n  align-self: baseline;\n`\n\nconst FarmCardInnerContainer = styled(Flex)`\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n`\n\nconst ExpandingWrapper = styled.div`\n  padding: 24px;\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  displayApr: string\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.gt(0)\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('CLUBBNAIR + Fees')\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = getAddress(farm.lpAddresses)\n  const isPromotedFarm = farm.token.symbol === 'CLUBBNAIR'\n\n  return (\n    <StyledCard isActive={isPromotedFarm}>\n      <FarmCardInnerContainer>\n        <CardHeading\n          lpLabel={lpLabel}\n          multiplier={farm.multiplier}\n          isCommunityFarm={farm.isCommunity}\n          token={farm.token}\n          quoteToken={farm.quoteToken}\n        />\n        {!removed && (\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <Text>{t('APR')}:</Text>\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n              {farm.apr ? (\n                <>\n                  <ApyButton\n                    lpLabel={lpLabel}\n                    addLiquidityUrl={addLiquidityUrl}\n                    cakePrice={cakePrice}\n                    apr={farm.apr}\n                    displayApr={displayApr}\n                  />\n                  {displayApr}%\n                </>\n              ) : (\n                <Skeleton height={24} width={80} />\n              )}\n            </Text>\n          </Flex>\n        )}\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Earn')}:</Text>\n          <Text bold>{earnLabel}</Text>\n        </Flex>\n        <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\n      </FarmCardInnerContainer>\n\n      <ExpandingWrapper>\n        <ExpandableSectionButton\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\n          expanded={showExpandableSection}\n        />\n        {showExpandableSection && (\n          <DetailsSection\n            removed={removed}\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\n            // infoAddress={`https://glidefinance.info/pool/${lpAddress}`}\n            totalValueFormatted={totalValueFormatted}\n            lpLabel={lpLabel}\n            addLiquidityUrl={addLiquidityUrl}\n          />\n        )}\n      </ExpandingWrapper>\n    </StyledCard>\n  )\n}\n\nexport default FarmCard\n","import { useState, useEffect } from 'react'\n\n/**\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\n * This hook \"shows\" element immediately when the isMounted is true\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\n * delayTime should be the same as animation time in most cases.\n */\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\n  const [shouldRender, setShouldRender] = useState(false)\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>\n    if (isMounted && !shouldRender) {\n      setShouldRender(true)\n    } else if (!isMounted && shouldRender) {\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\n    }\n    return () => clearTimeout(timeoutId)\n  }, [isMounted, delayTime, shouldRender])\n  return shouldRender\n}\n\nexport default useDelayedUnmount\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@glide-finance/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton\n              lpLabel={lpLabel}\n              cakePrice={cakePrice}\n              apr={originalValue}\n              displayApr={value}\n              addLiquidityUrl={addLiquidityUrl}\n            />\n          )}\n        </>\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/farms/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@glide-finance/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Token } from 'config/constants/types'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\n      </TokenWrapper>\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from '@glide-finance/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@glide-finance/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Skeleton, useTooltip } from '@glide-finance/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <>\n      {t('The multiplier represents the amount of CLUBBNAIR rewards each farm gets.')}\n      <br />\n      <br />\n      {t('For example, if a 1x farm was getting 1 CLUBBNAIR per block, a 5x farm would be getting 5 CLUBBNAIR per block.')}\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@glide-finance/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.primary};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import React, { useState } from 'react'\nimport { Button, Heading, Skeleton, Text } from '@glide-finance/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeUsdc } from 'state/farms/hooks'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\n\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const { toastSuccess, toastError } = useToast()\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeUsdc()\n  let earnings = BIG_ZERO\n  let earningsUsdc = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsUsdc = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account, chainId } = useWeb3React()\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          CLUBBNAIR\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading>{displayBalance}</Heading>\n          {earningsUsdc > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsUsdc} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          disabled={earnings.eq(0) || pendingTx || !userDataReady || chainId !== 20}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Harvested')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CLUBBNAIR' }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }}\n          ml=\"4px\"\n        >\n          {t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text, Heading } from '@glide-finance/uikit'\nimport { useLocation } from 'react-router-dom'\nimport { BigNumber } from 'bignumber.js'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport useStakeFarms from '../../../hooks/useStakeFarms'\nimport useApproveFarm from '../../../hooks/useApproveFarm'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  lpSymbol,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n}) => {\n  const { t } = useTranslation()\n  const { account, chainId } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = getAddress(lpAddresses)\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\n    }\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(6, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Heading>{displayBalance()}</Heading>\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake').toUpperCase()}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item)) || chainId !== 20}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval || chainId !== 20} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from '@glide-finance/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBscScanLink } from 'utils'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.dropdownDeep};\n  display: flex;\n  border-radius: 10px;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = getAddress(farm.lpAddresses)\n  const bsc = getBscScanLink(lpAddress, 'address')\n  // const info = `https://glidefinance.info/pool/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`/add/${liquidityUrlPathParts}`}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        {/* <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal> popsicle */}\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@glide-finance/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/farms/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n// background: ${({ theme }) => theme.colors.gradients.bubblegum};\n// add background color to uikit\nconst StyledTr = styled.tr`\n  background: #464646; \n  border-radius: 16px;\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@glide-finance/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\n// const Container = styled.div`\n//   filter: ${({ theme }) => theme.card.dropShadow};\n//   width: 100%;\n//   background: ${({ theme }) => theme.card.background};\n//   border-radius: 16px;\n//   margin: 16px 0px;\n// `\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\n// const StyledTable = styled.table`\n//   border-collapse: collapse;\n//   font-size: 14px;\n//   border-radius: 4px;\n//   margin-left: auto;\n//   margin-right: auto;\n//   width: 100%;\n// `\n\nconst StyledTable = styled.table`\n  border-collapse: separate;\n  border-spacing: 0 1em;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n    td:first-child {\n      border-left-style: solid;\n      border-top-left-radius: 10px;\n      border-bottom-left-radius: 10px;\n    }\n    td:last-child {\n      border-right-style: solid;\n      border-bottom-right-radius: 10px;\n      border-top-right-radius: 10px;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@glide-finance/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/farms':\n      activeIndex = 0\n      break\n    case '/farms/history':\n      activeIndex = 1\n      break\n    case '/farms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Text,\n  Flex,\n  Heading,\n  Skeleton,\n} from '@glide-finance/uikit'\nimport { ESC_BLOCK_TIME } from 'config'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface CountdownCardProps {\n  currentBlock: number\n  targetBlock: number\n}\n\nconst StyledCard = styled(Card)`\n  width: 100%;\n  flex: 1;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 240px;\n  }\n`\n\nconst CountdownCard: React.FC<CountdownCardProps> = ({ currentBlock, targetBlock }) => {\n  const { t } = useTranslation()\n\n  // const cakeBountyToDisplay = hasFetchedCakeBounty ? getBalanceNumber(estimatedCakeBountyReward, 18) : 0\n\n  // const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent fee={callFee} />, {\n  //   placement: 'bottom-end',\n  //   tooltipOffset: [20, 10],\n  // })\n\n  const blocksToGo = targetBlock - currentBlock < 0 ? 0 : targetBlock - currentBlock\n  const timeRemaining = blocksToGo * ESC_BLOCK_TIME\n\n  const days = Math.floor(timeRemaining / (60 * 60 * 24))\n  const hours = Math.floor((timeRemaining % (60 * 60 * 24)) / (60 * 60))\n  const minutes = Math.floor((timeRemaining % (60 * 60)) / (60))\n  const seconds = Math.floor((timeRemaining % (60)))\n\n  return (\n    <>\n      <StyledCard>\n        <CardBody>\n          <Flex flexDirection=\"column\">\n            <Flex alignItems=\"center\" mb=\"12px\">\n              <Text fontSize=\"20px\" bold color=\"textSubtle\" mr=\"4px\">\n                {t('CLUBBNAIR Farming Start')}\n              </Text>\n            </Flex>\n          </Flex>\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\n            <Flex flexDirection=\"column\" mr=\"12px\">\n              <Heading>\n                {currentBlock ? (\n                  <>\n                    <Text fontSize=\"18px\">{blocksToGo} {t('blocks')}</Text>\n                    <Text fontSize=\"18px\">{days}d, {hours}h, {minutes}m, {seconds}s</Text>\n                  </>\n                ) : (\n                  <Skeleton height={18} width={96} mb=\"2px\" />\n                )}\n                \n                {/* { blocksToGo > 0 ? (\n                  <Balance fontSize=\"20px\" bold value={targetBlock} decimals={0} />\n                ) : (\n                  // <Skeleton height={20} width={96} mb=\"2px\" />\n                  <Balance fontSize=\"20px\" bold value={0} decimals={0} />\n                  <Text fontSize=\"20px\">{t('')}</Text>\n\n                )} */}\n              </Heading>\n            </Flex>\n          </Flex>\n        </CardBody>\n      </StyledCard>\n    </>\n  )\n}\n\nexport default CountdownCard\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  // Image,\n  Heading,\n  GradientHeading,\n  RowType,\n  Toggle,\n  Text,\n  Button,\n  Flex,\n} from '@glide-finance/uikit'\nimport { ChainId } from '@glide-finance/sdk'\nimport { CLUBBNAIR_START_BLOCK } from 'config'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport { useFarms, usePollFarmsData, usePriceCakeUsdc } from 'state/farms/hooks'\nimport usePersistState from 'hooks/usePersistState'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { setupNetwork } from 'utils/wallet'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport { useUserFarmStakedOnly } from 'state/user/hooks'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport Loading from 'components/Loading'\nimport { useBlock } from 'state/block/hooks'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\n// import ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\nimport CountdownCard from './components/CountdownCard'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\n// const Gradient = styled(GradientHeading)`\n//   display:inline-block;\n// `\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\n// const StyledImage = styled(Image)`\n//   margin-left: auto;\n//   margin-right: auto;\n//   margin-top: 58px;\n// `\n\nconst ConnectContainer = styled(Flex)`\n  margin-bottom: 15px;\n`\n\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst getDisplayApr = (glideRewardsApr?: number, lpRewardsApr?: number) => {\n  if (glideRewardsApr && lpRewardsApr) {\n    return (glideRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  if (glideRewardsApr) {\n    return glideRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  return null\n}\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeUsdc()\n  const [query, setQuery] = useState('')\n  const [viewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'glide_farm_view' })\n  const { account, chainId, library } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const chosenFarmsLength = useRef(0)\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  const { currentBlock } = useBlock()\n\n  usePollFarmsData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\n\n  // const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  // const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter(\n    (farm) => farm.pid !== 0 && farm.multiplier === '0X' && farm.multiplier !== '0X' && !isArchivedPid(farm.pid),\n  )\n\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.usdcPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.usdcPrice)\n        const { glideRewardsApr, lpRewardsApr } = isActive\n          ? getFarmApr(\n              new BigNumber(farm.poolWeight),\n              cakePrice,\n              totalLiquidity,\n              farm.lpAddresses[ChainId.MAINNET],\n              currentBlock,\n            )\n          : { glideRewardsApr: 0, lpRewardsApr: 0 }\n\n        return { ...farm, apr: glideRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive, currentBlock],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n\n  const chosenFarmsMemoized = useMemo(() => {\n    let chosenFarms = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  chosenFarmsLength.current = chosenFarmsMemoized.length\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\n          if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\n            return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\n          }\n          return farmsCurrentlyVisible\n        })\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [chosenFarmsMemoized, observerIsSet])\n\n  const rowData = chosenFarmsMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('', '')\n\n    const row: RowProps = {\n      apr: {\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr), // TBD\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <FlexLayout>\n        <Route exact path={`${path}`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed={false}\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/history`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/archived`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n      </FlexLayout>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <Page>\n        <PageHeader>\n          <Flex justifyContent=\"space-between\" flexDirection={['column', null, null, 'row']}>\n            <Flex flex=\"1\" flexDirection=\"column\" mr={['8px', 0]}>\n              <GradientHeading as=\"h1\" scale=\"xxl\" color=\"glide\" mb=\"24px\">\n                {t('Farms')}\n              </GradientHeading>\n              <Heading scale=\"lg\" color=\"text\">\n                {t('Deposit LP tokens to earn')}\n              </Heading>\n            </Flex>\n            {chainId === 20 && Number(CLUBBNAIR_START_BLOCK.toString()) - currentBlock + 30000 > 0 && (\n              <Flex flex=\"1\" height=\"fit-content\" justifyContent=\"center\" alignItems=\"center\" mt={['24px', null, '0']}>\n                <CountdownCard currentBlock={currentBlock} targetBlock={Number(CLUBBNAIR_START_BLOCK.toString())} />\n              </Flex>\n            )}\n          </Flex>\n          {/* <NavLink exact activeClassName=\"active\" to=\"/farms/auction\" id=\"lottery-pot-banner\">\n          <Button p=\"0\" variant=\"text\">\n            <Text color=\"primary\" bold fontSize=\"16px\" mr=\"4px\">\n              {t('Community Auctions')}\n            </Text>\n            <ArrowForwardIcon color=\"primary\" />\n          </Button>\n        </NavLink> */}\n        </PageHeader>\n        <ControlContainer>\n          <ViewControls>\n            {/* <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} /> */}\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\n              <Select\n                options={[\n                  {\n                    label: t('Hot'),\n                    value: 'hot',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Multiplier'),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder={t('Search Farms')} />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {chainId !== 20 && (\n          <ConnectContainer justifyContent=\"center\">\n            <Button\n              onClick={() => {\n                setupNetwork(20, library)\n              }}\n            >\n              {t('Connect to the Elastos network to begin')}\n            </Button>\n          </ConnectContainer>\n        )}\n        {renderContent()}\n        {account && !userDataLoaded && stakedOnly && (\n          <Flex justifyContent=\"center\">\n            <Loading />\n          </Flex>\n        )}\n        <div ref={loadMoreRef} />\n        {/* <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} /> */}\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}